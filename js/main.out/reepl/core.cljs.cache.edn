;; Analyzed by ClojureScript 1.7.228
{:use-macros {reaction reagent.ratom}, :excludes #{}, :name reepl.core, :imports nil, :requires {reepl.completions reepl.completions, subs reepl.subs, helpers reepl.helpers, reepl.helpers reepl.helpers, cljs.tools.reader cljs.tools.reader, code-mirror reepl.code-mirror, reagent.core reagent.core, r reagent.core, reepl.code-mirror reepl.code-mirror, reepl.handlers reepl.handlers, handlers reepl.handlers, reepl.show-value reepl.show-value, reepl.subs reepl.subs, str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, reepl.repl-items reepl.repl-items, re-frame.core re-frame.core}, :uses {completion-list reepl.completions, subscribe re-frame.core, repl-items reepl.repl-items, dispatch-sync re-frame.core, show-value reepl.show-value, dispatch re-frame.core}, :defs {initial-state {:name reepl.core/initial-state, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 162, :column 1, :end-line 162, :end-column 19, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 162, :column 6, :end-line 162, :end-column 19}}, repl-hint {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 167, :column 7, :end-line 167, :end-column 16, :arglists (quote ([complete-word {:keys [start end text]} options])), :doc "Get a new completion state."}, :name reepl.core/repl-hint, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :end-column 16, :method-params ([complete-word p__13435 options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 3, :fn-var true, :arglists (quote ([complete-word {:keys [start end text]} options])), :doc "Get a new completion state."}, default-cm-opts {:name reepl.core/default-cm-opts, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 89, :column 1, :end-line 89, :end-column 21, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 89, :column 6, :end-line 89, :end-column 21}}, view {:name reepl.core/view, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 75, :column 1, :end-line 75, :end-column 10, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 75, :column 6, :end-line 75, :end-column 10}}, text {:name reepl.core/text, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 76, :column 1, :end-line 76, :end-column 10, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 76, :column 6, :end-line 76, :end-column 10}}, docs-view {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 145, :column 7, :end-line 145, :end-column 16, :arglists (quote ([docs]))}, :name reepl.core/docs-view, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :end-column 16, :method-params ([docs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([docs]))}, repl-input {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 123, :column 7, :end-line 123, :end-column 17, :arglists (quote ([state submit cm-opts]))}, :name reepl.core/repl-input, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :end-column 17, :method-params ([state submit cm-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state submit cm-opts]))}, set-print! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 149, :column 7, :end-line 149, :end-column 17, :arglists (quote ([log]))}, :name reepl.core/set-print!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :end-column 17, :method-params ([log]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([log]))}, make-handlers {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 243, :column 7, :end-line 243, :end-column 20, :arglists (quote ([state]))}, :name reepl.core/make-handlers, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, button {:name reepl.core/button, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 77, :column 1, :end-line 77, :end-column 12, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 77, :column 6, :end-line 77, :end-column 12}}, make-complete-cmd {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 252, :column 7, :end-line 252, :end-column 24, :arglists (quote ([complete-word complete-atom]))}, :name reepl.core/make-complete-cmd, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :end-column 24, :method-params ([complete-word complete-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 2, :fn-var true, :arglists (quote ([complete-word complete-atom]))}, is-valid-cljs? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 79, :column 7, :end-line 79, :end-column 21, :arglists (quote ([source]))}, :name reepl.core/is-valid-cljs?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :end-column 21, :method-params ([source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source]))}, cycle-completions {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 206, :column 7, :end-line 206, :end-column 24, :arglists (quote ([{:keys [num pos active from to list initial-text], :as state} go-back? cm evt])), :doc "Cycle through completions, changing the codemirror text accordingly. Returns\n  a new state map.\n\n  state\n    the current completion state\n  go-back?\n    whether to cycle in reverse (generally b/c shift is pressed)\n  cm\n    the codemirror instance\n  evt\n    the triggering event. it will be `.preventDefault'd if there are completions\n    to cycle through."}, :name reepl.core/cycle-completions, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :end-column 24, :method-params ([p__13440 go-back? cm evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 4, :fn-var true, :arglists (quote ([{:keys [num pos active from to list initial-text], :as state} go-back? cm evt])), :doc "Cycle through completions, changing the codemirror text accordingly. Returns\n  a new state map.\n\n  state\n    the current completion state\n  go-back?\n    whether to cycle in reverse (generally b/c shift is pressed)\n  cm\n    the codemirror instance\n  evt\n    the triggering event. it will be `.preventDefault'd if there are completions\n    to cycle through."}, cycle-pos {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 182, :column 7, :end-line 182, :end-column 16, :arglists (quote ([count current go-back? initial-active])), :doc "Cycle through positions. Returns [active? new-pos].\n\n  count\n    total number of completions\n  current\n    current position\n  go-back?\n    should we be going in reverse\n  initial-active\n    if false, then we return not-active when wrapping around"}, :name reepl.core/cycle-pos, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :end-column 16, :method-params ([count current go-back? initial-active]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 4, :fn-var true, :arglists (quote ([count current go-back? initial-active])), :doc "Cycle through positions. Returns [active? new-pos].\n\n  count\n    total number of completions\n  current\n    current position\n  go-back?\n    should we be going in reverse\n  initial-active\n    if false, then we return not-active when wrapping around"}, repl {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 259, :column 7, :end-line 259, :end-column 11, :arglists (quote ([& {:keys [execute complete-word get-docs state complete-atom show-value-opts js-cm-opts on-cm-init]}])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [execute complete-word get-docs state complete-atom show-value-opts js-cm-opts on-cm-init]})], :arglists ([& {:keys [execute complete-word get-docs state complete-atom show-value-opts js-cm-opts on-cm-init]}]), :arglists-meta (nil)}}, :name reepl.core/repl, :variadic true, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [execute complete-word get-docs state complete-atom show-value-opts js-cm-opts on-cm-init]})], :arglists ([& {:keys [execute complete-word get-docs state complete-atom show-value-opts js-cm-opts on-cm-init]}]), :arglists-meta (nil)}, :method-params [({:keys [execute complete-word get-docs state complete-atom show-value-opts js-cm-opts on-cm-init]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [execute complete-word get-docs state complete-atom show-value-opts js-cm-opts on-cm-init]}])}, styles {:name reepl.core/styles, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 22, :column 1, :end-line 22, :end-column 12, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/core.cljs", :line 22, :column 6, :end-line 22, :end-column 12}}}, :require-macros {reagent.ratom reagent.ratom}, :cljs.analyzer/constants {:seen #{:intro-message :line-height every? :js-cm-opts :stop-show-all :num :wrap map :cycle :complete-word :clear-items :color :on-up :key comp :complete-atom :completion-active :else :should-eval :white-space :font-size :on-cm-init :top :main-caret :overflow :completion-show-all :intro-code :hist-pos :should-go-down :background-color :docs :input-container :add-result :start :should-go-up cm-opts :on-down :flex-wrap :pos :history :flex :execute :state :on-eval :input-caret :initial-text :absolute :completion-container :style :set-text :add-input nil? :z-index :complete-cmd :list not :from :hidden :completion-empty :active :padding :count :go-down :container :completion-item :completion-selected :right :display :position :get-docs :show-value-opts :set :items :margin-right :end :go-up :on-change :border-top :completion-list :show-all :add-log :auto :margin-bottom :relative :font-family :flex-direction :height :border-bottom :row :clear :left :docs-empty :text :to}, :order [:intro-message :completion-active :main-caret :completion-show-all :intro-code :docs :input-container :input-caret :completion-container :completion-empty :container :completion-item :completion-selected :completion-list :docs-empty :padding :line-height :border-bottom :flex-direction :margin-bottom :row :background-color :margin-right :position :top :left :right :z-index :flex-wrap :absolute :wrap :height :overflow :auto :border-top :color :font-size :relative :font-family :flex :display :white-space :hidden :else :should-go-up :should-go-down :should-eval :on-up :on-down :complete-cmd :on-change every? comp not nil? map cm-opts :pos :count :text :style :on-eval :key :js-cm-opts :items :hist-pos :history :start :end :list :num :active :show-all :initial-text :from :to :add-input :add-result :go-up :go-down :clear-items :set-text :add-log :clear :stop-show-all :set :cycle :execute :complete-word :get-docs :state :complete-atom :show-value-opts :on-cm-init]}, :doc nil}