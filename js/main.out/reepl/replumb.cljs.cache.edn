;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name reepl.replumb, :imports {XhrIo goog.net.XhrIo}, :requires {replumb replumb.core, pprint cljs.pprint, helpers reepl.helpers, parinfer-codemirror.editor parinfer-codemirror.editor, reepl reepl.core, reepl.helpers reepl.helpers, cljs.tools.reader cljs.tools.reader, reepl.core reepl.core, parinfer.codemirror.mode.clojure.clojure-parinfer parinfer.codemirror.mode.clojure.clojure-parinfer, tags cljs.tagged-literals, reagent.core reagent.core, r reagent.core, cljs.js cljs.js, jsc cljs.js, cljs.tools.reader.reader-types cljs.tools.reader.reader-types, replumb.core replumb.core, parinfer parinfer-codemirror.editor, ana cljs.analyzer, docs replumb.doc-maps, devtools devtools.core, cljs.pprint cljs.pprint, cljs.tagged-literals cljs.tagged-literals, ast replumb.ast, replumb.doc-maps replumb.doc-maps, XhrIo goog.net.XhrIo, cljs.analyzer cljs.analyzer, replumb.repl replumb.repl, cljs.repl cljs.repl, replumb.ast replumb.ast, str clojure.string, devtools.core devtools.core, clojure.string clojure.string, repl cljs.repl}, :uses {string-push-back-reader cljs.tools.reader.reader-types}, :defs {print-doc {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 353, :column 7, :end-line 353, :end-column 16, :arglists (quote ([doc]))}, :name reepl.replumb/print-doc, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 16, :method-params ([doc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 353, :end-line 353, :max-fixed-arity 1, :fn-var true, :arglists (quote ([doc]))}, type-name {:name reepl.replumb/type-name, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 346, :column 1, :end-line 346, :end-column 15, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 346, :column 6, :end-line 346, :end-column 15}}, run-repl {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 158, :column 7, :end-line 158, :end-column 15, :arglists (quote ([text cb] [text opts cb])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([text cb] [text opts cb]), :arglists ([text cb] [text opts cb]), :arglists-meta (nil nil)}}, :name reepl.replumb/run-repl, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([text cb] [text opts cb]), :arglists ([text cb] [text opts cb]), :arglists-meta (nil nil)}, :method-params ([text cb] [text opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 3, :fn-var true, :arglists ([text cb] [text opts cb])}, dedup-requires {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 212, :column 7, :end-line 212, :end-column 21, :arglists (quote ([requires])), :doc "Takes a map of {require-name ns-name} and dedups multiple keys that have the\n  same ns-name value."}, :name reepl.replumb/dedup-requires, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 21, :method-params ([requires]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([requires])), :doc "Takes a map of {require-name ns-name} and dedups multiple keys that have the\n  same ns-name value."}, make-last-expr-set-val {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 64, :column 7, :end-line 64, :end-column 29, :arglists (quote ([text js-name]))}, :name reepl.replumb/make-last-expr-set-val, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 29, :method-params ([text js-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text js-name]))}, process-apropos {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 296, :column 7, :end-line 296, :end-column 22, :arglists (quote ([text]))}, :name reepl.replumb/process-apropos, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 22, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 296, :end-line 296, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, find-last-expr-pos {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 49, :column 7, :end-line 49, :end-column 25, :arglists (quote ([text]))}, :name reepl.replumb/find-last-expr-pos, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 25, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, get-from-js-ns {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 196, :column 7, :end-line 196, :end-column 21, :arglists (quote ([ns])), :doc "Use js introspection to get a list of interns in a namespaces\n\n  This is pretty dependent on cljs runtime internals, so it may break in the\n  future (although I think it's fairly unlikely). It takes advantage of the fact\n  that the ns `something.other.thing' is available as an object on\n  `window.something.other.thing', and Object.keys gets all the variables in that\n  namespace."}, :name reepl.replumb/get-from-js-ns, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 21, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns])), :doc "Use js introspection to get a list of interns in a namespaces\n\n  This is pretty dependent on cljs runtime internals, so it may break in the\n  future (although I think it's fairly unlikely). It takes advantage of the fact\n  that the ns `something.other.thing' is available as an object on\n  `window.something.other.thing', and Object.keys gets all the variables in that\n  namespace."}, get-first-form {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 91, :column 7, :end-line 91, :end-column 21, :arglists (quote ([text]))}, :name reepl.replumb/get-first-form, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 21, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, doc-from-sym {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 332, :column 7, :end-line 332, :end-column 19, :arglists (quote ([sym]))}, :name reepl.replumb/doc-from-sym, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 19, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, js-attrs {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 235, :column 7, :end-line 235, :end-column 15, :arglists (quote ([obj]))}, :name reepl.replumb/js-attrs, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 15, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, get-doc {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 314, :column 7, :end-line 314, :end-column 14, :arglists (quote ([m]))}, :name reepl.replumb/get-doc, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, replumb-opts {:name reepl.replumb/replumb-opts, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 39, :column 1, :end-line 39, :end-column 18, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 39, :column 6, :end-line 39, :end-column 18}}, fix-ns-do {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 131, :column 7, :end-line 131, :end-column 16, :arglists (quote ([text]))}, :name reepl.replumb/fix-ns-do, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 16, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, process-doc {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 371, :column 7, :end-line 371, :end-column 18, :arglists (quote ([sym])), :doc "Get the documentation for a symbol. Copied & modified from replumb."}, :name reepl.replumb/process-doc, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 18, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 371, :end-line 371, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym])), :doc "Get the documentation for a symbol. Copied & modified from replumb."}, get-matching-ns-interns {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 222, :column 7, :end-line 222, :end-column 30, :arglists (quote ([[name ns] matches? only-ns]))}, :name reepl.replumb/get-matching-ns-interns, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 30, :method-params ([p__15009 matches? only-ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[name ns] matches? only-ns]))}, get-forms {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 302, :column 7, :end-line 302, :end-column 16, :arglists (quote ([m]))}, :name reepl.replumb/get-forms, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, cljs-completion {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 256, :column 7, :end-line 256, :end-column 22, :arglists (quote ([text])), :doc "Tab completion. Copied w/ extensive modifications from replumb.repl/process-apropos."}, :name reepl.replumb/cljs-completion, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 22, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :doc "Tab completion. Copied w/ extensive modifications from replumb.repl/process-apropos."}, run-repl* {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 150, :column 7, :end-line 150, :end-column 16, :arglists (quote ([text opts cb]))}, :name reepl.replumb/run-repl*, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 16, :method-params ([text opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 3, :fn-var true, :arglists (quote ([text opts cb]))}, jsc-run {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 75, :column 7, :end-line 75, :end-column 14, :arglists (quote ([source cb]))}, :name reepl.replumb/jsc-run, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 14, :method-params ([source cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source cb]))}, compare-ns {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 183, :column 7, :end-line 183, :end-column 17, :arglists (quote ([current ns1 ns2])), :doc "Sorting algo for namespaces\n\n  The current ns comes first, then cljs.core, then anything else\n  alphabetically"}, :name reepl.replumb/compare-ns, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 17, :method-params ([current ns1 ns2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 3, :fn-var true, :arglists (quote ([current ns1 ns2])), :doc "Sorting algo for namespaces\n\n  The current ns comes first, then cljs.core, then anything else\n  alphabetically"}, compare-completion {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 162, :column 7, :end-line 162, :end-column 25, :arglists (quote ([text a b])), :doc "The comparison algo for completions\n\n  1. if one is exactly the text, then it goes first\n  2. if one *starts* with the text, then it goes first\n  3. otherwise leave in current order"}, :name reepl.replumb/compare-completion, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 25, :method-params ([text a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 3, :fn-var true, :arglists (quote ([text a b])), :doc "The comparison algo for completions\n\n  1. if one is exactly the text, then it goes first\n  2. if one *starts* with the text, then it goes first\n  3. otherwise leave in current order"}, run-repl-multi {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 100, :column 7, :end-line 100, :end-column 21, :arglists (quote ([text opts cb]))}, :name reepl.replumb/run-repl-multi, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 21, :method-params ([text opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 3, :fn-var true, :arglists (quote ([text opts cb]))}, run-repl-experimental* {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 124, :column 7, :end-line 124, :end-column 29, :arglists (quote ([text opts cb]))}, :name reepl.replumb/run-repl-experimental*, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 29, :method-params ([text opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 3, :fn-var true, :arglists (quote ([text opts cb]))}, fetch-file! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 25, :column 7, :end-line 25, :end-column 18, :arglists (quote ([file-url src-cb])), :doc "Very simple implementation of XMLHttpRequests that given a file path\n  calls src-cb with the string fetched of nil in case of error.\n  See doc at https://developers.google.com/closure/library/docs/xhrio"}, :name reepl.replumb/fetch-file!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 18, :method-params ([file-url src-cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([file-url src-cb])), :doc "Very simple implementation of XMLHttpRequests that given a file path\n  calls src-cb with the string fetched of nil in case of error.\n  See doc at https://developers.google.com/closure/library/docs/xhrio"}, js-completion {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :line 244, :column 7, :end-line 244, :end-column 20, :arglists (quote ([text]))}, :name reepl.replumb/js-completion, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/replumb.cljs", :end-column 20, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}}, :require-macros {jsc cljs.js, cljs.js cljs.js, pprint cljs.pprint, cljs.pprint cljs.pprint, repl cljs.repl, cljs.repl cljs.repl}, :cljs.analyzer/constants {:seen #{:statement :else :protocol :default :ns :def-emits-var :name :special-form cljs.core :please-see :type stuff :repl-special-function :normal ns :protocol-methods :requires :no-pr-str-on-value :methods :macro :current-ns :warning-as-error :url :context :error quote :arglists :eof :doc :forms :eval}, :order [:warning-as-error :no-pr-str-on-value :eof stuff :eval :ns :context :def-emits-var :statement :current-ns :error ns :else :default cljs.core :requires :forms :arglists :macro :repl-special-function quote :name :type :doc :protocol :special-form :normal :please-see :url :protocol-methods :methods]}, :doc nil}