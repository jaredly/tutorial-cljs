;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name reepl.code-mirror, :imports nil, :requires {pprint cljs.pprint, cljsjs.codemirror.addon.runmode.colorize cljsjs.codemirror.addon.runmode.colorize, reagent.core reagent.core, r reagent.core, cljsjs.codemirror cljsjs.codemirror, cljs.pprint cljs.pprint, cljsjs.codemirror.mode.clojure cljsjs.codemirror.mode.clojure, cljsjs.codemirror.mode.javascript cljsjs.codemirror.mode.javascript, cljsjs.codemirror.addon.hint.show-hint cljsjs.codemirror.addon.hint.show-hint, cljsjs.codemirror.addon.edit.matchbrackets cljsjs.codemirror.addon.edit.matchbrackets, str clojure.string, clojure.string clojure.string, cljsjs.codemirror.addon.edit.closebrackets cljsjs.codemirror.addon.edit.closebrackets, cljsjs.codemirror.addon.runmode.runmode cljsjs.codemirror.addon.runmode.runmode, cljsjs.codemirror.keymap.vim cljsjs.codemirror.keymap.vim}, :uses nil, :defs {cmp-show {:name reepl.code-mirror/cmp-show, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 45, :column 1, :end-line 45, :end-column 14, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 45, :column 6, :end-line 45, :end-column 14}}, code-mirror {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 58, :column 7, :end-line 58, :end-column 18, :arglists (quote ([value-atom {:keys [style on-change on-eval on-up on-down complete-cmd should-go-up should-go-down should-eval js-cm-opts on-cm-init]}])), :doc "Create a code-mirror editor that knows a fair amount about being a good\n  repl. The parameters:\n\n  value-atom (reagent atom)\n    when this changes, the editor will update to reflect it.\n\n  options (TODO finish documenting)\n\n  :style (reagent style map)\n    will be applied to the container element\n\n  :on-change (fn [text] -> nil)\n  :on-eval (fn [text] -> nil)\n  :on-up (fn [] -> nil)\n  :on-down (fn [] -> nil)\n  :should-go-up\n  :should-go-down\n  :should-eval\n\n  :js-cm-opts\n    options passed into the CodeMirror constructor\n\n  :on-cm-init (fn [cm] -> nil)\n    called with the CodeMirror instance, for whatever extra fiddling you want to do."}, :name reepl.code-mirror/code-mirror, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :end-column 18, :method-params ([value-atom p__12538]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value-atom {:keys [style on-change on-eval on-up on-down complete-cmd should-go-up should-go-down should-eval js-cm-opts on-cm-init]}])), :doc "Create a code-mirror editor that knows a fair amount about being a good\n  repl. The parameters:\n\n  value-atom (reagent atom)\n    when this changes, the editor will update to reflect it.\n\n  options (TODO finish documenting)\n\n  :style (reagent style map)\n    will be applied to the container element\n\n  :on-change (fn [text] -> nil)\n  :on-eval (fn [text] -> nil)\n  :on-up (fn [] -> nil)\n  :on-down (fn [] -> nil)\n  :should-go-up\n  :should-go-down\n  :should-eval\n\n  :js-cm-opts\n    options passed into the CodeMirror constructor\n\n  :on-cm-init (fn [cm] -> nil)\n    called with the CodeMirror instance, for whatever extra fiddling you want to do."}, word-in-line {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 22, :column 7, :end-line 22, :end-column 19, :arglists (quote ([line lno cno]))}, :name reepl.code-mirror/word-in-line, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :end-column 19, :method-params ([line lno cno]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([line lno cno]))}, cancel-keys {:name reepl.code-mirror/cancel-keys, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 46, :column 1, :end-line 46, :end-column 17, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 46, :column 6, :end-line 46, :end-column 17}}, get-word-range {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 31, :column 7, :end-line 31, :end-column 21, :arglists (quote ([cm])), :doc "Find the current 'word' according to CodeMirror's `wordChars' list"}, :name reepl.code-mirror/get-word-range, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :end-column 21, :method-params ([cm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cm])), :doc "Find the current 'word' according to CodeMirror's `wordChars' list"}, back-rx {:name reepl.code-mirror/back-rx, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 17, :column 1, :end-line 17, :end-column 13, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 17, :column 6, :end-line 17, :end-column 13}}, cmp-ignore {:name reepl.code-mirror/cmp-ignore, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 47, :column 1, :end-line 47, :end-column 16, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 47, :column 6, :end-line 47, :end-column 16}}, forward-rx {:name reepl.code-mirror/forward-rx, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 19, :column 1, :end-line 19, :end-column 16, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 19, :column 6, :end-line 19, :end-column 16}}, wordChars {:name reepl.code-mirror/wordChars, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 15, :column 1, :end-line 15, :end-column 15, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 15, :column 6, :end-line 15, :end-column 15}}, get-word-and-range {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 40, :column 7, :end-line 40, :end-column 25, :arglists (quote ([cm]))}, :name reepl.code-mirror/get-word-and-range, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :end-column 25, :method-params ([cm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cm]))}, complete-keyup {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 49, :column 7, :end-line 49, :end-column 21, :arglists (quote ([complete-cmd key-code cm]))}, :name reepl.code-mirror/complete-keyup, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :end-column 21, :method-params ([complete-cmd key-code cm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 3, :fn-var true, :arglists (quote ([complete-cmd key-code cm]))}, colored-text {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :line 169, :column 7, :end-line 169, :end-column 19, :arglists (quote ([text style]))}, :name reepl.code-mirror/colored-text, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/reepl/code_mirror.cljs", :end-column 19, :method-params ([text style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text style]))}}, :require-macros {pprint cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:js-cm-opts :stop-show-all :cycle :on-up :pre :should-eval :on-cm-init :matchBrackets :value :component-did-mount :should-go-down :mode :start :should-go-up :on-down :component-did-update :on-eval :extraKeys :style :div :viewportMargin :reagent-render :complete-cmd :autofocus :padding :set :end :on-change :show-all :lineNumbers :none :clear :autoCloseBrackets :text :margin}, :order [:start :end :text :clear :stop-show-all :set :on-change :js-cm-opts :on-up :should-eval :on-cm-init :should-go-down :should-go-up :on-down :on-eval :style :complete-cmd :component-did-mount :component-did-update :reagent-render :lineNumbers :viewportMargin :matchBrackets :autofocus :extraKeys :value :autoCloseBrackets :mode :show-all :cycle :none :div :pre :padding :margin]}, :doc nil}