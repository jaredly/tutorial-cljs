;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name parinfer.indent-mode, :imports nil, :requires {clojure.string clojure.string, parinfer.string parinfer.string, parinfer.reader parinfer.reader}, :uses {whitespace? parinfer.reader, insert-string parinfer.string, join clojure.string, in-code? parinfer.reader, valid-closer? parinfer.reader, in-comment? parinfer.reader, remove-str-range parinfer.string, closing-delim? parinfer.reader, in-str? parinfer.reader, matching-delim parinfer.reader, push-char parinfer.reader, get-lines parinfer.string, escaping? parinfer.reader}, :defs {initial-state {:name parinfer.indent-mode/initial-state, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 19, :column 1, :end-line 19, :end-column 19, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 19, :column 6, :end-line 19, :end-column 19}, :doc "An initial state of our running state."}, process-text-change {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 404, :column 7, :end-line 404, :end-column 26, :arglists (quote ([prev-state change] [prev-state {:keys [line-no new-line], :as change} options])), :doc "Processes the given change for the given state.  Returns new state.\n  See `format-text-change` for usage.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([prev-state change] [prev-state {:keys [line-no new-line], :as change} options]), :arglists ([prev-state change] [prev-state {:keys [line-no new-line], :as change} options]), :arglists-meta (nil nil)}}, :name parinfer.indent-mode/process-text-change, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([prev-state change] [prev-state {:keys [line-no new-line], :as change} options]), :arglists ([prev-state change] [prev-state {:keys [line-no new-line], :as change} options]), :arglists-meta (nil nil)}, :method-params ([prev-state change] [prev-state {:keys [line-no new-line], :as change} options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 3, :fn-var true, :arglists ([prev-state change] [prev-state {:keys [line-no new-line], :as change} options]), :doc "Processes the given change for the given state.  Returns new state.\n  See `format-text-change` for usage."}, block-delim-trail {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 122, :column 7, :end-line 122, :end-column 24, :arglists (quote ([{:keys [delim-trail line-no cursor-line cursor-x cursor-in-comment?], :as state}])), :doc "The presence of the cursor can block the removal of some part of the delim trail."}, :name parinfer.indent-mode/block-delim-trail, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 24, :method-params ([p__13026]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [delim-trail line-no cursor-line cursor-x cursor-in-comment?], :as state}])), :doc "The presence of the cursor can block the removal of some part of the delim trail."}, process-text {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 327, :column 7, :end-line 327, :end-column 19, :arglists (quote ([text] [text options])), :doc "Fully processes the given text.  Returns new state.\n  See `format-text` for usage.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [text options]), :arglists ([text] [text options]), :arglists-meta (nil nil)}}, :name parinfer.indent-mode/process-text, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [text options]), :arglists ([text] [text options]), :arglists-meta (nil nil)}, :method-params ([text] [text options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 327, :end-line 327, :max-fixed-arity 2, :fn-var true, :arglists ([text] [text options]), :doc "Fully processes the given text.  Returns new state.\n  See `format-text` for usage."}, format-text-change {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 451, :column 7, :end-line 451, :end-column 25, :arglists (quote ([text prev-state change] [text prev-state change options])), :doc "Process changed lines in a previously processed text using Indent Mode.\n\n  'text' is the full text (including the change).\n\n  'prev-state' is the state after processing 'text' before the 'change' occurred.\n    - found in the :state key of the result returned by `format-text` or this function.\n\n  'change' is a map:\n\n    KEY        |  DESCRIPTION             |  TYPE\n    -----------+--------------------------+------------------------------------\n    :line-no   |  line range to replace   |  a num or min,max line range\n    :new-line  |  new line(s) to insert   |  a string or seq if multiple lines\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  ", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([text prev-state change] [text prev-state change options]), :arglists ([text prev-state change] [text prev-state change options]), :arglists-meta (nil nil)}}, :name parinfer.indent-mode/format-text-change, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([text prev-state change] [text prev-state change options]), :arglists ([text prev-state change] [text prev-state change options]), :arglists-meta (nil nil)}, :method-params ([text prev-state change] [text prev-state change options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 4, :fn-var true, :arglists ([text prev-state change] [text prev-state change options]), :doc "Process changed lines in a previously processed text using Indent Mode.\n\n  'text' is the full text (including the change).\n\n  'prev-state' is the state after processing 'text' before the 'change' occurred.\n    - found in the :state key of the result returned by `format-text` or this function.\n\n  'change' is a map:\n\n    KEY        |  DESCRIPTION             |  TYPE\n    -----------+--------------------------+------------------------------------\n    :line-no   |  line range to replace   |  a num or min,max line range\n    :new-line  |  new line(s) to insert   |  a string or seq if multiple lines\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  "}, process-indent {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 228, :column 7, :end-line 228, :end-column 21, :arglists (quote ([{:keys [stack track-indent? lines line-no x-pos ch], :as state}])), :doc "Update the state by handling a possible indentation trigger.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then\n                   ;;       we start backtracking to insert closing delimiters on a previous line.\n\n\n  (defn foo [a b]\n     )             ;; <---  If a line starts with a closing delimiter, it is not\n                   ;;       considered an indentation trigger.  In fact, we skip\n                   ;;       the character completely, removing it from the line.\n  "}, :name parinfer.indent-mode/process-indent, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 21, :method-params ([p__13063]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [stack track-indent? lines line-no x-pos ch], :as state}])), :doc "Update the state by handling a possible indentation trigger.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then\n                   ;;       we start backtracking to insert closing delimiters on a previous line.\n\n\n  (defn foo [a b]\n     )             ;; <---  If a line starts with a closing delimiter, it is not\n                   ;;       considered an indentation trigger.  In fact, we skip\n                   ;;       the character completely, removing it from the line.\n  "}, update-line {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 259, :column 7, :end-line 259, :end-column 18, :arglists (quote ([{:keys [ch line-no], :as state}])), :doc "Update the state by adding processed character to the line."}, :name parinfer.indent-mode/update-line, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 18, :method-params ([p__13068]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [ch line-no], :as state}])), :doc "Update the state by adding processed character to the line."}, initial-cached-state {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 392, :column 7, :end-line 392, :end-column 27, :arglists (quote ([{:keys [lines postline-states postindent-states], :as prev-state} options i])), :doc "build an initial state based on our starting line and previous cache."}, :name parinfer.indent-mode/initial-cached-state, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 27, :method-params ([p__13125 options i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [lines postline-states postindent-states], :as prev-state} options i])), :doc "build an initial state based on our starting line and previous cache."}, close-delims {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([state] [state indent-x])), :doc "Update the state by inferring closing delimiters.\n  Do this by using the given indentation level.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then...\n\n  (defn foo [a b]  ;; <---  ... we insert a `]` after `b` since `[` is after `r` on the x-axis.\n     ret           ;; <---  A `)` is inserted after `ret` if no further indented lines found.\n  ", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state indent-x]), :arglists ([state] [state indent-x]), :arglists-meta (nil nil)}}, :name parinfer.indent-mode/close-delims, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([state] [state indent-x]), :arglists ([state] [state indent-x]), :arglists-meta (nil nil)}, :method-params ([state] [state indent-x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists ([state] [state indent-x]), :doc "Update the state by inferring closing delimiters.\n  Do this by using the given indentation level.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then...\n\n  (defn foo [a b]  ;; <---  ... we insert a `]` after `b` since `[` is after `r` on the x-axis.\n     ret           ;; <---  A `)` is inserted after `ret` if no further indented lines found.\n  "}, get-cached-state {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 218, :column 7, :end-line 218, :end-column 23, :arglists (quote ([state]))}, :name parinfer.indent-mode/get-cached-state, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 23, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, update-insertion-pt {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 178, :column 7, :end-line 178, :end-column 26, :arglists (quote ([{:keys [track-indent? cursor-line lines line-no stack x-pos ch], :as state}])), :doc "Update the state's trailing delimiter insertion point as we scan the line.\n\n  Example:\n\n  (defn foo [a b] ret)\n  ^^^^^ ^^^ ^^ ^  ^^^\n                    |\n                    +-- final insertion point candidate\n\n  Special rules allow the user to freely position the trailing\n  delimiters while editing a line.\n\n  "}, :name parinfer.indent-mode/update-insertion-pt, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 26, :method-params ([p__13056]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [track-indent? cursor-line lines line-no stack x-pos ch], :as state}])), :doc "Update the state's trailing delimiter insertion point as we scan the line.\n\n  Example:\n\n  (defn foo [a b] ret)\n  ^^^^^ ^^^ ^^ ^  ^^^\n                    |\n                    +-- final insertion point candidate\n\n  Special rules allow the user to freely position the trailing\n  delimiters while editing a line.\n\n  "}, remove-delim-trail {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 136, :column 7, :end-line 136, :end-column 25, :arglists (quote ([{:keys [delim-trail insert line-no lines backup stack], :as state}])), :doc "Update the state by removing our marked delim trail.\n  We remove the delims from the appropriate line of text,\n  while also restoring their matching delims onto the stack.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n  ^            ^^   ^^^^\n  |            |     |\n  |____________|     +-- Remove these from the text.\n         |\n         +-- Restore these onto the delim stack.\n             (fyi, we originally popped them off to validate\n              the closing delims. now we need them back to\n              infer closing delims for indented lines.)\n  "}, :name parinfer.indent-mode/remove-delim-trail, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 25, :method-params ([p__13041]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [delim-trail insert line-no lines backup stack], :as state}])), :doc "Update the state by removing our marked delim trail.\n  We remove the delims from the appropriate line of text,\n  while also restoring their matching delims onto the stack.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n  ^            ^^   ^^^^\n  |            |     |\n  |____________|     +-- Remove these from the text.\n         |\n         +-- Restore these onto the delim stack.\n             (fyi, we originally popped them off to validate\n              the closing delims. now we need them back to\n              infer closing delims for indented lines.)\n  "}, fill-rest-with-cache {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 357, :column 7, :end-line 357, :end-column 27, :arglists (quote ([prev-state state last-i])), :doc "fill the rest of the lines with info from cache."}, :name parinfer.indent-mode/fill-rest-with-cache, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 27, :method-params ([prev-state state last-i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 357, :end-line 357, :max-fixed-arity 3, :fn-var true, :arglists (quote ([prev-state state last-i])), :doc "fill the rest of the lines with info from cache."}, process-char* {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 273, :column 7, :end-line 273, :end-column 20, :arglists (quote ([state]))}, :name parinfer.indent-mode/process-char*, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, update-delim-trail {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 66, :column 7, :end-line 66, :end-column 25, :arglists (quote ([{:keys [stack delim-trail backup x-pos ch cursor-line line-no cursor-x cursor-in-comment?], :as state}])), :doc "Update the state's delim trail as we scan across a line.\n  We eventually remove the delim trail since the indented\n  content below can cause the delims to move.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n                    ^^^^\n                     |\n                     +-- trailing delims that we will remove\n                          (notice whitespace will also be removed)\n  "}, :name parinfer.indent-mode/update-delim-trail, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 25, :method-params ([p__13019]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [stack delim-trail backup x-pos ch cursor-line line-no cursor-x cursor-in-comment?], :as state}])), :doc "Update the state's delim trail as we scan across a line.\n  We eventually remove the delim trail since the indented\n  content below can cause the delims to move.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n                    ^^^^\n                     |\n                     +-- trailing delims that we will remove\n                          (notice whitespace will also be removed)\n  "}, process-unchanged-lines {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 383, :column 7, :end-line 383, :end-column 30, :arglists (quote ([prev-state state start-i])), :doc "process the lines after those that have changed."}, :name parinfer.indent-mode/process-unchanged-lines, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 30, :method-params ([prev-state state start-i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 383, :end-line 383, :max-fixed-arity 3, :fn-var true, :arglists (quote ([prev-state state start-i])), :doc "process the lines after those that have changed."}, commit-cached-state {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 222, :column 7, :end-line 222, :end-column 26, :arglists (quote ([state key-])), :doc "Cache a subset of the state after some event.\n  This is used by process-text-change."}, :name parinfer.indent-mode/commit-cached-state, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 26, :method-params ([state key-]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state key-])), :doc "Cache a subset of the state after some event.\n  This is used by process-text-change."}, save-preinsert-line {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 264, :column 7, :end-line 264, :end-column 26, :arglists (quote ([{:keys [line-no insert lines], :as state}])), :doc "Save the text of a line before trailing delims were inserted.\n  This allows to restore them when skipping to changed lines in\n  process-text-change."}, :name parinfer.indent-mode/save-preinsert-line, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 26, :method-params ([p__13073]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [line-no insert lines], :as state}])), :doc "Save the text of a line before trailing delims were inserted.\n  This allows to restore them when skipping to changed lines in\n  process-text-change."}, process-line {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 291, :column 7, :end-line 291, :end-column 19, :arglists (quote ([line] [{:keys [stack lines line-no cursor-line], :as state} line])), :doc "Update the state by processing the given line of text.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists-meta (nil nil)}}, :name parinfer.indent-mode/process-line, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists-meta (nil nil)}, :method-params ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 2, :fn-var true, :arglists ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :doc "Update the state by processing the given line of text."}, finalize-state {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 320, :column 7, :end-line 320, :end-column 21, :arglists (quote ([{:keys [stack], :as state}]))}, :name parinfer.indent-mode/finalize-state, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 21, :method-params ([p__13099]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 320, :end-line 320, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [stack], :as state}]))}, restore-insert-line {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 348, :column 7, :end-line 348, :end-column 26, :arglists (quote ([{:keys [insert line-no], :as state}])), :doc "restore the text of a line before trailing delimiters were inserted"}, :name parinfer.indent-mode/restore-insert-line, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 26, :method-params ([p__13113]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [insert line-no], :as state}])), :doc "restore the text of a line before trailing delimiters were inserted"}, process-char {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 282, :column 7, :end-line 282, :end-column 19, :arglists (quote ([{:keys [lines line-no], :as state} ch])), :doc "Update the state by processing the given character and its position."}, :name parinfer.indent-mode/process-char, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 19, :method-params ([p__13080 ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [lines line-no], :as state} ch])), :doc "Update the state by processing the given character and its position."}, safe-subvec {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 342, :column 7, :end-line 342, :end-column 18, :arglists (quote ([v i]))}, :name parinfer.indent-mode/safe-subvec, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 18, :method-params ([v i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 342, :end-line 342, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v i]))}, process-unchanged-line* {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 371, :column 7, :end-line 371, :end-column 30, :arglists (quote ([prev-state state [old-i line cache]])), :doc "process a line that comes after those that have changed.\n  'reduced' will halt further processing."}, :name parinfer.indent-mode/process-unchanged-line*, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 30, :method-params ([prev-state state p__13122]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 371, :end-line 371, :max-fixed-arity 3, :fn-var true, :arglists (quote ([prev-state state [old-i line cache]])), :doc "process a line that comes after those that have changed.\n  'reduced' will halt further processing."}, format-text {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :line 427, :column 7, :end-line 427, :end-column 18, :arglists (quote ([text] [text options])), :doc "Fully process the given text using Indent Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  ", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [text options]), :arglists ([text] [text options]), :arglists-meta (nil nil)}}, :name parinfer.indent-mode/format-text, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/indent_mode.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [text options]), :arglists ([text] [text options]), :arglists-meta (nil nil)}, :method-params ([text] [text options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 427, :end-line 427, :max-fixed-arity 2, :fn-var true, :arglists ([text] [text options]), :doc "Fully process the given text using Indent Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  "}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:postindent-states :cursor-line :backup :insert :valid? :else :process? :x-pos :cursor-x :start :lines :state :postline-states :ch :track-indent? :line :line-no :stack :delim-trail :new-line :removed-delims :end :processed-indent? :line-dy :text :cursor-in-comment?}, :order [:postindent-states :backup :insert :lines :postline-states :track-indent? :line-no :stack :delim-trail :line-dy :x-pos :start :end :ch :cursor-line :cursor-x :cursor-in-comment? :else :removed-delims :process? :processed-indent? :line :valid? :new-line :text :state]}, :doc "Corrects parens based on indentation.\n  See http://shaunlebron.github.io/parinfer/#indent-mode"}