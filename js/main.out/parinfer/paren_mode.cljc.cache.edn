;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name parinfer.paren-mode, :imports nil, :requires {parinfer.reader parinfer.reader, parinfer.indent-mode parinfer.indent-mode, parinfer.string parinfer.string, clojure.string clojure.string}, :uses {whitespace? parinfer.reader, insert-string parinfer.string, join clojure.string, in-code? parinfer.reader, update-line parinfer.indent-mode, valid-closer? parinfer.reader, update-insertion-pt parinfer.indent-mode, remove-delim-trail parinfer.indent-mode, process-char* parinfer.indent-mode, update-delim-trail parinfer.indent-mode, closing-delim? parinfer.reader, in-str? parinfer.reader, matching-delim parinfer.reader, get-lines parinfer.string}, :defs {initial-state {:name parinfer.paren-mode/initial-state, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 20, :column 1, :end-line 20, :end-column 19, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 20, :column 6, :end-line 20, :end-column 19}, :doc "An initial state of our running state."}, process-text {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 154, :column 7, :end-line 154, :end-column 19, :arglists (quote ([text] [text options])), :doc "Update the state by processing the given text.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [text options]), :arglists ([text] [text options]), :arglists-meta (nil nil)}}, :name parinfer.paren-mode/process-text, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [text options]), :arglists ([text] [text options]), :arglists-meta (nil nil)}, :method-params ([text] [text options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists ([text] [text options]), :doc "Update the state by processing the given text."}, process-indent {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 81, :column 7, :end-line 81, :end-column 21, :arglists (quote ([{:keys [stack track-indent? lines line-no ch x-pos cursor-line cursor-x cursor-dx], :as state}])), :doc "Update the state by handling a possible indentation trigger."}, :name parinfer.paren-mode/process-indent, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 21, :method-params ([p__13184]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [stack track-indent? lines line-no ch x-pos cursor-line cursor-x cursor-dx], :as state}])), :doc "Update the state by handling a possible indentation trigger."}, append-delim-trail {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 33, :column 7, :end-line 33, :end-column 25, :arglists (quote ([{:keys [stack line-no insert], :as state}]))}, :name parinfer.paren-mode/append-delim-trail, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 25, :method-params ([p__13157]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [stack line-no insert], :as state}]))}, handle-cursor-delta {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 73, :column 7, :end-line 73, :end-column 26, :arglists (quote ([{:keys [indent-delta line-no x-pos cursor-line cursor-x cursor-dx], :as state}]))}, :name parinfer.paren-mode/handle-cursor-delta, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 26, :method-params ([p__13177]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [indent-delta line-no x-pos cursor-line cursor-x cursor-dx], :as state}]))}, min-dedent {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 51, :column 7, :end-line 51, :end-column 17, :arglists (quote ([x {:keys [dedent-x]}]))}, :name parinfer.paren-mode/min-dedent, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 17, :method-params ([x p__13167]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x {:keys [dedent-x]}]))}, correct-indent {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 57, :column 7, :end-line 57, :end-column 21, :arglists (quote ([{:keys [indent-delta x-pos stack dedent-x line-no], :as state}]))}, :name parinfer.paren-mode/correct-indent, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 21, :method-params ([p__13172]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [indent-delta x-pos stack dedent-x line-no], :as state}]))}, reinsert-delims {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 115, :column 7, :end-line 115, :end-column 22, :arglists (quote ([{:keys [removed-delims], :as state}]))}, :name parinfer.paren-mode/reinsert-delims, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 22, :method-params ([p__13198]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [removed-delims], :as state}]))}, min-indent {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 44, :column 7, :end-line 44, :end-column 17, :arglists (quote ([x {:keys [stack]}]))}, :name parinfer.paren-mode/min-indent, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 17, :method-params ([x p__13162]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x {:keys [stack]}]))}, process-line {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 123, :column 7, :end-line 123, :end-column 19, :arglists (quote ([line] [{:keys [stack lines line-no cursor-line], :as state} line])), :doc "Update the state by processing the given line of text.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists-meta (nil nil)}}, :name parinfer.paren-mode/process-line, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :arglists-meta (nil nil)}, :method-params ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists ([line] [{:keys [stack lines line-no cursor-line], :as state} line]), :doc "Update the state by processing the given line of text."}, finalize-state {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 149, :column 7, :end-line 149, :end-column 21, :arglists (quote ([{:keys [stack], :as state}]))}, :name parinfer.paren-mode/finalize-state, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 21, :method-params ([p__13214]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [stack], :as state}]))}, process-char {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 106, :column 7, :end-line 106, :end-column 19, :arglists (quote ([{:keys [lines line-no], :as state} ch])), :doc "Update the state by processing the given character and its position."}, :name parinfer.paren-mode/process-char, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 19, :method-params ([p__13191 ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [lines line-no], :as state} ch])), :doc "Update the state by processing the given character and its position."}, format-text {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :line 164, :column 7, :end-line 164, :end-column 18, :arglists (quote ([text] [text options])), :doc "Fully process the given text using Paren Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change` (once it is implemented)\n  ", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [text options]), :arglists ([text] [text options]), :arglists-meta (nil nil)}}, :name parinfer.paren-mode/format-text, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer/paren_mode.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([text] [text options]), :arglists ([text] [text options]), :arglists-meta (nil nil)}, :method-params ([text] [text options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists ([text] [text options]), :doc "Fully process the given text using Paren Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change` (once it is implemented)\n  "}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:cursor-line :backup :insert :valid? :process? :x-pos :cursor-x :dedent-x :start :lines :state :ch :cursor-dx :track-indent? :line-no :stack :delim-trail :indent-delta :removed-delims :end :line-dy :text :cursor-in-comment?}, :order [:backup :insert :dedent-x :lines :track-indent? :line-no :stack :delim-trail :indent-delta :line-dy :x-pos :start :end :ch :cursor-line :cursor-x :cursor-dx :process? :removed-delims :cursor-in-comment? :valid? :text :state]}, :doc "Corrects indentation based on parens.\n  See http://shaunlebron.github.io/parinfer/#paren-mode"}