;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name replumb.common, :imports nil, :requires {string clojure.string, clojure.string clojure.string}, :uses nil, :defs {error-branch? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 5, :column 7, :end-line 5, :end-column 20, :arglists (quote ([error]))}, :name replumb.common/error-branch?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 20, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error]))}, error-seq {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 13, :column 7, :end-line 13, :end-column 16, :arglists (quote ([error]))}, :name replumb.common/error-seq, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 16, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error]))}, echo-callback {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 40, :column 7, :end-line 40, :end-column 20, :arglists (quote ([result-map])), :doc "Callback that just echoes the result map. It also asserts the correct\n  result format in its post condition. Useful for debugging and\n  testing.", :post [(map? %) (find % :success?) (or (find % :error) (find % :value))]}, :name replumb.common/echo-callback, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 20, :method-params ([result-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :post [(map? %) (find % :success?) (or (find % :error) (find % :value))], :max-fixed-arity 1, :fn-var true, :arglists (quote ([result-map])), :doc "Callback that just echoes the result map. It also asserts the correct\n  result format in its post condition. Useful for debugging and\n  testing."}, filter-fn-keys {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 99, :column 7, :end-line 99, :end-column 21, :arglists (quote ([opts])), :doc "Filter out the option map keys that have -fn in it."}, :name replumb.common/filter-fn-keys, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 21, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :doc "Filter out the option map keys that have -fn in it."}, has-valid-warning? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 82, :column 7, :end-line 82, :end-column 25, :arglists (quote ([result]))}, :name replumb.common/has-valid-warning?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 25, :method-params ([result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([result]))}, normalize-path {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 111, :column 7, :end-line 111, :end-column 21, :arglists (quote ([path])), :doc "Adds a / if missing at the end of the path."}, :name replumb.common/normalize-path, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 21, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Adds a / if missing at the end of the path."}, error-keyword-not-supported {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 86, :column 7, :end-line 86, :end-column 34, :arglists (quote ([keyword ex-info-data])), :doc "Yields a \"keyword not supported\" error map. Receives the\n  symbol/keyword printed in the message and ex-info data."}, :name replumb.common/error-keyword-not-supported, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 34, :method-params ([keyword ex-info-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([keyword ex-info-data])), :doc "Yields a \"keyword not supported\" error map. Receives the\n  symbol/keyword printed in the message and ex-info data."}, wrap-error {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 53, :column 7, :end-line 53, :end-column 17, :arglists (quote ([message])), :doc "Wraps the message in a error map."}, :name replumb.common/wrap-error, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 17, :method-params ([message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([message])), :doc "Wraps the message in a error map."}, extract-message {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 17, :column 7, :end-line 17, :end-column 22, :arglists (quote ([err] [err exclude-error-msg?] [err exclude-error-msg? print-stack?])), :doc "Iteratively extracts messages inside (nested #error objects), returns\n  a string. If the boolean `exclude-error-msg?` is true, only the\n  message marked with \"ERROR\" will be included in the final string. If\n  the boolean `print-stack?` is true, the stack will be added to the\n  final string. They both default to false.\n\n  ** Be sure to pass a js/Error object here **", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([err] [err exclude-error-msg?] [err exclude-error-msg? print-stack?]), :arglists ([err] [err exclude-error-msg?] [err exclude-error-msg? print-stack?]), :arglists-meta (nil nil nil)}}, :name replumb.common/extract-message, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([err] [err exclude-error-msg?] [err exclude-error-msg? print-stack?]), :arglists ([err] [err exclude-error-msg?] [err exclude-error-msg? print-stack?]), :arglists-meta (nil nil nil)}, :method-params ([err] [err exclude-error-msg?] [err exclude-error-msg? print-stack?]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 3, :fn-var true, :arglists ([err] [err exclude-error-msg?] [err exclude-error-msg? print-stack?]), :doc "Iteratively extracts messages inside (nested #error objects), returns\n  a string. If the boolean `exclude-error-msg?` is true, only the\n  message marked with \"ERROR\" will be included in the final string. If\n  the boolean `print-stack?` is true, the stack will be added to the\n  final string. They both default to false.\n\n  ** Be sure to pass a js/Error object here **"}, wrap-success {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 48, :column 7, :end-line 48, :end-column 19, :arglists (quote ([message])), :doc "Wraps the message in a success map."}, :name replumb.common/wrap-success, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 19, :method-params ([message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([message])), :doc "Wraps the message in a success map."}, valid-eval-warning? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 77, :column 7, :end-line 77, :end-column 26, :arglists (quote ([warning])), :doc "Is the string returned from an evaluation valid?"}, :name replumb.common/valid-eval-warning?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 26, :method-params ([warning]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([warning])), :doc "Is the string returned from an evaluation valid?"}, error-children {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 9, :column 7, :end-line 9, :end-column 21, :arglists (quote ([error]))}, :name replumb.common/error-children, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 21, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error]))}, valid-eval-result? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 64, :column 7, :end-line 64, :end-column 25, :arglists (quote ([result] [opts result])), :doc "Is the string returned from an evaluation valid?", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([result] [opts result]), :arglists ([result] [opts result]), :arglists-meta (nil nil)}}, :name replumb.common/valid-eval-result?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([result] [opts result]), :arglists ([result] [opts result]), :arglists-meta (nil nil)}, :method-params ([result] [opts result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists ([result] [opts result]), :doc "Is the string returned from an evaluation valid?"}, inline-newline? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 58, :column 7, :end-line 58, :end-column 22, :arglists (quote ([s])), :doc "Returns true if the string contains the newline \\\\n or \\\\r as\n  characters."}, :name replumb.common/inline-newline?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true if the string contains the newline \\\\n or \\\\r as\n  characters."}, debug-prn {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 106, :column 7, :end-line 106, :end-column 16, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name replumb.common/debug-prn, :variadic true, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, valid-eval-error? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 72, :column 7, :end-line 72, :end-column 24, :arglists (quote ([error])), :doc "Is the string returned from an evaluation valid?"}, :name replumb.common/valid-eval-error?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 24, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error])), :doc "Is the string returned from an evaluation valid?"}, error-argument-must-be-symbol {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :line 93, :column 7, :end-line 93, :end-column 36, :arglists (quote ([symbol ex-info-data])), :doc "Yields a \"Argument must a be a symbol\" error map. Receives the\n  symbol/fn name printed in the message and ex-info data."}, :name replumb.common/error-argument-must-be-symbol, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/common.cljs", :end-column 36, :method-params ([symbol ex-info-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([symbol ex-info-data])), :doc "Yields a \"Argument must a be a symbol\" error map. Receives the\n  symbol/fn name printed in the message and ex-info data."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:value map? :warning :no-pr-str-on-value :error opts}, :order [:value :error :no-pr-str-on-value :warning map? opts]}, :doc nil}