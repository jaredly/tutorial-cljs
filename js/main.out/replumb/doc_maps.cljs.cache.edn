;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name replumb.doc-maps, :imports nil, :requires nil, :uses nil, :defs {special-doc-map {:name replumb.doc-maps/special-doc-map, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/doc_maps.cljs", :line 4, :column 1, :end-line 4, :end-column 21, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/doc_maps.cljs", :line 4, :column 6, :end-line 4, :end-column 21}}, repl-special-doc-map {:name replumb.doc-maps/repl-special-doc-map, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/doc_maps.cljs", :line 91, :column 1, :end-line 91, :end-column 26, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/doc_maps.cljs", :line 91, :column 6, :end-line 91, :end-column 26}}, special-doc {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/doc_maps.cljs", :line 179, :column 7, :end-line 179, :end-column 18, :arglists (quote ([name-symbol]))}, :name replumb.doc-maps/special-doc, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/doc_maps.cljs", :end-column 18, :method-params ([name-symbol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name-symbol]))}, repl-special-doc {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/doc_maps.cljs", :line 185, :column 7, :end-line 185, :end-column 23, :arglists (quote ([name-symbol]))}, :name replumb.doc-maps/repl-special-doc, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/doc_maps.cljs", :end-column 23, :method-params ([name-symbol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name-symbol]))}, repl-special? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/doc_maps.cljs", :line 191, :column 7, :end-line 191, :end-column 20, :arglists (quote ([form]))}, :name replumb.doc-maps/repl-special?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/doc_maps.cljs", :end-column 20, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{form finally-clause? & else? .- try init? doc import Constructor. references* .instanceMethod str-or-pattern test re-string-or-pattern docstring? instance-expr doc-string? args :name :special-form find-doc do Constructor dir :repl-special-function pst instance in-ns if new ns symbol name catch-clause* require instanceFieldName-symbol attr-map? recur source e :url import-symbols-or-lists expr* var-symbol load-file set! . args* var quote exprs* :arglists expr :doc .-instanceField then throw :forms def require-macros apropos}, :order [try do if new ns recur set! . var quote throw def :forms :doc expr* catch-clause* finally-clause? exprs* test then else? :url Constructor. args* Constructor name docstring? attr-map? references* var-symbol expr .- instance-expr instanceFieldName-symbol .instanceMethod instance .-instanceField symbol form doc-string? init? doc import find-doc dir pst in-ns require source load-file require-macros apropos :arglists & import-symbols-or-lists re-string-or-pattern e args str-or-pattern :name :special-form :repl-special-function]}, :doc "Namespace containing special and repl-special doc maps and utils"}