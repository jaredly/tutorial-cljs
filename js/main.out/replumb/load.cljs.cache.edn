;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name replumb.load, :imports nil, :requires {cljs cljs.js, cljs.js cljs.js, replumb.cache replumb.cache, string clojure.string, common replumb.common, cache replumb.cache, clojure.string clojure.string, cljs.reader cljs.reader, edn cljs.reader, replumb.common replumb.common}, :uses nil, :defs {skip-load? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 140, :column 7, :end-line 140, :end-column 17, :arglists (quote ([{:keys [name macros]}]))}, :name replumb.load/skip-load?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 17, :method-params ([p__13731]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [name macros]}]))}, fake-load-fn! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 8, :column 7, :end-line 8, :end-column 20, :arglists (quote ([_ cb])), :doc "This load function just calls:\n  (cb {:lang   :js\n       :source \"\"})"}, :name replumb.load/fake-load-fn!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 20, :method-params ([_ cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ cb])), :doc "This load function just calls:\n  (cb {:lang   :js\n       :source \"\"})"}, filename->lang {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 21, :column 7, :end-line 21, :end-column 21, :arglists (quote ([file-name])), :doc "Converts a filename to a lang keyword by inspecting the file\n  extension."}, :name replumb.load/filename->lang, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 21, :method-params ([file-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([file-name])), :doc "Converts a filename to a lang keyword by inspecting the file\n  extension."}, file-paths-for-closure {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 133, :column 7, :end-line 133, :end-column 29, :arglists (quote ([src-paths goog-path])), :doc "Produces a sequence of filenames to try reading crafted for goog\n  libraries, in the order they should be tried."}, :name replumb.load/file-paths-for-closure, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 29, :method-params ([src-paths goog-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([src-paths goog-path])), :doc "Produces a sequence of filenames to try reading crafted for goog\n  libraries, in the order they should be tried."}, read-files-from-cache-and-callback! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 63, :column 7, :end-line 63, :end-column 42, :arglists (quote ([verbose? file-names read-file-fn! load-fn-cb cached-file-names])), :doc "Loops over cached-file-names in order to retrieve them. It needs to find\n  both the related .js file and .cache.json file, otherwise keeps looping.\n  If it does not find the cached files calls read-files-and-callback! and\n  tries to load the unevaluated ones.\n  This function does not check whether parameters are nil, please do it in\n  the caller."}, :name replumb.load/read-files-from-cache-and-callback!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 42, :method-params ([verbose? file-names read-file-fn! load-fn-cb cached-file-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 5, :fn-var true, :arglists (quote ([verbose? file-names read-file-fn! load-fn-cb cached-file-names])), :doc "Loops over cached-file-names in order to retrieve them. It needs to find\n  both the related .js file and .cache.json file, otherwise keeps looping.\n  If it does not find the cached files calls read-files-and-callback! and\n  tries to load the unevaluated ones.\n  This function does not check whether parameters are nil, please do it in\n  the caller."}, file-paths-for-load-fn {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 108, :column 7, :end-line 108, :end-column 29, :arglists (quote ([src-paths macros file-path-without-ext])), :doc "Produces a sequence of file names to try reading from src-paths and\n  file-path-without-ext (it should already include one or more\n  \"/\"). The right order and extension is taken from cljs.js/*load-fn*\n  docstring and takes into consideration the macros parameter."}, :name replumb.load/file-paths-for-load-fn, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 29, :method-params ([src-paths macros file-path-without-ext]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 3, :fn-var true, :arglists (quote ([src-paths macros file-path-without-ext])), :doc "Produces a sequence of file names to try reading from src-paths and\n  file-path-without-ext (it should already include one or more\n  \"/\"). The right order and extension is taken from cljs.js/*load-fn*\n  docstring and takes into consideration the macros parameter."}, cache-file-paths-for-load-fn {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 118, :column 7, :end-line 118, :end-column 35, :arglists (quote ([cache-paths macros file-path-without-ext])), :doc "Produces a sequence of pairs containing the file paths to try reading for\n  evaluation caching.\n  The first file is always a \".js\" file while the second is the cache file\n  and can be a \".json\" or \".edn\" file."}, :name replumb.load/cache-file-paths-for-load-fn, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 35, :method-params ([cache-paths macros file-path-without-ext]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 3, :fn-var true, :arglists (quote ([cache-paths macros file-path-without-ext])), :doc "Produces a sequence of pairs containing the file paths to try reading for\n  evaluation caching.\n  The first file is always a \".js\" file while the second is the cache file\n  and can be a \".json\" or \".edn\" file."}, file-paths {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 101, :column 7, :end-line 101, :end-column 17, :arglists (quote ([src-paths file-path])), :doc "Produces a sequence of file paths based on src-paths and file-path (a\n  path already including one or more \"/\" and an extension)."}, :name replumb.load/file-paths, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 17, :method-params ([src-paths file-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([src-paths file-path])), :doc "Produces a sequence of file paths based on src-paths and file-path (a\n  path already including one or more \"/\" and an extension)."}, no-resource-load-fn! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 16, :column 7, :end-line 16, :end-column 27, :arglists (quote ([_ cb])), :doc "Mimics \"Resource not found\" as it just calls: (cb nil)"}, :name replumb.load/no-resource-load-fn!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 27, :method-params ([_ cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ cb])), :doc "Mimics \"Resource not found\" as it just calls: (cb nil)"}, extensions {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 34, :column 7, :end-line 34, :end-column 17, :arglists (quote ([] [macros])), :doc "Returns the correct file extensions to try (no dot prefix), following\n  the cljs.js/*load-fn* docstring.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [macros]), :arglists ([] [macros]), :arglists-meta (nil nil)}}, :name replumb.load/extensions, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [macros]), :arglists ([] [macros]), :arglists-meta (nil nil)}, :method-params ([] [macros]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists ([] [macros]), :doc "Returns the correct file extensions to try (no dot prefix), following\n  the cljs.js/*load-fn* docstring."}, read-cache-source {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 27, :column 7, :end-line 27, :end-column 24, :arglists (quote ([cache-path cache-source])), :doc "Read the cache source depending on whether is a edn or json file"}, :name replumb.load/read-cache-source, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 24, :method-params ([cache-path cache-source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cache-path cache-source])), :doc "Read the cache source depending on whether is a edn or json file"}, read-files-and-callback! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :line 42, :column 7, :end-line 42, :end-column 31, :arglists (quote ([verbose? file-names read-file-fn! load-fn-cb])), :doc "Loop on the file-names using a supplied read-file-fn (fn [file-name\n  src-cb] ...), calling back cb upon first successful read, otherwise\n  calling back with nil.\n  This function does not check whether parameters are nil, please do it\n  in the caller."}, :name replumb.load/read-files-and-callback!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/load.cljs", :end-column 31, :method-params ([verbose? file-names read-file-fn! load-fn-cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 4, :fn-var true, :arglists (quote ([verbose? file-names read-file-fn! load-fn-cb])), :doc "Loop on the file-names using a supplied read-file-fn (fn [file-name\n  src-cb] ...), calling back cb upon first successful read, otherwise\n  calling back with nil.\n  This function does not check whether parameters are nil, please do it\n  in the caller."}}, :require-macros {cljs cljs.js, cljs.js cljs.js}, :cljs.analyzer/constants {:seen #{:js :macros :name cljs.core cljs.test :source :lang cljs.pprint :cache cljs.analyzer :clj clojure.template}, :order [:lang :source :js :clj :cache :name :macros cljs.core cljs.analyzer cljs.pprint cljs.test clojure.template]}, :doc nil}