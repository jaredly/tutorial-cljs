;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{namespace ns-publics ns-interns}, :name replumb.ast, :imports nil, :requires nil, :uses nil, :defs {known-namespaces {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :line 4, :column 7, :end-line 4, :end-column 23, :arglists (quote ([state])), :doc "Given a compiler state, return the seq of namespace symbols currently\n  present in the AST."}, :name replumb.ast/known-namespaces, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :end-column 23, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Given a compiler state, return the seq of namespace symbols currently\n  present in the AST."}, ns-publics {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :line 10, :column 7, :end-line 10, :end-column 17, :arglists (quote ([state ns])), :doc "Given compiler state and namespace symbol return all the public vars\n  in the AST. Analagous to clojure.core/ns-publics but returns var\n  analysis maps not vars (beware, it can be a lot of data)."}, :name replumb.ast/ns-publics, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :end-column 17, :method-params ([state ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state ns])), :doc "Given compiler state and namespace symbol return all the public vars\n  in the AST. Analagous to clojure.core/ns-publics but returns var\n  analysis maps not vars (beware, it can be a lot of data)."}, ns-interns {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :line 22, :column 7, :end-line 22, :end-column 17, :arglists (quote ([state ns])), :doc "Given compiler state and namespace symbol return all the vars in the\n  AST. Analagous to clojure.core/ns-interns but returns var analysis\n  maps not vars (beware, it can be a lot of data)."}, :name replumb.ast/ns-interns, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :end-column 17, :method-params ([state ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state ns])), :doc "Given compiler state and namespace symbol return all the vars in the\n  AST. Analagous to clojure.core/ns-interns but returns var analysis\n  maps not vars (beware, it can be a lot of data)."}, ns-defs {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :line 32, :column 7, :end-line 32, :end-column 14, :arglists (quote ([state ns])), :doc "Given compiler state and namespace symbol, returns its AST :defs\n  content (beware, it can be a lot of data)"}, :name replumb.ast/ns-defs, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :end-column 14, :method-params ([state ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state ns])), :doc "Given compiler state and namespace symbol, returns its AST :defs\n  content (beware, it can be a lot of data)"}, namespace {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :line 39, :column 7, :end-line 39, :end-column 16, :arglists (quote ([state ns])), :doc "Given compiler state and namespace symbol, returns its whole AST\n  content (beware, it can be a lot of data)."}, :name replumb.ast/namespace, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :end-column 16, :method-params ([state ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state ns])), :doc "Given compiler state and namespace symbol, returns its whole AST\n  content (beware, it can be a lot of data)."}, dissoc-ns {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :line 47, :column 7, :end-line 47, :end-column 16, :arglists (quote ([state ns])), :doc "Given compiler state and namespace symbol, dissoc the ns from the\n  AST.\n  This is commonly passed to swap! (e.g.: (swap! st dissoc-ns))."}, :name replumb.ast/dissoc-ns, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/ast.cljs", :end-column 16, :method-params ([state ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state ns])), :doc "Given compiler state and namespace symbol, dissoc the ns from the\n  AST.\n  This is commonly passed to swap! (e.g.: (swap! st dissoc-ns))."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:cljs.analyzer/namespaces :private :macros ns :defs symbol?}, :order [:cljs.analyzer/namespaces symbol? ns :private :macros :defs]}, :doc nil}