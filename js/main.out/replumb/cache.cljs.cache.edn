;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name replumb.cache, :imports nil, :requires {transit cognitect.transit, cognitect.transit cognitect.transit, s clojure.string, clojure.string clojure.string}, :uses nil, :defs {transit-json->cljs {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :line 5, :column 7, :end-line 5, :end-column 25, :arglists (quote ([json]))}, :name replumb.cache/transit-json->cljs, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :end-column 25, :method-params ([json]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([json]))}, cljs->transit-json {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :line 9, :column 7, :end-line 9, :end-column 25, :arglists (quote ([source]))}, :name replumb.cache/cljs->transit-json, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :end-column 25, :method-params ([source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source]))}, compiled-by-string {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :line 13, :column 7, :end-line 13, :end-column 25, :arglists (quote ([] [eval-opts])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [eval-opts]), :arglists ([] [eval-opts]), :arglists-meta (nil nil)}}, :name replumb.cache/compiled-by-string, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [eval-opts]), :arglists ([] [eval-opts]), :arglists-meta (nil nil)}, :method-params ([] [eval-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists ([] [eval-opts])}, cache-prefix-for-path {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :line 21, :column 7, :end-line 21, :end-column 28, :arglists (quote ([path macros] [cache-path path macros])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([path macros] [cache-path path macros]), :arglists ([path macros] [cache-path path macros]), :arglists-meta (nil nil)}}, :name replumb.cache/cache-prefix-for-path, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([path macros] [cache-path path macros]), :arglists ([path macros] [cache-path path macros]), :arglists-meta (nil nil)}, :method-params ([path macros] [cache-path path macros]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 3, :fn-var true, :arglists ([path macros] [cache-path path macros])}, is-macros? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :line 27, :column 7, :end-line 27, :end-column 17, :arglists (quote ([cache]))}, :name replumb.cache/is-macros?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :end-column 17, :method-params ([cache]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cache]))}, clojurescript-compiler-version {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :line 31, :column 7, :end-line 31, :end-column 37, :arglists (quote ([js-source]))}, :name replumb.cache/clojurescript-compiler-version, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :end-column 37, :method-params ([js-source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([js-source]))}, cached-js-valid? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :line 35, :column 7, :end-line 35, :end-column 23, :arglists (quote ([js-source]))}, :name replumb.cache/cached-js-valid?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/replumb/cache.cljs", :end-column 23, :method-params ([js-source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([js-source]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:name :json}, :order [:json :name]}, :doc nil}