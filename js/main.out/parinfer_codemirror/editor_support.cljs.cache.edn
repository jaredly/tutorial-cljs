;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name parinfer-codemirror.editor-support, :imports nil, :requires {string clojure.string, clojure.string clojure.string, indent-mode parinfer.indent-mode, parinfer.indent-mode parinfer.indent-mode, paren-mode parinfer.paren-mode, parinfer.paren-mode parinfer.paren-mode, parinfer-codemirror.state parinfer-codemirror.state}, :uses {join clojure.string, state parinfer-codemirror.state}, :defs {IEditor {:meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :line 10, :column 14, :end-line 10, :end-column 21, :doc "Custom data/methods for a CodeMirror editor.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {cm-key [[this]], get-prev-state [[this]], frame-updated? [[this]], set-frame-updated! [[this value]]}}}, :protocol-symbol true, :name parinfer-codemirror.editor-support/IEditor, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :end-column 21, :column 1, :line 10, :protocol-info {:methods {cm-key [[this]], get-prev-state [[this]], frame-updated? [[this]], set-frame-updated! [[this value]]}}, :info nil, :end-line 10, :impls #{}, :doc "Custom data/methods for a CodeMirror editor.", :jsdoc ("@interface")}, cm-key {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :line 12, :column 4, :end-line 12, :end-column 10, :protocol parinfer-codemirror.editor-support/IEditor, :doc nil, :arglists (quote ([this]))}, :protocol parinfer-codemirror.editor-support/IEditor, :name parinfer-codemirror.editor-support/cm-key, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, get-prev-state {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :line 13, :column 4, :end-line 13, :end-column 18, :protocol parinfer-codemirror.editor-support/IEditor, :doc nil, :arglists (quote ([this]))}, :protocol parinfer-codemirror.editor-support/IEditor, :name parinfer-codemirror.editor-support/get-prev-state, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, frame-updated? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :line 14, :column 4, :end-line 14, :end-column 18, :protocol parinfer-codemirror.editor-support/IEditor, :doc nil, :arglists (quote ([this]))}, :protocol parinfer-codemirror.editor-support/IEditor, :name parinfer-codemirror.editor-support/frame-updated?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, set-frame-updated! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :line 15, :column 4, :end-line 15, :end-column 22, :protocol parinfer-codemirror.editor-support/IEditor, :doc nil, :arglists (quote ([this value]))}, :protocol parinfer-codemirror.editor-support/IEditor, :name parinfer-codemirror.editor-support/set-frame-updated!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :end-column 22, :method-params ([this value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this value])), :doc nil}, update-cursor! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :line 22, :column 7, :end-line 22, :end-column 21, :arglists (quote ([cm change])), :doc "Correctly position cursor after text that was just typed.\n  We need this since reformatting the text can shift things forward past our cursor."}, :name parinfer-codemirror.editor-support/update-cursor!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :end-column 21, :method-params ([cm change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cm change])), :doc "Correctly position cursor after text that was just typed.\n  We need this since reformatting the text can shift things forward past our cursor."}, compute-cursor-dx {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :line 57, :column 7, :end-line 57, :end-column 24, :arglists (quote ([cursor change]))}, :name parinfer-codemirror.editor-support/compute-cursor-dx, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :end-column 24, :method-params ([cursor change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor change]))}, compute-cm-change {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :line 75, :column 7, :end-line 75, :end-column 24, :arglists (quote ([cm change options prev-state]))}, :name parinfer-codemirror.editor-support/compute-cm-change, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :end-column 24, :method-params ([cm change options prev-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cm change options prev-state]))}, fix-text! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :line 94, :column 7, :end-line 94, :end-column 16, :arglists (quote ([cm & {:keys [change use-cache?], :or {change nil, use-cache? false}}])), :doc "Correctly format the text from the given editor.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(cm {:keys [change use-cache?], :or {change nil, use-cache? false}})], :arglists ([cm & {:keys [change use-cache?], :or {change nil, use-cache? false}}]), :arglists-meta (nil)}}, :name parinfer-codemirror.editor-support/fix-text!, :variadic true, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/parinfer_codemirror/editor_support.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(cm {:keys [change use-cache?], :or {change nil, use-cache? false}})], :arglists ([cm & {:keys [change use-cache?], :or {change nil, use-cache? false}}]), :arglists-meta (nil)}, :method-params [(cm {:keys [change use-cache?], :or {change nil, use-cache? false}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists ([cm & {:keys [change use-cache?], :or {change nil, use-cache? false}}]), :doc "Correctly format the text from the given editor."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:cursor-line :start-line :valid? :else :num-new-lines :cursor-x :mode :state :indent-mode :cursor-dx :line-no :end-line :new-line :change :use-cache? :text}, :order [:else :start-line :end-line :num-new-lines :cursor-line :line-no :new-line :change :use-cache? :cursor-x :cursor-dx :mode :indent-mode :valid? :state :text]}, :doc "Connects parinfer mode functions to CodeMirror"}