;; Analyzed by ClojureScript 1.7.228
{:name quil.middleware, :doc "Quil middleware.", :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {fun-mode quil.middlewares.fun-mode, quil.middlewares.fun-mode quil.middlewares.fun-mode, navigation-3d quil.middlewares.navigation-3d, quil.middlewares.navigation-3d quil.middlewares.navigation-3d, navigation-2d quil.middlewares.navigation-2d, quil.middlewares.navigation-2d quil.middlewares.navigation-2d}, :imports nil, :defs {fun-mode {:category "Middleware", :protocol-inline nil, :meta {:category "Middleware", :added "2.1.0", :ns "quil.middleware", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/middleware.cljs", :end-column 11, :column 3, :requires-bindings false, :line 14, :end-line 14, :arglists (quote ([options])), :doc "Introduces function mode. Adds 'update' function which takes current\n  state and returns new state. Makes all other functions (setup, draw,\n  mouse-click, etc) state-aware. See wiki for more details."}, :added "2.1.0", :ns "quil.middleware", :name quil.middleware/fun-mode, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/middleware.cljs", :end-column 11, :method-params ([options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 9, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([options])), :doc "Introduces function mode. Adds 'update' function which takes current\n  state and returns new state. Makes all other functions (setup, draw,\n  mouse-click, etc) state-aware. See wiki for more details."}, navigation-3d {:category "Middleware", :protocol-inline nil, :meta {:category "Middleware", :added "2.2.0", :ns "quil.middleware", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/middleware.cljs", :end-column 16, :column 3, :requires-bindings false, :line 40, :end-line 40, :arglists (quote ([options])), :doc "Enables navigation in 3D space. Similar to how it is done in\n  shooters: WASD navigation, space is go up, drag mouse to look around.\n  This middleware requires fun-mode.\n\n\n  Navigation\n\n  * Drag mouse to look around. You can change settings to bind\n    mouse-moved instead of mouse-dragged to look around. See\n    customization info below.\n\n  * Keyboard:\n    * w - go forward\n    * s - go backward\n    * a - strafe left\n    * d - strafe right\n    * space - go up\n    * z - go down, can't bind to ctrl, limitation of Processing\n\n\n  Customization\n\n  You can customize this middleware by providing map as\n  :navigation-3d option in defsketch/sketch. Map can have following\n  optional keys:\n\n  :position - vector of 3 numbers, initial camera position. Default\n              is the same as in 'camera' function.\n\n  :straight - vector of 3 numbers, direction you'll be looking at.\n              Default is [0 0 -1] (looking down).\n\n  :up - vector of 3 numbers, 'up' direction. Default is [0 1 0].\n\n  :pixels-in-360 - number, mouse sensitivity. Defines how many pixels\n                   you need to move/drag you mouse to rotate 360 degrees.\n                   The less the number the more sensitive is mouse.\n                   Default is 1000.\n\n  :step-size - number, number of pixels you move on each key event (wasd).\n               Default is 20.\n\n  :rotate-on - keyword, either :mouse-dragged or :mouse-moved. Specifies\n               on which mouse event camera should rotate. Default is\n               :mouse-dragged.\n\n\n  Accessing position information from sketch\n\n  navigation-3d uses fun-mode under the hood  so all position-related\n  information is stored in the state map. It means that you can access in\n  draw/update/any handler and modify it if you need to. Position\n  information is a map which is stored under :navigation-3d key in the\n  state map. Position consists of 3 values: :position, :straight and :up.\n  See \"Customization\" section above for more details.\n\n  Usage example:\n\n  (q/defsketch my-sketch\n    ...\n    :middleware [m/fun-mode m/navigation-3d])\n\n  See wiki article for more(?) details:\n  https://github.com/quil/quil/wiki/Navigation-3D"}, :added "2.2.0", :ns "quil.middleware", :name quil.middleware/navigation-3d, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/middleware.cljs", :end-column 16, :method-params ([options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 35, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([options])), :doc "Enables navigation in 3D space. Similar to how it is done in\n  shooters: WASD navigation, space is go up, drag mouse to look around.\n  This middleware requires fun-mode.\n\n\n  Navigation\n\n  * Drag mouse to look around. You can change settings to bind\n    mouse-moved instead of mouse-dragged to look around. See\n    customization info below.\n\n  * Keyboard:\n    * w - go forward\n    * s - go backward\n    * a - strafe left\n    * d - strafe right\n    * space - go up\n    * z - go down, can't bind to ctrl, limitation of Processing\n\n\n  Customization\n\n  You can customize this middleware by providing map as\n  :navigation-3d option in defsketch/sketch. Map can have following\n  optional keys:\n\n  :position - vector of 3 numbers, initial camera position. Default\n              is the same as in 'camera' function.\n\n  :straight - vector of 3 numbers, direction you'll be looking at.\n              Default is [0 0 -1] (looking down).\n\n  :up - vector of 3 numbers, 'up' direction. Default is [0 1 0].\n\n  :pixels-in-360 - number, mouse sensitivity. Defines how many pixels\n                   you need to move/drag you mouse to rotate 360 degrees.\n                   The less the number the more sensitive is mouse.\n                   Default is 1000.\n\n  :step-size - number, number of pixels you move on each key event (wasd).\n               Default is 20.\n\n  :rotate-on - keyword, either :mouse-dragged or :mouse-moved. Specifies\n               on which mouse event camera should rotate. Default is\n               :mouse-dragged.\n\n\n  Accessing position information from sketch\n\n  navigation-3d uses fun-mode under the hood  so all position-related\n  information is stored in the state map. It means that you can access in\n  draw/update/any handler and modify it if you need to. Position\n  information is a map which is stored under :navigation-3d key in the\n  state map. Position consists of 3 values: :position, :straight and :up.\n  See \"Customization\" section above for more details.\n\n  Usage example:\n\n  (q/defsketch my-sketch\n    ...\n    :middleware [m/fun-mode m/navigation-3d])\n\n  See wiki article for more(?) details:\n  https://github.com/quil/quil/wiki/Navigation-3D"}, navigation-2d {:category "Middleware", :protocol-inline nil, :meta {:category "Middleware", :added "2.2.6", :ns "quil.middleware", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/middleware.cljs", :end-column 16, :column 3, :requires-bindings false, :line 113, :end-line 113, :arglists (quote ([options])), :doc "Enables navigation over 2D sketch. Drag mouse to change the center of the\n  sketch and mouse wheel controls zoom. This middleware requires fun-mode.\n\n  Customization\n\n  You can customize this middleware by providing map as\n  :navigation-2d option in defsketch/sketch. Map can have following\n  optional keys:\n\n  :position - vector of 2 numbers, x and y - center of the screen.\n              Default is width/2, height/2.\n\n  :zoom - number indicating current zoom level. Default is 1.\n\n  Accessing position information from sketch\n\n  navigation-2d uses fun-mode under the hood so all position-related\n  information is stored in the state map. It means that you can access in\n  draw/update/any handler and modify it if you need to. Position\n  information is a map which is stored under :navigation-2d key in the\n  state map. Position consists of 2 values: :position and :zoom.\n  See \"Customization\" section above for more details.\n\n  Usage example:\n\n  (q/defsketch my-sketch\n    ...\n    :middleware [m/fun-mode m/navigation-2d])\n"}, :added "2.2.6", :ns "quil.middleware", :name quil.middleware/navigation-2d, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/middleware.cljs", :end-column 16, :method-params ([options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 108, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([options])), :doc "Enables navigation over 2D sketch. Drag mouse to change the center of the\n  sketch and mouse wheel controls zoom. This middleware requires fun-mode.\n\n  Customization\n\n  You can customize this middleware by providing map as\n  :navigation-2d option in defsketch/sketch. Map can have following\n  optional keys:\n\n  :position - vector of 2 numbers, x and y - center of the screen.\n              Default is width/2, height/2.\n\n  :zoom - number indicating current zoom level. Default is 1.\n\n  Accessing position information from sketch\n\n  navigation-2d uses fun-mode under the hood so all position-related\n  information is stored in the state map. It means that you can access in\n  draw/update/any handler and modify it if you need to. Position\n  information is a map which is stored under :navigation-2d key in the\n  state map. Position consists of 2 values: :position and :zoom.\n  See \"Customization\" section above for more details.\n\n  Usage example:\n\n  (q/defsketch my-sketch\n    ...\n    :middleware [m/fun-mode m/navigation-2d])\n"}}}