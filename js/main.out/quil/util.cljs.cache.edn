;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name quil.util, :imports nil, :requires {cstr clojure.string, clojure.string clojure.string}, :uses nil, :defs {no-fn {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([])), :doc "Function that does nothing."}, :name quil.util/no-fn, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Function that does nothing."}, resolve-constant-key {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :line 27, :column 7, :end-line 27, :end-column 27, :arglists (quote ([key mappings])), :doc "Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."}, :name quil.util/resolve-constant-key, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :end-column 27, :method-params ([key mappings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key mappings])), :doc "Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."}, length-of-longest-key {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :line 39, :column 7, :end-line 39, :end-column 28, :arglists (quote ([m])), :doc "Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"}, :name quil.util/length-of-longest-key, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :end-column 28, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"}, gen-padding {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :line 48, :column 7, :end-line 48, :end-column 18, :arglists (quote ([len] [len pad] [s len pad])), :doc "Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([len] [len pad] [s len pad]), :arglists ([len] [len pad] [s len pad]), :arglists-meta (nil nil nil)}}, :name quil.util/gen-padding, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([len] [len pad] [s len pad]), :arglists ([len] [len pad] [s len pad]), :arglists-meta (nil nil nil)}, :method-params ([len] [len pad] [s len pad]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 3, :fn-var true, :arglists ([len] [len pad] [s len pad]), :doc "Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space"}, print-definition-list {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :line 60, :column 7, :end-line 60, :end-column 28, :arglists (quote ([definitions]))}, :name quil.util/print-definition-list, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :end-column 28, :method-params ([definitions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([definitions]))}, prepare-quil-name {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :line 80, :column 7, :end-line 80, :end-column 24, :arglists (quote ([const-keyword]))}, :name quil.util/prepare-quil-name, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/util.cljs", :end-column 24, :method-params ([const-keyword]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([const-keyword]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc "Utility fns"}