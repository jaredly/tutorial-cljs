;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name quil.core, :imports nil, :requires {clojure.string clojure.string, org.processingjs.Processing org.processingjs.Processing, applet quil.sketch, quil.sketch quil.sketch, u quil.util, quil.util quil.util}, :uses {current-applet quil.sketch, resolve-constant-key quil.util, resolve-renderer quil.sketch}, :defs {rotate-x {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "rotateX()", :column 3, :requires-bindings true, :line 3313, :end-line 3313, :arglists (quote ([angle])), :doc "Rotates a shape around the x-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  (* PI 2)) or converted to radians with the radians function. Objects\n  are always rotated around their relative position to the origin and\n  positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-x HALF-PI) and then (rotate-x HALF-PI) is\n  the same as (rotate-x PI). If rotate-x is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."}, :added "1.0", :name quil.core/rotate-x, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "rotateX()", :method-params ([angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3307, :end-line 3313, :max-fixed-arity 1, :fn-var true, :arglists (quote ([angle])), :doc "Rotates a shape around the x-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  (* PI 2)) or converted to radians with the radians function. Objects\n  are always rotated around their relative position to the origin and\n  positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-x HALF-PI) and then (rotate-x HALF-PI) is\n  the same as (rotate-x PI). If rotate-x is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."}, text-modes {:name quil.core/text-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 69, :end-column 12, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 69, :column 2, :end-line 69, :end-column 12}}, print-projection {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :processing-name "printProjection()", :column 3, :requires-bindings true, :line 2947, :end-line 2947, :arglists (quote ([])), :doc "Prints the current projection matrix to std out. Useful for\n  debugging"}, :added "1.0", :name quil.core/print-projection, :variadic false, :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :processing-name "printProjection()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2941, :end-line 2947, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Prints the current projection matrix to std out. Useful for\n  debugging"}, raw-key {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Keyboard", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "key", :column 3, :requires-bindings true, :line 3106, :end-line 3106, :arglists (quote ([])), :doc "Contains the value of the most recent key on the keyboard that was\n  used (either pressed or released).\n\n  For non-ASCII keys, use the keyCode variable. The keys included in\n  the ASCII specification (BACKSPACE, TAB, ENTER, RETURN, ESC, and\n  DELETE) do not require checking to see if they key is coded, and you\n  should simply use the key variable instead of keyCode If you're\n  making cross-platform projects, note that the ENTER key is commonly\n  used on PCs and Unix and the RETURN key is used instead on\n  Macintosh. Check for both ENTER and RETURN to make sure your program\n  will work for all platforms."}, :added "1.0", :name quil.core/raw-key, :variadic false, :subcategory "Keyboard", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "key", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3100, :end-line 3106, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Contains the value of the most recent key on the keyboard that was\n  used (either pressed or released).\n\n  For non-ASCII keys, use the keyCode variable. The keys included in\n  the ASCII specification (BACKSPACE, TAB, ENTER, RETURN, ESC, and\n  DELETE) do not require checking to see if they key is coded, and you\n  should simply use the key variable instead of keyCode If you're\n  making cross-platform projects, note that the ENTER key is commonly\n  used on PCs and Unix and the RETURN key is used instead on\n  Macintosh. Check for both ENTER and RETURN to make sure your program\n  will work for all platforms."}, text-char {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([c x y] [c x y z]), :arglists ([c x y] [c x y z]), :arglists-meta (nil nil)}, :processing-name "text()", :column 3, :requires-bindings true, :line 3990, :end-line 3990, :arglists (quote ([c x y] [c x y z])), :doc "Draws a char to the screen in the specified position. See text fn\n  for more details."}, :added "1.0", :name quil.core/text-char, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([c x y] [c x y z]), :arglists ([c x y] [c x y z]), :arglists-meta (nil nil)}, :processing-name "text()", :method-params ([c x y] [c x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3984, :end-line 3990, :max-fixed-arity 4, :fn-var true, :arglists ([c x y] [c x y z]), :doc "Draws a char to the screen in the specified position. See text fn\n  for more details."}, display-filter {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([mode] [mode level]), :arglists ([mode] [mode level]), :arglists-meta (nil nil)}, :processing-name "filter()", :column 3, :requires-bindings true, :line 1703, :end-line 1703, :arglists (quote ([mode] [mode level])), :doc "Originally named filter in Processing Language.\n  Filters the display window with the specified mode and level.\n  Level defines the quality of the filter and mode may be one of the\n  following keywords:\n\n  :threshold - converts the image to black and white pixels depending\n               if they are above or below the threshold defined by\n               the level parameter. The level must be between\n               0.0 (black) and 1.0 (white). If no level is specified,\n               0.5 is used.\n  :gray      - converts any colors in the image to grayscale\n               equivalents. Doesn't work with level.\n  :invert    - sets each pixel to its inverse value. Doesn't work with\n               level.\n  :posterize - limits each channel of the image to the number of\n               colors specified as the level parameter. The parameter can\n               be set to values between 2 and 255, but results are most\n               noticeable in the lower ranges.\n  :blur      - executes a Guassian blur with the level parameter\n               specifying the extent of the blurring. If no level\n               parameter is used, the blur is equivalent to Guassian\n               blur of radius 1.\n  :opaque    - sets the alpha channel to entirely opaque. Doesn't work\n               with level.\n  :erode     - reduces the light areas. Doesn't work with level.\n  :dilate    - increases the light areas.  Doesn't work with level."}, :added "1.0", :name quil.core/display-filter, :variadic false, :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([mode] [mode level]), :arglists ([mode] [mode level]), :arglists-meta (nil nil)}, :processing-name "filter()", :method-params ([mode] [mode level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1697, :end-line 1703, :max-fixed-arity 2, :fn-var true, :arglists ([mode] [mode level]), :doc "Originally named filter in Processing Language.\n  Filters the display window with the specified mode and level.\n  Level defines the quality of the filter and mode may be one of the\n  following keywords:\n\n  :threshold - converts the image to black and white pixels depending\n               if they are above or below the threshold defined by\n               the level parameter. The level must be between\n               0.0 (black) and 1.0 (white). If no level is specified,\n               0.5 is used.\n  :gray      - converts any colors in the image to grayscale\n               equivalents. Doesn't work with level.\n  :invert    - sets each pixel to its inverse value. Doesn't work with\n               level.\n  :posterize - limits each channel of the image to the number of\n               colors specified as the level parameter. The parameter can\n               be set to values between 2 and 255, but results are most\n               noticeable in the lower ranges.\n  :blur      - executes a Guassian blur with the level parameter\n               specifying the extent of the blurring. If no level\n               parameter is used, the blur is equivalent to Guassian\n               blur of radius 1.\n  :opaque    - sets the alpha channel to entirely opaque. Doesn't work\n               with level.\n  :erode     - reduces the light areas. Doesn't work with level.\n  :dilate    - increases the light areas.  Doesn't work with level."}, rotate-z {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "rotateZ()", :column 3, :requires-bindings true, :line 3355, :end-line 3355, :arglists (quote ([angle])), :doc "Rotates a shape around the z-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the radians function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-z HALF-PI) and then (rotate-z HALF-PI) is\n  the same as (rotate-z PI). If rotate-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."}, :added "1.0", :name quil.core/rotate-z, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "rotateZ()", :method-params ([angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3349, :end-line 3355, :max-fixed-arity 1, :fn-var true, :arglists (quote ([angle])), :doc "Rotates a shape around the z-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the radians function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-z HALF-PI) and then (rotate-z HALF-PI) is\n  the same as (rotate-z PI). If rotate-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."}, random-gaussian {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "2.0", :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 18, :processing-name "randomGaussian()", :column 3, :requires-bindings true, :line 3075, :end-line 3075, :arglists (quote ([])), :doc "Returns a float from a random series of numbers having a mean of 0 and\n  standard deviation of 1. Each time the randomGaussian() function is called,\n  it returns a number fitting a Gaussian, or normal, distribution.\n  There is theoretically no minimum or maximum value that randomGaussian()\n  might return. Rather, there is just a very low probability that values far\n  from the mean will be returned; and a higher probability that numbers near\n  the mean will be returned. ."}, :added "2.0", :name quil.core/random-gaussian, :variadic false, :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 18, :processing-name "randomGaussian()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3069, :end-line 3075, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a float from a random series of numbers having a mean of 0 and\n  standard deviation of 1. Each time the randomGaussian() function is called,\n  it returns a number fitting a Gaussian, or normal, distribution.\n  There is theoretically no minimum or maximum value that randomGaussian()\n  might return. Rather, there is just a very low probability that values far\n  from the mean will be returned; and a higher probability that numbers near\n  the mean will be returned. ."}, blend {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 11, :method-params ([x y width height dx dy dwidth dheight mode] [src-img x y width height dx dy dwidth dheight mode] [src-img dest-img x y width height dx dy dwidth dheight mode]), :arglists ([x y width height dx dy dwidth dheight mode] [src-img x y width height dx dy dwidth dheight mode] [src-img dest-img x y width height dx dy dwidth dheight mode]), :arglists-meta (nil nil nil)}, :processing-name "blend()", :column 3, :requires-bindings true, :line 779, :end-line 779, :arglists (quote ([x y width height dx dy dwidth dheight mode] [src-img x y width height dx dy dwidth dheight mode] [src-img dest-img x y width height dx dy dwidth dheight mode])), :doc "Blends a region of pixels from one image into another with full alpha\n  channel support. If src is not specified it defaults to current-graphics.\n  If dest is not specified it defaults to current-graphics.\n\n  Note: blend-mode function is recommended to use instead of this one.\n\n  Available blend modes are:\n\n  :blend      - linear interpolation of colours: C = A*factor + B\n  :add        - additive blending with white clip:\n                                            C = min(A*factor + B, 255)\n  :subtract   - subtractive blending with black clip:\n                                            C = max(B - A*factor, 0)\n  :darkest    - only the darkest colour succeeds:\n                                            C = min(A*factor, B)\n  :lightest   - only the lightest colour succeeds:\n                                            C = max(A*factor, B)\n  :difference - subtract colors from underlying image.\n  :exclusion  - similar to :difference, but less extreme.\n  :multiply   - Multiply the colors, result will always be darker.\n  :screen     - Opposite multiply, uses inverse values of the colors.\n  :overlay    - A mix of :multiply and :screen. Multiplies dark values\n                and screens light values.\n  :hard-light - :screen when greater than 50% gray, :multiply when\n                lower.\n  :soft-light - Mix of :darkest and :lightest. Works like :overlay,\n                but not as harsh.\n  :dodge      - Lightens light tones and increases contrast, ignores\n                darks.\n                Called \"Color Dodge\" in Illustrator and Photoshop.\n  :burn       - Darker areas are applied, increasing contrast, ignores\n                lights. Called \"Color Burn\" in Illustrator and\n                Photoshop."}, :added "1.0", :name quil.core/blend, :variadic false, :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 11, :method-params ([x y width height dx dy dwidth dheight mode] [src-img x y width height dx dy dwidth dheight mode] [src-img dest-img x y width height dx dy dwidth dheight mode]), :arglists ([x y width height dx dy dwidth dheight mode] [src-img x y width height dx dy dwidth dheight mode] [src-img dest-img x y width height dx dy dwidth dheight mode]), :arglists-meta (nil nil nil)}, :processing-name "blend()", :method-params ([x y width height dx dy dwidth dheight mode] [src-img x y width height dx dy dwidth dheight mode] [src-img dest-img x y width height dx dy dwidth dheight mode]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 773, :end-line 779, :max-fixed-arity 11, :fn-var true, :arglists ([x y width height dx dy dwidth dheight mode] [src-img x y width height dx dy dwidth dheight mode] [src-img dest-img x y width height dx dy dwidth dheight mode]), :doc "Blends a region of pixels from one image into another with full alpha\n  channel support. If src is not specified it defaults to current-graphics.\n  If dest is not specified it defaults to current-graphics.\n\n  Note: blend-mode function is recommended to use instead of this one.\n\n  Available blend modes are:\n\n  :blend      - linear interpolation of colours: C = A*factor + B\n  :add        - additive blending with white clip:\n                                            C = min(A*factor + B, 255)\n  :subtract   - subtractive blending with black clip:\n                                            C = max(B - A*factor, 0)\n  :darkest    - only the darkest colour succeeds:\n                                            C = min(A*factor, B)\n  :lightest   - only the lightest colour succeeds:\n                                            C = max(A*factor, B)\n  :difference - subtract colors from underlying image.\n  :exclusion  - similar to :difference, but less extreme.\n  :multiply   - Multiply the colors, result will always be darker.\n  :screen     - Opposite multiply, uses inverse values of the colors.\n  :overlay    - A mix of :multiply and :screen. Multiplies dark values\n                and screens light values.\n  :hard-light - :screen when greater than 50% gray, :multiply when\n                lower.\n  :soft-light - Mix of :darkest and :lightest. Works like :overlay,\n                but not as harsh.\n  :dodge      - Lightens light tones and increases contrast, ignores\n                darks.\n                Called \"Color Dodge\" in Illustrator and Photoshop.\n  :burn       - Darker areas are applied, increasing contrast, ignores\n                lights. Called \"Color Burn\" in Illustrator and\n                Photoshop."}, frame-count {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "frameCount", :column 3, :requires-bindings true, :line 1779, :end-line 1779, :arglists (quote ([])), :doc "The system variable frameCount contains the number of frames\n  displayed since the program started. Inside setup() the value is 0\n  and after the first iteration of draw it is 1, etc."}, :added "1.0", :name quil.core/frame-count, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "frameCount", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1773, :end-line 1779, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "The system variable frameCount contains the number of frames\n  displayed since the program started. Inside setup() the value is 0\n  and after the first iteration of draw it is 1, etc."}, model-y {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "modelY()", :column 3, :requires-bindings true, :line 2442, :end-line 2442, :arglists (quote ([x y z])), :doc "Returns the three-dimensional x, y, z position in model space. This\n  returns the y value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The y value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."}, :added "1.0", :name quil.core/model-y, :variadic false, :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "modelY()", :method-params ([x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2436, :end-line 2442, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y z])), :doc "Returns the three-dimensional x, y, z position in model space. This\n  returns the y value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The y value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."}, set-image {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "set()", :column 3, :requires-bindings true, :line 3571, :end-line 3571, :arglists (quote ([x y src])), :doc "Writes an image directly into the display window. The x and y\n  parameters define the coordinates for the upper-left corner of the\n  image."}, :added "1.0", :name quil.core/set-image, :variadic false, :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "set()", :method-params ([x y src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3565, :end-line 3571, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y src])), :doc "Writes an image directly into the display window. The x and y\n  parameters define the coordinates for the upper-left corner of the\n  image."}, shape-mode {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "shapeMode()", :column 3, :requires-bindings true, :line 3674, :end-line 3674, :arglists (quote ([mode])), :doc "Modifies the location from which shapes draw. Available modes are\n  :corner, :corners and :center. Default is :corner.\n\n  :corner  - specifies the location to be the upper left corner of the\n             shape and uses the third and fourth parameters of shape\n             to specify the width and height.\n\n  :corners - uses the first and second parameters of shape to set\n             the location of one corner and uses the third and fourth\n             parameters to set the opposite corner.\n\n  :center  - draws the shape from its center point and uses the third\n             and forth parameters of shape to specify the width and\n             height. "}, :added "1.0", :name quil.core/shape-mode, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "shapeMode()", :method-params ([mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3669, :end-line 3674, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mode])), :doc "Modifies the location from which shapes draw. Available modes are\n  :corner, :corners and :center. Default is :corner.\n\n  :corner  - specifies the location to be the upper left corner of the\n             shape and uses the third and fourth parameters of shape\n             to specify the width and height.\n\n  :corners - uses the first and second parameters of shape to set\n             the location of one corner and uses the third and fourth\n             parameters to set the opposite corner.\n\n  :center  - draws the shape from its center point and uses the third\n             and forth parameters of shape to specify the width and\n             height. "}, cursor-image {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([img] [img hx hy]), :arglists ([img] [img hx hy]), :arglists-meta (nil nil)}, :processing-name "cursor()", :column 5, :requires-bindings true, :line 1271, :end-line 1271, :arglists (quote ([img] [img hx hy])), :doc "Set the cursor to a predefined image. The horizontal and vertical\n  active spots of the cursor may be specified with hx and hy.\n  It is recommended to make the size 16x16 or 32x32 pixels."}, :added "1.0", :name quil.core/cursor-image, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([img] [img hx hy]), :arglists ([img] [img hx hy]), :arglists-meta (nil nil)}, :processing-name "cursor()", :method-params ([img] [img hx hy]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1265, :end-line 1271, :max-fixed-arity 3, :fn-var true, :arglists ([img] [img hx hy]), :doc "Set the cursor to a predefined image. The horizontal and vertical\n  active spots of the cursor may be specified with hx and hy.\n  It is recommended to make the size 16x16 or 32x32 pixels."}, create-graphics {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Rendering", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([w h] [w h renderer] [w h renderer path]), :arglists ([w h] [w h renderer] [w h renderer path]), :arglists-meta (nil nil nil)}, :processing-name "createGraphics()", :column 3, :requires-bindings true, :line 1172, :end-line 1172, :arglists (quote ([w h] [w h renderer] [w h renderer path])), :doc "Creates and returns a new PGraphics object of the types :p2d, :p3d,\n  :java2d, :pdf. By default :java2d is used. Use this class if you\n  need to draw into an off-screen graphics buffer. It's not possible\n  to use create-graphics with the :opengl renderer, because it doesn't\n  allow offscreen use. The :pdf renderer requires the filename parameter.\n\n  Note: don't use create-graphics in draw in clojurescript, it leaks memory.\n  You should create graphic in setup and reuse it in draw instead of creating\n  a new one.\n\n  It's important to call any drawing commands between (.beginDraw graphics) and\n  (.endDraw graphics) statements or use with-graphics macro. This is also true\n  for any commands that affect drawing, such as smooth or color-mode.\n\n  If you're using :pdf renderer - don't forget to call (.dispose graphics)\n  as last command inside with-graphics macro, otherwise graphics won't be\n  saved.\n\n  Unlike the main drawing surface which is completely opaque, surfaces\n  created with create-graphics can have transparency. This makes it\n  possible to draw into a graphics and maintain the alpha channel. By\n  using save to write a PNG or TGA file, the transparency of the\n  graphics object will be honored."}, :added "1.0", :name quil.core/create-graphics, :variadic false, :subcategory "Rendering", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([w h] [w h renderer] [w h renderer path]), :arglists ([w h] [w h renderer] [w h renderer path]), :arglists-meta (nil nil nil)}, :processing-name "createGraphics()", :method-params ([w h] [w h renderer] [w h renderer path]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 1166, :end-line 1172, :max-fixed-arity 4, :fn-var true, :arglists ([w h] [w h renderer] [w h renderer path]), :doc "Creates and returns a new PGraphics object of the types :p2d, :p3d,\n  :java2d, :pdf. By default :java2d is used. Use this class if you\n  need to draw into an off-screen graphics buffer. It's not possible\n  to use create-graphics with the :opengl renderer, because it doesn't\n  allow offscreen use. The :pdf renderer requires the filename parameter.\n\n  Note: don't use create-graphics in draw in clojurescript, it leaks memory.\n  You should create graphic in setup and reuse it in draw instead of creating\n  a new one.\n\n  It's important to call any drawing commands between (.beginDraw graphics) and\n  (.endDraw graphics) statements or use with-graphics macro. This is also true\n  for any commands that affect drawing, such as smooth or color-mode.\n\n  If you're using :pdf renderer - don't forget to call (.dispose graphics)\n  as last command inside with-graphics macro, otherwise graphics won't be\n  saved.\n\n  Unlike the main drawing surface which is completely opaque, surfaces\n  created with create-graphics can have transparency. This makes it\n  possible to draw into a graphics and maintain the alpha channel. By\n  using save to write a PNG or TGA file, the transparency of the\n  graphics object will be honored."}, update-pixels {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [img]), :arglists ([] [img]), :arglists-meta (nil nil)}, :processing-name "updatePixels()", :column 3, :requires-bindings true, :line 4397, :end-line 4397, :arglists (quote ([] [img])), :doc "Updates the display window or image with the data in the pixels array.\n  Use in conjunction with (pixels). If you're only reading pixels from\n  the array, there's no need to call update-pixels unless there are\n  changes.\n\n  Certain renderers may or may not seem to require pixels or\n  update-pixels. However, the rule is that any time you want to\n  manipulate the pixels array, you must first call pixels, and\n  after changes have been made, call update-pixels. Even if the\n  renderer may not seem to use this function in the current Processing\n  release, this will always be subject to change."}, :added "1.0", :name quil.core/update-pixels, :variadic false, :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [img]), :arglists ([] [img]), :arglists-meta (nil nil)}, :processing-name "updatePixels()", :method-params ([] [img]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4391, :end-line 4397, :max-fixed-arity 1, :fn-var true, :arglists ([] [img]), :doc "Updates the display window or image with the data in the pixels array.\n  Use in conjunction with (pixels). If you're only reading pixels from\n  the array, there's no need to call update-pixels unless there are\n  changes.\n\n  Certain renderers may or may not seem to require pixels or\n  update-pixels. However, the rule is that any time you want to\n  manipulate the pixels array, you must first call pixels, and\n  after changes have been made, call update-pixels. Even if the\n  renderer may not seem to use this function in the current Processing\n  release, this will always be subject to change."}, text-size {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "textSize()", :column 3, :requires-bindings true, :line 4182, :end-line 4182, :arglists (quote ([size])), :doc "Sets the current font size. This size will be used in all\n  subsequent calls to the text fn. Font size is measured in\n  units of pixels."}, :added "1.0", :name quil.core/text-size, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "textSize()", :method-params ([size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4176, :end-line 4182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([size])), :doc "Sets the current font size. This size will be used in all\n  subsequent calls to the text fn. Font size is measured in\n  units of pixels."}, pixels {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [img]), :arglists ([] [img]), :arglists-meta (nil nil)}, :processing-name "pixels[]", :column 3, :requires-bindings true, :line 2797, :end-line 2797, :arglists (quote ([] [img])), :doc "Array containing the values for all the pixels in the display\n  window or image. This array is therefore the size of the display window. If\n  this array is modified, the update-pixels fn must be called to update\n  the changes. Calls .loadPixels before obtaining the pixel array."}, :added "1.0", :name quil.core/pixels, :variadic false, :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [img]), :arglists ([] [img]), :arglists-meta (nil nil)}, :processing-name "pixels[]", :method-params ([] [img]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2791, :end-line 2797, :max-fixed-arity 1, :fn-var true, :arglists ([] [img]), :doc "Array containing the values for all the pixels in the display\n  window or image. This array is therefore the size of the display window. If\n  this array is modified, the update-pixels fn must be called to update\n  the changes. Calls .loadPixels before obtaining the pixel array."}, stroke-float {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([gray] [gray alpha] [x y z] [x y z a]), :arglists ([gray] [gray alpha] [x y z] [x y z a]), :arglists-meta (nil nil nil nil)}, :processing-name "stroke()", :column 3, :requires-bindings true, :line 3866, :end-line 3866, :arglists (quote ([gray] [gray alpha] [x y z] [x y z a])), :doc "Sets the color used to draw lines and borders around\n  shapes. Converts all args to floats"}, :added "1.0", :name quil.core/stroke-float, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([gray] [gray alpha] [x y z] [x y z a]), :arglists ([gray] [gray alpha] [x y z] [x y z a]), :arglists-meta (nil nil nil nil)}, :processing-name "stroke()", :method-params ([gray] [gray alpha] [x y z] [x y z a]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :requires-bindings true, :line 3860, :end-line 3866, :max-fixed-arity 4, :fn-var true, :arglists ([gray] [gray alpha] [x y z] [x y z a]), :doc "Sets the color used to draw lines and borders around\n  shapes. Converts all args to floats"}, constrain {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "constrain()", :column 3, :requires-bindings false, :line 1065, :end-line 1065, :arglists (quote ([amt low high])), :doc "Constrains a value to not exceed a maximum and minimum value."}, :added "1.0", :name quil.core/constrain, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "constrain()", :method-params ([amt low high]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 1059, :end-line 1065, :max-fixed-arity 3, :fn-var true, :arglists (quote ([amt low high])), :doc "Constrains a value to not exceed a maximum and minimum value."}, screen-y {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :processing-name "screenY()", :column 3, :requires-bindings true, :line 3504, :end-line 3504, :arglists (quote ([x y] [x y z])), :doc "Takes a three-dimensional x, y, z position and returns the y value\n  for where it will appear on a (two-dimensional) screen, once\n  affected by translate, scale or any other transformations"}, :added "1.0", :name quil.core/screen-y, :variadic false, :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :processing-name "screenY()", :method-params ([x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3498, :end-line 3504, :max-fixed-arity 3, :fn-var true, :arglists ([x y] [x y z]), :doc "Takes a three-dimensional x, y, z position and returns the y value\n  for where it will appear on a (two-dimensional) screen, once\n  affected by translate, scale or any other transformations"}, fill-float {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([gray] [gray alpha] [r g b] [r g b alpha]), :arglists ([gray] [gray alpha] [r g b] [r g b alpha]), :arglists-meta (nil nil nil nil)}, :processing-name "fill()", :column 3, :requires-bindings true, :line 1647, :end-line 1647, :arglists (quote ([gray] [gray alpha] [r g b] [r g b alpha])), :doc "Sets the color used to fill shapes. For example, (fill 204 102 0),\n  will specify that all subsequent shapes will be filled with orange."}, :added "1.0", :name quil.core/fill-float, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([gray] [gray alpha] [r g b] [r g b alpha]), :arglists ([gray] [gray alpha] [r g b] [r g b alpha]), :arglists-meta (nil nil nil nil)}, :processing-name "fill()", :method-params ([gray] [gray alpha] [r g b] [r g b alpha]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :requires-bindings true, :line 1641, :end-line 1647, :max-fixed-arity 4, :fn-var true, :arglists ([gray] [gray alpha] [r g b] [r g b alpha]), :doc "Sets the color used to fill shapes. For example, (fill 204 102 0),\n  will specify that all subsequent shapes will be filled with orange."}, rect {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 8, :method-params ([x y width height] [x y width height r] [x y width height top-left-r top-right-r bottom-right-r bottom-left-r]), :arglists ([x y width height] [x y width height r] [x y width height top-left-r top-right-r bottom-right-r bottom-left-r]), :arglists-meta (nil nil nil)}, :processing-name "rect()", :column 3, :requires-bindings true, :line 3127, :end-line 3127, :arglists (quote ([x y width height] [x y width height r] [x y width height top-left-r top-right-r bottom-right-r bottom-left-r])), :doc "Draws a rectangle to the screen. A rectangle is a four-sided shape\n  with every angle at ninety degrees. By default, the first two\n  parameters set the location of the upper-left corner, the third\n  sets the width, and the fourth sets the height. These parameters\n  may be changed with rect-mode.\n\n  To draw a rounded rectangle, add a fifth parameter, which is used as\n  the radius value for all four corners. To use a different radius value\n  for each corner, include eight parameters."}, :added "1.0", :name quil.core/rect, :variadic false, :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 8, :method-params ([x y width height] [x y width height r] [x y width height top-left-r top-right-r bottom-right-r bottom-left-r]), :arglists ([x y width height] [x y width height r] [x y width height top-left-r top-right-r bottom-right-r bottom-left-r]), :arglists-meta (nil nil nil)}, :processing-name "rect()", :method-params ([x y width height] [x y width height r] [x y width height top-left-r top-right-r bottom-right-r bottom-left-r]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 3121, :end-line 3127, :max-fixed-arity 8, :fn-var true, :arglists ([x y width height] [x y width height r] [x y width height top-left-r top-right-r bottom-right-r bottom-left-r]), :doc "Draws a rectangle to the screen. A rectangle is a four-sided shape\n  with every angle at ninety degrees. By default, the first two\n  parameters set the location of the upper-left corner, the third\n  sets the width, and the fourth sets the height. These parameters\n  may be changed with rect-mode.\n\n  To draw a rounded rectangle, add a fifth parameter, which is used as\n  the radius value for all four corners. To use a different radius value\n  for each corner, include eight parameters."}, log {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "log()", :column 3, :requires-bindings false, :line 2332, :end-line 2332, :arglists (quote ([val])), :doc "Calculates the natural logarithm (the base-e logarithm) of a\n  number. This function expects the values greater than 0.0."}, :added "1.0", :name quil.core/log, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "log()", :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 2326, :end-line 2332, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Calculates the natural logarithm (the base-e logarithm) of a\n  number. This function expects the values greater than 0.0."}, ambient-float {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([gray] [x y z]), :arglists ([gray] [x y z]), :arglists-meta (nil nil)}, :processing-name "ambient()", :column 3, :requires-bindings true, :line 325, :end-line 325, :arglists (quote ([gray] [x y z])), :doc "Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The\n  color components set through the parameters define the\n  reflectance. For example in the default color mode, setting x=255,\n  y=126, z=0, would cause all the red light to reflect and half of the\n  green light to reflect. Used in combination with emissive, specular,\n  and shininess in setting the material properties of shapes."}, :added "1.0", :name quil.core/ambient-float, :variadic false, :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([gray] [x y z]), :arglists ([gray] [x y z]), :arglists-meta (nil nil)}, :processing-name "ambient()", :method-params ([gray] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 319, :end-line 325, :max-fixed-arity 3, :fn-var true, :arglists ([gray] [x y z]), :doc "Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The\n  color components set through the parameters define the\n  reflectance. For example in the default color mode, setting x=255,\n  y=126, z=0, would cause all the red light to reflect and half of the\n  green light to reflect. Used in combination with emissive, specular,\n  and shininess in setting the material properties of shapes."}, end-raw {:category "Output", :protocol-inline nil, :meta {:category "Output", :added "1.0", :subcategory "Files", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "endRaw()", :column 3, :requires-bindings true, :line 1581, :end-line 1581, :arglists (quote ([])), :doc "Complement to begin-raw; they must always be used together. See\n  the begin-raw docstring for details."}, :added "1.0", :name quil.core/end-raw, :variadic false, :subcategory "Files", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "endRaw()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1575, :end-line 1581, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Complement to begin-raw; they must always be used together. See\n  the begin-raw docstring for details."}, radians {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "radians()", :column 3, :requires-bindings false, :line 3039, :end-line 3039, :arglists (quote ([degrees])), :doc "Converts a degree measurement to its corresponding value in\n  radians. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and 2*PI radians in a\n  circle. For example, 90° = PI/2 = 1.5707964. All trigonometric\n  methods in Processing require their parameters to be specified in\n  radians."}, :added "1.0", :name quil.core/radians, :variadic false, :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "radians()", :method-params ([degrees]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 3033, :end-line 3039, :max-fixed-arity 1, :fn-var true, :arglists (quote ([degrees])), :doc "Converts a degree measurement to its corresponding value in\n  radians. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and 2*PI radians in a\n  circle. For example, 90° = PI/2 = 1.5707964. All trigonometric\n  methods in Processing require their parameters to be specified in\n  radians."}, degrees {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "degrees()", :column 3, :requires-bindings false, :line 1402, :end-line 1402, :arglists (quote ([radians])), :doc "Converts a radian measurement to its corresponding value in\n  degrees. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and (* 2 Math/PI) radians\n  in a circle. For example, (= 90° (/ Math/PI 2) 1.5707964). All\n  trigonometric methods in Processing require their parameters to be\n  specified in radians."}, :added "1.0", :name quil.core/degrees, :variadic false, :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "degrees()", :method-params ([radians]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 1396, :end-line 1402, :max-fixed-arity 1, :fn-var true, :arglists (quote ([radians])), :doc "Converts a radian measurement to its corresponding value in\n  degrees. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and (* 2 Math/PI) radians\n  in a circle. For example, (= 90° (/ Math/PI 2) 1.5707964). All\n  trigonometric methods in Processing require their parameters to be\n  specified in radians."}, acos {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "acos()", :column 3, :requires-bindings false, :line 300, :end-line 300, :arglists (quote ([n])), :doc "The inverse of cos, returns the arc cosine of a value. This\n  function expects the values in the range of -1 to 1 and values are\n  returned in the range 0 to Math/PI (3.1415927)."}, :added "1.0", :name quil.core/acos, :variadic false, :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "acos()", :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 294, :end-line 300, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "The inverse of cos, returns the arc cosine of a value. This\n  function expects the values in the range of -1 to 1 and values are\n  returned in the range 0 to Math/PI (3.1415927)."}, bezier-detail {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "bezierDetail()", :column 3, :requires-bindings true, :line 693, :end-line 693, :arglists (quote ([detail])), :doc "Sets the resolution at which Beziers display. The default value is\n  20. This function is only useful when using the :p3d or :opengl\n  renderer as the default (:java2d) renderer does not use this\n  information."}, :added "1.0", :name quil.core/bezier-detail, :variadic false, :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "bezierDetail()", :method-params ([detail]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 687, :end-line 693, :max-fixed-arity 1, :fn-var true, :arglists (quote ([detail])), :doc "Sets the resolution at which Beziers display. The default value is\n  20. This function is only useful when using the :p3d or :opengl\n  renderer as the default (:java2d) renderer does not use this\n  information."}, texture {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "texture()", :column 3, :requires-bindings true, :line 4195, :end-line 4195, :arglists (quote ([img])), :doc "Sets a texture to be applied to vertex points. The texture fn must\n  be called between begin-shape and end-shape and before any calls to\n  vertex.\n\n  When textures are in use, the fill color is ignored. Instead, use\n  tint to specify the color of the texture as it is applied to the\n  shape."}, :added "1.0", :name quil.core/texture, :variadic false, :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "texture()", :method-params ([img]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4189, :end-line 4195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([img])), :doc "Sets a texture to be applied to vertex points. The texture fn must\n  be called between begin-shape and end-shape and before any calls to\n  vertex.\n\n  When textures are in use, the fill color is ignored. Instead, use\n  tint to specify the color of the texture as it is applied to the\n  shape."}, stroke-int {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([rgb] [rgb alpha]), :arglists ([rgb] [rgb alpha]), :arglists-meta (nil nil)}, :processing-name "stroke()", :column 3, :requires-bindings true, :line 3880, :end-line 3880, :arglists (quote ([rgb] [rgb alpha])), :doc "Sets the color used to draw lines and borders around\n  shapes. Converts rgb to int and alpha to a float."}, :added "1.0", :name quil.core/stroke-int, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([rgb] [rgb alpha]), :arglists ([rgb] [rgb alpha]), :arglists-meta (nil nil)}, :processing-name "stroke()", :method-params ([rgb] [rgb alpha]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3874, :end-line 3880, :max-fixed-arity 2, :fn-var true, :arglists ([rgb] [rgb alpha]), :doc "Sets the color used to draw lines and borders around\n  shapes. Converts rgb to int and alpha to a float."}, print-camera {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "printCamera()", :column 3, :requires-bindings true, :line 2925, :end-line 2925, :arglists (quote ([])), :doc "Prints the current camera matrix to std out. Useful for debugging."}, :added "1.0", :name quil.core/print-camera, :variadic false, :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "printCamera()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2919, :end-line 2925, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Prints the current camera matrix to std out. Useful for debugging."}, floor {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "2.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "floor()", :column 3, :requires-bindings false, :line 1756, :end-line 1756, :arglists (quote ([n])), :doc "Calculates the closest int value that is less than or equal to the\n  value of the parameter. For example, (floor 9.03) returns the value 9."}, :added "2.0", :name quil.core/floor, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "floor()", :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 1750, :end-line 1756, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Calculates the closest int value that is less than or equal to the\n  value of the parameter. For example, (floor 9.03) returns the value 9."}, atan2 {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "atan2()", :column 3, :requires-bindings false, :line 474, :end-line 474, :arglists (quote ([y x])), :doc "Calculates the angle (in radians) from a specified point to the\n  coordinate origin as measured from the positive x-axis. Values are\n  returned as a float in the range from PI to -PI. The atan2 function\n  is most often used for orienting geometry to the position of the\n  cursor. Note: The y-coordinate of the point is the first parameter\n  and the x-coordinate is the second due to the structure of\n  calculating the tangent."}, :added "1.0", :name quil.core/atan2, :variadic false, :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "atan2()", :method-params ([y x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 468, :end-line 474, :max-fixed-arity 2, :fn-var true, :arglists (quote ([y x])), :doc "Calculates the angle (in radians) from a specified point to the\n  coordinate origin as measured from the positive x-axis. Values are\n  returned as a float in the range from PI to -PI. The atan2 function\n  is most often used for orienting geometry to the position of the\n  cursor. Note: The y-coordinate of the point is the first parameter\n  and the x-coordinate is the second due to the structure of\n  calculating the tangent."}, millis {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "millis()", :column 3, :requires-bindings true, :line 2402, :end-line 2402, :arglists (quote ([])), :doc "Returns the number of milliseconds (thousandths of a second) since\n  starting the sketch. This information is often used for timing\n  animation sequences."}, :added "1.0", :name quil.core/millis, :variadic false, :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "millis()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2396, :end-line 2402, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the number of milliseconds (thousandths of a second) since\n  starting the sketch. This information is often used for timing\n  animation sequences."}, lerp-color {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "lerpColor()", :column 3, :requires-bindings true, :line 2157, :end-line 2157, :arglists (quote ([c1 c2 amt])), :doc "Calculates a color or colors between two color at a specific\n  increment. The amt parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc."}, :added "1.0", :name quil.core/lerp-color, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "lerpColor()", :method-params ([c1 c2 amt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2151, :end-line 2157, :max-fixed-arity 3, :fn-var true, :arglists (quote ([c1 c2 amt])), :doc "Calculates a color or colors between two color at a specific\n  increment. The amt parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc."}, image-modes {:name quil.core/image-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 62, :end-column 13, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 62, :column 2, :end-line 62, :end-column 13}}, no-fill-prop {:name quil.core/no-fill-prop, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 25, :column 1, :end-line 25, :end-column 35, :private true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 25, :column 23, :end-line 25, :end-column 35, :private true}}, color-mode {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([mode] [mode max] [mode max-x max-y max-z] [mode max-x max-y max-z max-a]), :arglists ([mode] [mode max] [mode max-x max-y max-z] [mode max-x max-y max-z max-a]), :arglists-meta (nil nil nil nil)}, :processing-name "colorMode()", :column 3, :requires-bindings true, :line 1009, :end-line 1009, :arglists (quote ([mode] [mode max] [mode max-x max-y max-z] [mode max-x max-y max-z max-a])), :doc "Changes the way Processing interprets color data. Available modes\n  are :rgb and :hsb.By default, the parameters for fill, stroke,\n  background, and color are defined by values between 0 and 255 using\n  the :rgb color model. The color-mode fn is used to change the\n  numerical range used for specifying colors and to switch color\n  systems. For example, calling\n  (color-mode :rgb 1.0) will specify that values are specified between\n  0 and 1. The limits for defining colors are altered by setting the\n  parameters range1, range2, range3, and range 4."}, :added "1.0", :name quil.core/color-mode, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([mode] [mode max] [mode max-x max-y max-z] [mode max-x max-y max-z max-a]), :arglists ([mode] [mode max] [mode max-x max-y max-z] [mode max-x max-y max-z max-a]), :arglists-meta (nil nil nil nil)}, :processing-name "colorMode()", :method-params ([mode] [mode max] [mode max-x max-y max-z] [mode max-x max-y max-z max-a]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :requires-bindings true, :line 1003, :end-line 1009, :max-fixed-arity 5, :fn-var true, :arglists ([mode] [mode max] [mode max-x max-y max-z] [mode max-x max-y max-z max-a]), :doc "Changes the way Processing interprets color data. Available modes\n  are :rgb and :hsb.By default, the parameters for fill, stroke,\n  background, and color are defined by values between 0 and 255 using\n  the :rgb color model. The color-mode fn is used to change the\n  numerical range used for specifying colors and to switch color\n  systems. For example, calling\n  (color-mode :rgb 1.0) will specify that values are specified between\n  0 and 1. The limits for defining colors are altered by setting the\n  parameters range1, range2, range3, and range 4."}, create-image {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "createImage()", :column 3, :requires-bindings true, :line 1211, :end-line 1211, :arglists (quote ([w h format])), :doc "Creates a new PImage (the datatype for storing images). This\n  provides a fresh buffer of pixels to play with. Set the size of the\n  buffer with the width and height parameters. The format parameter\n  defines how the pixels are stored. See the PImage reference for more\n  information.\n\n  Possible formats: :rgb, :argb, :alpha (grayscale alpha channel)\n\n  Prefer using create-image over initialising new PImage instances\n  directly."}, :added "1.0", :name quil.core/create-image, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "createImage()", :method-params ([w h format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1205, :end-line 1211, :max-fixed-arity 3, :fn-var true, :arglists (quote ([w h format])), :doc "Creates a new PImage (the datatype for storing images). This\n  provides a fresh buffer of pixels to play with. Set the size of the\n  buffer with the width and height parameters. The format parameter\n  defines how the pixels are stored. See the PImage reference for more\n  information.\n\n  Possible formats: :rgb, :argb, :alpha (grayscale alpha channel)\n\n  Prefer using create-image over initialising new PImage instances\n  directly."}, sq {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 5, :processing-name "sq()", :column 3, :requires-bindings false, :line 3825, :end-line 3825, :arglists (quote ([a])), :doc "Squares a number (multiplies a number by itself). The result is\n  always a positive number, as multiplying two negative numbers always\n  yields a positive result. For example, -1 * -1 = 1."}, :added "1.0", :name quil.core/sq, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 5, :processing-name "sq()", :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 3819, :end-line 3825, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Squares a number (multiplies a number by itself). The result is\n  always a positive number, as multiplying two negative numbers always\n  yields a positive result. For example, -1 * -1 = 1."}, height {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "getHeight()", :column 3, :processing-link nil, :requires-bindings true, :line 1896, :end-line 1896, :arglists (quote ([])), :doc "Height of the display window. The value of height is zero until\n  size is called."}, :added "1.0", :name quil.core/height, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "getHeight()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :processing-link nil, :requires-bindings true, :line 1889, :end-line 1896, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Height of the display window. The value of height is zero until\n  size is called."}, no-loop {:category "Structure", :protocol-inline nil, :meta {:category "Structure", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "noLoop()", :column 3, :requires-bindings true, :line 2663, :end-line 2663, :arglists (quote ([])), :doc "Stops Processing from continuously executing the code within\n  draw. If start-loop is called, the code in draw will begin to run\n  continuously again. If using no-loop in setup, it should be the last\n  line inside the block.\n\n  When no-loop is used, it's not possible to manipulate or access the\n  screen inside event handling functions such as mouse-pressed or\n  key-pressed. Instead, use those functions to call redraw or\n  loop which will run draw, which can update the screen\n  properly. This means that when no-loop has been called, no drawing\n  can happen, and functions like save-frame may not be used.\n\n  Note that if the sketch is resized, redraw will be called to\n  update the sketch, even after no-oop has been\n  specified. Otherwise, the sketch would enter an odd state until\n  loop was called."}, :added "1.0", :name quil.core/no-loop, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "noLoop()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2657, :end-line 2663, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Stops Processing from continuously executing the code within\n  draw. If start-loop is called, the code in draw will begin to run\n  continuously again. If using no-loop in setup, it should be the last\n  line inside the block.\n\n  When no-loop is used, it's not possible to manipulate or access the\n  screen inside event handling functions such as mouse-pressed or\n  key-pressed. Instead, use those functions to call redraw or\n  loop which will run draw, which can update the screen\n  properly. This means that when no-loop has been called, no drawing\n  can happen, and functions like save-frame may not be used.\n\n  Note that if the sketch is resized, redraw will be called to\n  update the sketch, even after no-oop has been\n  specified. Otherwise, the sketch would enter an odd state until\n  loop was called."}, minute {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "minute()", :column 3, :requires-bindings false, :line 2415, :end-line 2415, :arglists (quote ([])), :doc "Returns the current minute as a value from 0 - 59"}, :added "1.0", :name quil.core/minute, :variadic false, :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "minute()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 2409, :end-line 2415, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current minute as a value from 0 - 59"}, text {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([s x y] [s x y z] [s x1 y1 x2 y2]), :arglists ([s x y] [s x y z] [s x1 y1 x2 y2]), :arglists-meta (nil nil nil)}, :processing-name "text()", :column 3, :requires-bindings true, :line 4022, :end-line 4022, :arglists (quote ([s x y] [s x y z] [s x1 y1 x2 y2])), :doc "Draws text to the screen in the position specified by the x and y\n  parameters and the optional z parameter. A default font will be used\n  unless a font is set with the text-font fn. Change the color of the\n  text with the fill fn. The text displays in relation to the\n  text-align fn, which gives the option to draw to the left, right, and\n  center of the coordinates.\n\n  The x1, y1, x2 and y2 parameters define a\n  rectangular area to display within and may only be used with string\n  data. For text drawn inside a rectangle, the coordinates are\n  interpreted based on the current rect-mode setting."}, :added "1.0", :name quil.core/text, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([s x y] [s x y z] [s x1 y1 x2 y2]), :arglists ([s x y] [s x y z] [s x1 y1 x2 y2]), :arglists-meta (nil nil nil)}, :processing-name "text()", :method-params ([s x y] [s x y z] [s x1 y1 x2 y2]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 4016, :end-line 4022, :max-fixed-arity 5, :fn-var true, :arglists ([s x y] [s x y z] [s x1 y1 x2 y2]), :doc "Draws text to the screen in the position specified by the x and y\n  parameters and the optional z parameter. A default font will be used\n  unless a font is set with the text-font fn. Change the color of the\n  text with the fill fn. The text displays in relation to the\n  text-align fn, which gives the option to draw to the left, right, and\n  center of the coordinates.\n\n  The x1, y1, x2 and y2 parameters define a\n  rectangular area to display within and may only be used with string\n  data. For text drawn inside a rectangle, the coordinates are\n  interpreted based on the current rect-mode setting."}, available-fonts {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 18, :processing-name "PFont.list()", :column 3, :requires-bindings false, :line 492, :end-line 492, :arglists (quote ([])), :doc "A sequence of strings representing the fonts on this system\n  available for use.\n\n  Because of limitations in Java, not all fonts can be used and some\n  might work with one operating system and not others. When sharing a\n  sketch with other people or posting it on the web, you may need to\n  include a .ttf or .otf version of your font in the data directory of\n  the sketch because other people might not have the font installed on\n  their computer. Only fonts that can legally be distributed should be\n  included with a sketch."}, :added "1.0", :name quil.core/available-fonts, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 18, :processing-name "PFont.list()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 486, :end-line 492, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "A sequence of strings representing the fonts on this system\n  available for use.\n\n  Because of limitations in Java, not all fonts can be used and some\n  might work with one operating system and not others. When sharing a\n  sketch with other people or posting it on the web, you may need to\n  include a .ttf or .otf version of your font in the data directory of\n  the sketch because other people might not have the font installed on\n  their computer. Only fonts that can legally be distributed should be\n  included with a sketch."}, rect-modes {:name quil.core/rect-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 63, :end-column 12, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 63, :column 2, :end-line 63, :end-column 12}}, THIRD-PI {:name quil.core/THIRD-PI, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 79, :column 1, :end-line 79, :end-column 14, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 79, :column 6, :end-line 79, :end-column 14}}, binary {:category "Data", :protocol-inline nil, :meta {:category "Data", :require-binding false, :added "1.0", :subcategory "Conversion", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([val] [val num-digits]), :arglists ([val] [val num-digits]), :arglists-meta (nil nil)}, :processing-name "binary()", :column 3, :line 762, :end-line 762, :arglists (quote ([val] [val num-digits])), :doc "Returns a string representing the binary value of an int, char or\n  byte. When converting an int to a string, it is possible to specify\n  the number of digits used."}, :require-binding false, :added "1.0", :name quil.core/binary, :variadic false, :subcategory "Conversion", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([val] [val num-digits]), :arglists ([val] [val num-digits]), :arglists-meta (nil nil)}, :processing-name "binary()", :method-params ([val] [val num-digits]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 756, :end-line 762, :max-fixed-arity 2, :fn-var true, :arglists ([val] [val num-digits]), :doc "Returns a string representing the binary value of an int, char or\n  byte. When converting an int to a string, it is possible to specify\n  the number of digits used."}, pop-matrix {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "popMatrix()", :column 3, :requires-bindings true, :line 2876, :end-line 2876, :arglists (quote ([])), :doc "Pops the current transformation matrix off the matrix\n  stack. Understanding pushing and popping requires understanding the\n  concept of a matrix stack. The push-matrix fn saves the current\n  coordinate system to the stack and pop-matrix restores the prior\n  coordinate system. push-matrix and pop-matrix are used in conjuction\n  with the other transformation methods and may be embedded to control\n  the scope of the transformations."}, :added "1.0", :name quil.core/pop-matrix, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "popMatrix()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2870, :end-line 2876, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Pops the current transformation matrix off the matrix\n  stack. Understanding pushing and popping requires understanding the\n  concept of a matrix stack. The push-matrix fn saves the current\n  coordinate system to the stack and pop-matrix restores the prior\n  coordinate system. push-matrix and pop-matrix are used in conjuction\n  with the other transformation methods and may be embedded to control\n  the scope of the transformations."}, ceil {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "ceil()", :column 3, :requires-bindings false, :line 973, :end-line 973, :arglists (quote ([n])), :doc "Calculates the closest int value that is greater than or equal to\n  the value of the parameter. For example, (ceil 9.03) returns the\n  value 10."}, :added "1.0", :name quil.core/ceil, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "ceil()", :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 967, :end-line 973, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Calculates the closest int value that is greater than or equal to\n  the value of the parameter. For example, (ceil 9.03) returns the\n  value 10."}, key-code {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Keyboard", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "keyCode", :column 3, :requires-bindings true, :line 2094, :end-line 2094, :arglists (quote ([])), :doc "The variable keyCode is used to detect special keys such as the UP,\n  DOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT. When checking\n  for these keys, it's first necessary to check and see if the key is\n  coded. This is done with the conditional (= (key) CODED).\n\n  The keys included in the ASCII specification (BACKSPACE, TAB, ENTER,\n  RETURN, ESC, and DELETE) do not require checking to see if they key\n  is coded, and you should simply use the key variable instead of\n  key-code If you're making cross-platform projects, note that the\n  ENTER key is commonly used on PCs and Unix and the RETURN key is\n  used instead on Macintosh. Check for both ENTER and RETURN to make\n  sure your program will work for all platforms.\n\n  For users familiar with Java, the values for UP and DOWN are simply\n  shorter versions of Java's KeyEvent.VK_UP and\n  KeyEvent.VK_DOWN. Other keyCode values can be found in the Java\n  KeyEvent reference."}, :added "1.0", :name quil.core/key-code, :variadic false, :subcategory "Keyboard", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "keyCode", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2088, :end-line 2094, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "The variable keyCode is used to detect special keys such as the UP,\n  DOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT. When checking\n  for these keys, it's first necessary to check and see if the key is\n  coded. This is done with the conditional (= (key) CODED).\n\n  The keys included in the ASCII specification (BACKSPACE, TAB, ENTER,\n  RETURN, ESC, and DELETE) do not require checking to see if they key\n  is coded, and you should simply use the key variable instead of\n  key-code If you're making cross-platform projects, note that the\n  ENTER key is commonly used on PCs and Unix and the RETURN key is\n  used instead on Macintosh. Check for both ENTER and RETURN to make\n  sure your program will work for all platforms.\n\n  For users familiar with Java, the values for UP and DOWN are simply\n  shorter versions of Java's KeyEvent.VK_UP and\n  KeyEvent.VK_DOWN. Other keyCode values can be found in the Java\n  KeyEvent reference."}, sphere {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "3D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "sphere()", :column 3, :requires-bindings true, :line 3773, :end-line 3773, :arglists (quote ([radius])), :doc "Generates a hollow ball made from tessellated triangles."}, :added "1.0", :name quil.core/sphere, :variadic false, :subcategory "3D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "sphere()", :method-params ([radius]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3767, :end-line 3773, :max-fixed-arity 1, :fn-var true, :arglists (quote ([radius])), :doc "Generates a hollow ball made from tessellated triangles."}, request-image {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "requestImage()", :column 3, :requires-bindings true, :line 3215, :end-line 3215, :arglists (quote ([filename])), :doc "This function load images on a separate thread so that your sketch\n  does not freeze while images load during setup. While the image is\n  loading, its width and height will be 0. If an error occurs while\n  loading the image, its width and height will be set to -1. You'll\n  know when the image has loaded properly because its width and height\n  will be greater than 0. Asynchronous image loading (particularly\n  when downloading from a server) can dramatically improve\n  performance."}, :added "1.0", :name quil.core/request-image, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "requestImage()", :method-params ([filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3209, :end-line 3215, :max-fixed-arity 1, :fn-var true, :arglists (quote ([filename])), :doc "This function load images on a separate thread so that your sketch\n  does not freeze while images load during setup. While the image is\n  loading, its width and height will be 0. If an error occurs while\n  loading the image, its width and height will be set to -1. You'll\n  know when the image has loaded properly because its width and height\n  will be greater than 0. Asynchronous image loading (particularly\n  when downloading from a server) can dramatically improve\n  performance."}, hue {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "hue()", :column 3, :requires-bindings true, :line 1990, :end-line 1990, :arglists (quote ([col])), :doc "Extracts the hue value from a color."}, :added "1.0", :name quil.core/hue, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "hue()", :method-params ([col]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1984, :end-line 1990, :max-fixed-arity 1, :fn-var true, :arglists (quote ([col])), :doc "Extracts the hue value from a color."}, background-int {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([rgb] [rgb alpha]), :arglists ([rgb] [rgb alpha]), :arglists-meta (nil nil)}, :processing-name "background()", :column 3, :requires-bindings true, :line 533, :end-line 533, :arglists (quote ([rgb] [rgb alpha])), :doc "Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts rgb to an int and alpha to a float."}, :added "1.0", :name quil.core/background-int, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([rgb] [rgb alpha]), :arglists ([rgb] [rgb alpha]), :arglists-meta (nil nil)}, :processing-name "background()", :method-params ([rgb] [rgb alpha]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 527, :end-line 533, :max-fixed-arity 2, :fn-var true, :arglists ([rgb] [rgb alpha]), :doc "Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts rgb to an int and alpha to a float."}, start-loop {:category "Structure", :protocol-inline nil, :meta {:category "Structure", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "loop()", :column 3, :requires-bindings true, :line 3854, :end-line 3854, :arglists (quote ([])), :doc "Causes Processing to continuously execute the code within\n  draw. If no-loop is called, the code in draw stops executing."}, :added "1.0", :name quil.core/start-loop, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "loop()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3848, :end-line 3854, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Causes Processing to continuously execute the code within\n  draw. If no-loop is called, the code in draw stops executing."}, no-fill? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 3978, :column 8, :end-line 3978, :end-column 16, :private true, :arglists (quote ([graphics])), :doc "Returns whether fill is disabled for current graphics."}, :private true, :name quil.core/no-fill?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :method-params ([graphics]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3978, :end-line 3978, :max-fixed-arity 1, :fn-var true, :arglists (quote ([graphics])), :doc "Returns whether fill is disabled for current graphics."}, curve-vertex {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :processing-name "curveVertex()", :column 3, :requires-bindings true, :line 1371, :end-line 1371, :arglists (quote ([x y] [x y z])), :doc "Specifies vertex coordinates for curves. This function may only be\n  used between begin-shape and end-shape and only when there is no\n  mode keyword specified to begin-shape. The first and last points in a\n  series of curve-vertex lines will be used to guide the beginning and\n  end of a the curve. A minimum of four points is required to draw a\n  tiny curve between the second and third points. Adding a fifth point\n  with curve-vertex will draw the curve between the second, third, and\n  fourth points. The curve-vertex function is an implementation of\n  Catmull-Rom splines."}, :added "1.0", :name quil.core/curve-vertex, :variadic false, :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :processing-name "curveVertex()", :method-params ([x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1365, :end-line 1371, :max-fixed-arity 3, :fn-var true, :arglists ([x y] [x y z]), :doc "Specifies vertex coordinates for curves. This function may only be\n  used between begin-shape and end-shape and only when there is no\n  mode keyword specified to begin-shape. The first and last points in a\n  series of curve-vertex lines will be used to guide the beginning and\n  end of a the curve. A minimum of four points is required to draw a\n  tiny curve between the second and third points. Adding a fifth point\n  with curve-vertex will draw the curve between the second, third, and\n  fourth points. The curve-vertex function is an implementation of\n  Catmull-Rom splines."}, state-atom {:category "State", :protocol-inline nil, :meta {:category "State", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :column 3, :requires-bindings true, :line 200, :end-line 200, :arglists (quote ([])), :doc "Retrieve sketch-specific state-atom. All changes to the\n  atom will be reflected in the state.\n\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (swap! (state-atom) update-in [:foo] inc)\n  (state :foo) ;=> 2"}, :added "1.0", :name quil.core/state-atom, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 195, :end-line 200, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Retrieve sketch-specific state-atom. All changes to the\n  atom will be reflected in the state.\n\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (swap! (state-atom) update-in [:foo] inc)\n  (state :foo) ;=> 2"}, load-image {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "loadImage()", :column 3, :requires-bindings true, :line 2276, :end-line 2276, :arglists (quote ([filename])), :doc "Loads an image into a variable of type PImage. Four types of\n  images ( .gif, .jpg, .tga, .png) images may be loaded. To load\n  correctly, images must be located in the data directory of the\n  current sketch. In most cases, load all images in setup to preload\n  them at the start of the program. Loading images inside draw will\n  reduce the speed of a program.\n\n  The filename parameter can also be a URL to a file found online.\n\n  If an image is not loaded successfully, the null value is returned\n  and an error message will be printed to the console. The error\n  message does not halt the program, however the null value may cause\n  a NullPointerException if your code does not check whether the value\n  returned from load-image is nil.\n\n  Depending on the type of error, a PImage object may still be\n  returned, but the width and height of the image will be set to\n  -1. This happens if bad image data is returned or cannot be decoded\n  properly. Sometimes this happens with image URLs that produce a 403\n  error or that redirect to a password prompt, because load-image\n  will attempt to interpret the HTML as image data."}, :added "1.0", :name quil.core/load-image, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "loadImage()", :method-params ([filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2270, :end-line 2276, :max-fixed-arity 1, :fn-var true, :arglists (quote ([filename])), :doc "Loads an image into a variable of type PImage. Four types of\n  images ( .gif, .jpg, .tga, .png) images may be loaded. To load\n  correctly, images must be located in the data directory of the\n  current sketch. In most cases, load all images in setup to preload\n  them at the start of the program. Loading images inside draw will\n  reduce the speed of a program.\n\n  The filename parameter can also be a URL to a file found online.\n\n  If an image is not loaded successfully, the null value is returned\n  and an error message will be printed to the console. The error\n  message does not halt the program, however the null value may cause\n  a NullPointerException if your code does not check whether the value\n  returned from load-image is nil.\n\n  Depending on the type of error, a PImage object may still be\n  returned, but the width and height of the image will be set to\n  -1. This happens if bad image data is returned or cannot be decoded\n  properly. Sometimes this happens with image URLs that produce a 403\n  error or that redirect to a password prompt, because load-image\n  will attempt to interpret the HTML as image data."}, bezier {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 12, :method-params ([x1 y1 cx1 cy1 cx2 cy2 x2 y2] [x1 y1 z1 cx1 cy1 cz1 cx2 cy2 cz2 x2 y2 z2]), :arglists ([x1 y1 cx1 cy1 cx2 cy2 x2 y2] [x1 y1 z1 cx1 cy1 cz1 cx2 cy2 cz2 x2 y2 z2]), :arglists-meta (nil nil)}, :processing-name "bezier()", :column 3, :requires-bindings true, :line 668, :end-line 668, :arglists (quote ([x1 y1 cx1 cy1 cx2 cy2 x2 y2] [x1 y1 z1 cx1 cy1 cz1 cx2 cy2 cz2 x2 y2 z2])), :doc "Draws a Bezier curve on the screen. These curves are defined by a\n  series of anchor and control points. The first two parameters\n  specify the first anchor point and the last two parameters specify\n  the other anchor point. The middle parameters specify the control\n  points which define the shape of the curve."}, :added "1.0", :name quil.core/bezier, :variadic false, :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 12, :method-params ([x1 y1 cx1 cy1 cx2 cy2 x2 y2] [x1 y1 z1 cx1 cy1 cz1 cx2 cy2 cz2 x2 y2 z2]), :arglists ([x1 y1 cx1 cy1 cx2 cy2 x2 y2] [x1 y1 z1 cx1 cy1 cz1 cx2 cy2 cz2 x2 y2 z2]), :arglists-meta (nil nil)}, :processing-name "bezier()", :method-params ([x1 y1 cx1 cy1 cx2 cy2 x2 y2] [x1 y1 z1 cx1 cy1 cz1 cx2 cy2 cz2 x2 y2 z2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 662, :end-line 668, :max-fixed-arity 12, :fn-var true, :arglists ([x1 y1 cx1 cy1 cx2 cy2 x2 y2] [x1 y1 z1 cx1 cy1 cz1 cx2 cy2 cz2 x2 y2 z2]), :doc "Draws a Bezier curve on the screen. These curves are defined by a\n  series of anchor and control points. The first two parameters\n  specify the first anchor point and the last two parameters specify\n  the other anchor point. The middle parameters specify the control\n  points which define the shape of the curve."}, smooth {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [level]), :arglists ([] [level]), :arglists-meta (nil nil)}, :processing-name "smooth()", :column 3, :requires-bindings true, :line 3726, :end-line 3726, :arglists (quote ([] [level])), :doc "Draws all geometry with smooth (anti-aliased) edges. This will slow\n  down the frame rate of the application, but will enhance the visual\n  refinement.\n\n  Clojure: must be called inside :settings function.\n  ClojureScript: can be called anywhere.\n\n  The level parameter (int) increases the level of smoothness with the\n  P2D and P3D renderers. This is the level of over sampling applied to\n  the graphics buffer. The value '2' will double the rendering size\n  before scaling it down to the display size. This is called '2x\n  anti-aliasing.' The value 4 is used for 4x anti-aliasing and 8 is\n  specified for 8x anti-aliasing. If level is set to 0, it will disable\n  all smoothing; it's the equivalent of the function noSmooth().\n  The maximum anti-aliasing level is determined by the hardware of the\n  machine that is running the software.\n\n  Note that smooth will also improve image quality of resized images."}, :added "1.0", :name quil.core/smooth, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [level]), :arglists ([] [level]), :arglists-meta (nil nil)}, :processing-name "smooth()", :method-params ([] [level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3720, :end-line 3726, :max-fixed-arity 1, :fn-var true, :arglists ([] [level]), :doc "Draws all geometry with smooth (anti-aliased) edges. This will slow\n  down the frame rate of the application, but will enhance the visual\n  refinement.\n\n  Clojure: must be called inside :settings function.\n  ClojureScript: can be called anywhere.\n\n  The level parameter (int) increases the level of smoothness with the\n  P2D and P3D renderers. This is the level of over sampling applied to\n  the graphics buffer. The value '2' will double the rendering size\n  before scaling it down to the display size. This is called '2x\n  anti-aliasing.' The value 4 is used for 4x anti-aliasing and 8 is\n  specified for 8x anti-aliasing. If level is set to 0, it will disable\n  all smoothing; it's the equivalent of the function noSmooth().\n  The maximum anti-aliasing level is determined by the hardware of the\n  machine that is running the software.\n\n  Note that smooth will also improve image quality of resized images."}, filter-modes {:name quil.core/filter-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 72, :end-column 14, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 72, :column 2, :end-line 72, :end-column 14}}, shear-x {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "shearX()", :column 3, :requires-bindings true, :line 3625, :end-line 3625, :arglists (quote ([angle])), :doc "Shears a shape around the x-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the radians() function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling (shear-x (/ PI 2)) and then (shear-x (/ PI 2)) is\n  the same as (shear-x PI). If shear-x is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, shear-x multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix fns."}, :added "1.0", :name quil.core/shear-x, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "shearX()", :method-params ([angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3619, :end-line 3625, :max-fixed-arity 1, :fn-var true, :arglists (quote ([angle])), :doc "Shears a shape around the x-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the radians() function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling (shear-x (/ PI 2)) and then (shear-x (/ PI 2)) is\n  the same as (shear-x PI). If shear-x is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, shear-x multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix fns."}, stroke-weight {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "strokeWeight()", :column 3, :requires-bindings true, :line 3946, :end-line 3946, :arglists (quote ([weight])), :doc "Sets the width of the stroke used for lines, points, and the border\n  around shapes. All widths are set in units of pixels. "}, :added "1.0", :name quil.core/stroke-weight, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "strokeWeight()", :method-params ([weight]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3940, :end-line 3946, :max-fixed-arity 1, :fn-var true, :arglists (quote ([weight])), :doc "Sets the width of the stroke used for lines, points, and the border\n  around shapes. All widths are set in units of pixels. "}, directional-light {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 20, :processing-name "directionalLight()", :column 3, :requires-bindings true, :line 1437, :end-line 1437, :arglists (quote ([r g b nx ny nz])), :doc "Adds a directional light. Directional light comes from one\n  direction and is stronger when hitting a surface squarely and weaker\n  if it hits at a gentle angle. After hitting a surface, a\n  directional lights scatters in all directions. Lights need to be\n  included in the draw fn to remain persistent in a looping\n  program. Placing them in the setup fn of a looping program will cause\n  them to only have an effect the first time through the loop. The\n  affect of the r, g, and b parameters is determined by the current\n  color mode. The nx, ny, and nz parameters specify the direction the\n  light is facing. For example, setting ny to -1 will cause the\n  geometry to be lit from below (the light is facing directly upward)"}, :added "1.0", :name quil.core/directional-light, :variadic false, :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 20, :processing-name "directionalLight()", :method-params ([r g b nx ny nz]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1431, :end-line 1437, :max-fixed-arity 6, :fn-var true, :arglists (quote ([r g b nx ny nz])), :doc "Adds a directional light. Directional light comes from one\n  direction and is stronger when hitting a surface squarely and weaker\n  if it hits at a gentle angle. After hitting a surface, a\n  directional lights scatters in all directions. Lights need to be\n  included in the draw fn to remain persistent in a looping\n  program. Placing them in the setup fn of a looping program will cause\n  them to only have an effect the first time through the loop. The\n  affect of the r, g, and b parameters is determined by the current\n  color mode. The nx, ny, and nz parameters specify the direction the\n  light is facing. For example, setting ny to -1 will cause the\n  geometry to be lit from below (the light is facing directly upward)"}, frame-rate {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "frameRate()", :column 3, :requires-bindings true, :line 1805, :end-line 1805, :arglists (quote ([new-rate])), :doc "Specifies a new target framerate (number of frames to be displayed every\n  second). If the processor is not fast enough to maintain the\n  specified rate, it will not be achieved. For example, the function\n  call (frame-rate 30) will attempt to refresh 30 times a second. It\n  is recommended to set the frame rate within setup. The default rate\n  is 60 frames per second."}, :added "1.0", :name quil.core/frame-rate, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "frameRate()", :method-params ([new-rate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1799, :end-line 1805, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new-rate])), :doc "Specifies a new target framerate (number of frames to be displayed every\n  second). If the processor is not fast enough to maintain the\n  specified rate, it will not be achieved. For example, the function\n  call (frame-rate 30) will attempt to refresh 30 times a second. It\n  is recommended to set the frame rate within setup. The default rate\n  is 60 frames per second."}, hour {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "hour()", :column 3, :requires-bindings false, :line 1978, :end-line 1978, :arglists (quote ([])), :doc "Returns the current hour as a value from 0 - 23."}, :added "1.0", :name quil.core/hour, :variadic false, :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "hour()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 1972, :end-line 1978, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current hour as a value from 0 - 23."}, fill-int {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([rgb] [rgb alpha]), :arglists ([rgb] [rgb alpha]), :arglists-meta (nil nil)}, :processing-name "fill()", :column 3, :requires-bindings true, :line 1669, :end-line 1669, :arglists (quote ([rgb] [rgb alpha])), :doc "Sets the color used to fill shapes."}, :added "1.0", :name quil.core/fill-int, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([rgb] [rgb alpha]), :arglists ([rgb] [rgb alpha]), :arglists-meta (nil nil)}, :processing-name "fill()", :method-params ([rgb] [rgb alpha]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1663, :end-line 1669, :max-fixed-arity 2, :fn-var true, :arglists ([rgb] [rgb alpha]), :doc "Sets the color used to fill shapes."}, atan {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "atan()", :column 3, :requires-bindings false, :line 459, :end-line 459, :arglists (quote ([n])), :doc "The inverse of tan, returns the arc tangent of a value. This\n  function expects the values in the range of -Infinity to\n  Infinity (exclusive) and values are returned in the range -PI/2 to\n  PI/2 ."}, :added "1.0", :name quil.core/atan, :variadic false, :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "atan()", :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 453, :end-line 459, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "The inverse of tan, returns the arc tangent of a value. This\n  function expects the values in the range of -Infinity to\n  Infinity (exclusive) and values are returned in the range -PI/2 to\n  PI/2 ."}, stroke-join-modes {:name quil.core/stroke-join-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 66, :end-column 19, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 66, :column 2, :end-line 66, :end-column 19}}, rotate-y {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "rotateY()", :column 3, :requires-bindings true, :line 3334, :end-line 3334, :arglists (quote ([angle])), :doc "Rotates a shape around the y-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the radians function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-y HALF-PI) and then (rotate-y HALF-PI) is\n  the same as (rotate-y PI). If rotate-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."}, :added "1.0", :name quil.core/rotate-y, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "rotateY()", :method-params ([angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3328, :end-line 3334, :max-fixed-arity 1, :fn-var true, :arglists (quote ([angle])), :doc "Rotates a shape around the y-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the radians function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate-y HALF-PI) and then (rotate-y HALF-PI) is\n  the same as (rotate-y PI). If rotate-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function requires either the :p3d or :opengl renderer."}, day {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "day()", :column 3, :requires-bindings false, :line 1390, :end-line 1390, :arglists (quote ([])), :doc "Get the current day of the month (1 through 31)."}, :added "1.0", :name quil.core/day, :variadic false, :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "day()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 1384, :end-line 1390, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Get the current day of the month (1 through 31)."}, point-light {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "pointLight()", :column 3, :requires-bindings true, :line 2860, :end-line 2860, :arglists (quote ([r g b x y z])), :doc "Adds a point light. Lights need to be included in the draw() to\n  remain persistent in a looping program. Placing them in the setup()\n  of a looping program will cause them to only have an effect the\n  first time through the loop. The affect of the r, g, and b\n  parameters is determined by the current color mode. The x, y, and z\n  parameters set the position of the light"}, :added "1.0", :name quil.core/point-light, :variadic false, :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "pointLight()", :method-params ([r g b x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2854, :end-line 2860, :max-fixed-arity 6, :fn-var true, :arglists (quote ([r g b x y z])), :doc "Adds a point light. Lights need to be included in the draw() to\n  remain persistent in a looping program. Placing them in the setup()\n  of a looping program will cause them to only have an effect the\n  first time through the loop. The affect of the r, g, and b\n  parameters is determined by the current color mode. The x, y, and z\n  parameters set the position of the light"}, pmouse-x {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "pmouseX", :column 3, :requires-bindings true, :line 2822, :end-line 2822, :arglists (quote ([])), :doc "Horizontal coordinate of the mouse in the previous frame"}, :added "1.0", :name quil.core/pmouse-x, :variadic false, :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "pmouseX", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2816, :end-line 2822, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Horizontal coordinate of the mouse in the previous frame"}, get-sketch-by-id {:category nil, :protocol-inline nil, :meta {:category nil, :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :processing-name "getSketchById()", :column 3, :requires-bindings true, :line 186, :end-line 186, :arglists (quote ([id])), :doc "Returns sketch object by id of canvas element of sketch."}, :added "1.0", :name quil.core/get-sketch-by-id, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :processing-name "getSketchById()", :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 180, :end-line 186, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Returns sketch object by id of canvas element of sketch."}, stroke {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([rgb] [rgb alpha] [x y z] [x y z a]), :arglists ([rgb] [rgb alpha] [x y z] [x y z a]), :arglists-meta (nil nil nil nil)}, :processing-name "stroke()", :column 3, :requires-bindings true, :line 3892, :end-line 3892, :arglists (quote ([rgb] [rgb alpha] [x y z] [x y z a])), :doc "Sets the color used to draw lines and borders around shapes. This\n  color is either specified in terms of the RGB or HSB color depending\n  on the current color-mode (the default color space is RGB, with\n  each value in the range from 0 to 255)."}, :added "1.0", :name quil.core/stroke, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([rgb] [rgb alpha] [x y z] [x y z a]), :arglists ([rgb] [rgb alpha] [x y z] [x y z a]), :arglists-meta (nil nil nil nil)}, :processing-name "stroke()", :method-params ([rgb] [rgb alpha] [x y z] [x y z a]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :requires-bindings true, :line 3886, :end-line 3892, :max-fixed-arity 4, :fn-var true, :arglists ([rgb] [rgb alpha] [x y z] [x y z a]), :doc "Sets the color used to draw lines and borders around shapes. This\n  color is either specified in terms of the RGB or HSB color depending\n  on the current color-mode (the default color space is RGB, with\n  each value in the range from 0 to 255)."}, mouse-pressed? {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :processing-name "mousePressed", :column 3, :requires-bindings true, :line 2509, :end-line 2509, :arglists (quote ([])), :doc "Variable storing if a mouse button is pressed. The value of the\n  system variable mousePressed is true if a mouse button is pressed\n  and false if a button is not pressed."}, :added "1.0", :name quil.core/mouse-pressed?, :variadic false, :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :processing-name "mousePressed", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2503, :end-line 2509, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Variable storing if a mouse button is pressed. The value of the\n  system variable mousePressed is true if a mouse button is pressed\n  and false if a button is not pressed."}, key-pressed? {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Keyboard", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "keyPressed", :column 3, :requires-bindings true, :line 2121, :end-line 2121, :arglists (quote ([])), :doc "true if any key is currently pressed, false otherwise."}, :added "1.0", :name quil.core/key-pressed?, :variadic false, :subcategory "Keyboard", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "keyPressed", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2115, :end-line 2121, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "true if any key is currently pressed, false otherwise."}, quadratic-vertex {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "2.0", :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([cx cy x3 y3] [cx cy cz x3 y3 z3]), :arglists ([cx cy x3 y3] [cx cy cz x3 y3 z3]), :arglists-meta (nil nil)}, :processing-name "quadraticVertex()", :column 3, :requires-bindings true, :line 3019, :end-line 3019, :arglists (quote ([cx cy x3 y3] [cx cy cz x3 y3 z3])), :doc "Specifies vertex coordinates for quadratic Bezier curves. Each call to\n  quadratic-vertex defines the position of one control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or shape.\n  The first time quadratic-vertex is used within a begin-shape call, it\n  must be prefaced with a call to vertex to set the first anchor point.\n  This function must be used between begin-shape and end-shape and only\n  when there is no MODE parameter specified to begin-shape. Using the 3D\n  version requires rendering with :p3d."}, :added "2.0", :name quil.core/quadratic-vertex, :variadic false, :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([cx cy x3 y3] [cx cy cz x3 y3 z3]), :arglists ([cx cy x3 y3] [cx cy cz x3 y3 z3]), :arglists-meta (nil nil)}, :processing-name "quadraticVertex()", :method-params ([cx cy x3 y3] [cx cy cz x3 y3 z3]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3013, :end-line 3019, :max-fixed-arity 6, :fn-var true, :arglists ([cx cy x3 y3] [cx cy cz x3 y3 z3]), :doc "Specifies vertex coordinates for quadratic Bezier curves. Each call to\n  quadratic-vertex defines the position of one control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or shape.\n  The first time quadratic-vertex is used within a begin-shape call, it\n  must be prefaced with a call to vertex to set the first anchor point.\n  This function must be used between begin-shape and end-shape and only\n  when there is no MODE parameter specified to begin-shape. Using the 3D\n  version requires rendering with :p3d."}, texture-wrap-modes {:name quil.core/texture-wrap-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 71, :end-column 20, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 71, :column 2, :end-line 71, :end-column 20}}, noise-seed {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "noiseSeed()", :column 3, :requires-bindings true, :line 2635, :end-line 2635, :arglists (quote ([val])), :doc "Sets the seed value for noise. By default, noise produces different\n  results each time the program is run. Set the value parameter to a\n  constant to return the same pseudo-random numbers each time the\n  software is run."}, :added "1.0", :name quil.core/noise-seed, :variadic false, :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "noiseSeed()", :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2629, :end-line 2635, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Sets the seed value for noise. By default, noise produces different\n  results each time the program is run. Set the value parameter to a\n  constant to return the same pseudo-random numbers each time the\n  software is run."}, apply-matrix {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "applyMatrix()", :column 3, :requires-bindings true, :line 397, :end-line 397, :arglists (quote ([n00 n01 n02 n03 n10 n11 n12 n13 n20 n21 n22 n23 n30 n31 n32 n33])), :doc "Multiplies the current matrix by the one specified through the\n  parameters. This is very slow because it will try to calculate the\n  inverse of the transform, so avoid it whenever possible. The\n  equivalent function in OpenGL is glMultMatrix()."}, :added "1.0", :name quil.core/apply-matrix, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "applyMatrix()", :method-params ([n00 n01 n02 n03 n10 n11 n12 n13 n20 n21 n22 n23 n30 n31 n32 n33]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 391, :end-line 397, :max-fixed-arity 16, :fn-var true, :arglists (quote ([n00 n01 n02 n03 n10 n11 n12 n13 n20 n21 n22 n23 n30 n31 n32 n33])), :doc "Multiplies the current matrix by the one specified through the\n  parameters. This is very slow because it will try to calculate the\n  inverse of the transform, so avoid it whenever possible. The\n  equivalent function in OpenGL is glMultMatrix()."}, copy {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([[sx sy swidth sheight] [dx dy dwidth dheight]] [src-img [sx sy swidth sheight] [dx dy dwidth dheight]] [src-img dest-img [sx sy swidth sheight] [dx dy dwidth dheight]]), :arglists ([[sx sy swidth sheight] [dx dy dwidth dheight]] [src-img [sx sy swidth sheight] [dx dy dwidth dheight]] [src-img dest-img [sx sy swidth sheight] [dx dy dwidth dheight]]), :arglists-meta (nil nil nil)}, :processing-name "copy()", :column 3, :requires-bindings true, :line 1080, :end-line 1080, :arglists (quote ([[sx sy swidth sheight] [dx dy dwidth dheight]] [src-img [sx sy swidth sheight] [dx dy dwidth dheight]] [src-img dest-img [sx sy swidth sheight] [dx dy dwidth dheight]])), :doc "Copies a region of pixels from the one image to another. If src-img\n  is not specified it defaults to current-graphics. If dest-img is not\n  specified - it defaults to current-graphics. If the source\n  and destination regions aren't the same size, it will automatically\n  resize the source pixels to fit the specified target region. No\n  alpha information is used in the process, however if the source\n  image has an alpha channel set, it will be copied as well. "}, :added "1.0", :name quil.core/copy, :variadic false, :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([[sx sy swidth sheight] [dx dy dwidth dheight]] [src-img [sx sy swidth sheight] [dx dy dwidth dheight]] [src-img dest-img [sx sy swidth sheight] [dx dy dwidth dheight]]), :arglists ([[sx sy swidth sheight] [dx dy dwidth dheight]] [src-img [sx sy swidth sheight] [dx dy dwidth dheight]] [src-img dest-img [sx sy swidth sheight] [dx dy dwidth dheight]]), :arglists-meta (nil nil nil)}, :processing-name "copy()", :method-params ([[sx sy swidth sheight] [dx dy dwidth dheight]] [src-img [sx sy swidth sheight] [dx dy dwidth dheight]] [src-img dest-img [sx sy swidth sheight] [dx dy dwidth dheight]]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 1074, :end-line 1080, :max-fixed-arity 4, :fn-var true, :arglists ([[sx sy swidth sheight] [dx dy dwidth dheight]] [src-img [sx sy swidth sheight] [dx dy dwidth dheight]] [src-img dest-img [sx sy swidth sheight] [dx dy dwidth dheight]]), :doc "Copies a region of pixels from the one image to another. If src-img\n  is not specified it defaults to current-graphics. If dest-img is not\n  specified - it defaults to current-graphics. If the source\n  and destination regions aren't the same size, it will automatically\n  resize the source pixels to fit the specified target region. No\n  alpha information is used in the process, however if the source\n  image has an alpha channel set, it will be copied as well. "}, begin-shape {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [mode]), :arglists ([] [mode]), :arglists-meta (nil nil)}, :processing-name "beginShape()", :column 3, :requires-bindings true, :line 636, :end-line 636, :arglists (quote ([] [mode])), :doc "Enables the creation of complex forms. begin-shape begins recording\n  vertices for a shape and end-shape stops recording. Use the mode\n  keyword to specify which shape create from the provided\n  vertices. With no mode specified, the shape can be any irregular\n  polygon.\n\n  The available mode keywords are :points, :lines, :triangles,\n                                  :triangle-fan, :triangle-strip,\n                                  :quads, :quad-strip.\n\n  After calling the begin-shape function, a series of vertex commands\n  must follow. To stop drawing the shape, call end-shape. The vertex\n  function with two parameters specifies a position in 2D and the\n  vertex function with three parameters specifies a position in\n  3D. Each shape will be outlined with the current stroke color and\n  filled with the fill color.\n\n  Transformations such as translate, rotate, and scale do not work\n  within begin-shape. It is also not possible to use other shapes,\n  such as ellipse or rect within begin-shape."}, :added "1.0", :name quil.core/begin-shape, :variadic false, :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [mode]), :arglists ([] [mode]), :arglists-meta (nil nil)}, :processing-name "beginShape()", :method-params ([] [mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 630, :end-line 636, :max-fixed-arity 1, :fn-var true, :arglists ([] [mode]), :doc "Enables the creation of complex forms. begin-shape begins recording\n  vertices for a shape and end-shape stops recording. Use the mode\n  keyword to specify which shape create from the provided\n  vertices. With no mode specified, the shape can be any irregular\n  polygon.\n\n  The available mode keywords are :points, :lines, :triangles,\n                                  :triangle-fan, :triangle-strip,\n                                  :quads, :quad-strip.\n\n  After calling the begin-shape function, a series of vertex commands\n  must follow. To stop drawing the shape, call end-shape. The vertex\n  function with two parameters specifies a position in 2D and the\n  vertex function with three parameters specifies a position in\n  3D. Each shape will be outlined with the current stroke color and\n  filled with the fill color.\n\n  Transformations such as translate, rotate, and scale do not work\n  within begin-shape. It is also not possible to use other shapes,\n  such as ellipse or rect within begin-shape."}, set-state! {:category "State", :protocol-inline nil, :meta {:category "State", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(state-vals)], :arglists ([& state-vals]), :arglists-meta (nil)}, :column 3, :requires-bindings true, :line 237, :end-line 237, :arglists (quote ([& state-vals])), :doc "Set sketch-specific state. May only be called once (ideally in the\n  setup fn).  Subsequent calls have no effect.\n\n  Example:\n  (set-state! :foo 1 :bar (atom true) :baz (/ (width) 2))"}, :added "1.0", :name quil.core/set-state!, :variadic true, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(state-vals)], :arglists ([& state-vals]), :arglists-meta (nil)}, :method-params [(state-vals)], :protocol-impl nil, :arglists-meta (nil), :column 1, :requires-bindings true, :line 232, :end-line 237, :max-fixed-arity 0, :fn-var true, :arglists ([& state-vals]), :doc "Set sketch-specific state. May only be called once (ideally in the\n  setup fn).  Subsequent calls have no effect.\n\n  Example:\n  (set-state! :foo 1 :bar (atom true) :baz (/ (width) 2))"}, stroke-join {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "strokeJoin()", :column 3, :requires-bindings true, :line 3928, :end-line 3928, :arglists (quote ([join-mode])), :doc "Sets the style of the joints which connect line\n  segments. These joints are either mitered, beveled, or rounded and\n  specified with the corresponding parameters :miter, :bevel, and\n  :round. The default joint is :miter.\n\n  This function is not available with the :p2d, :p3d, or :opengl\n  renderers."}, :added "1.0", :name quil.core/stroke-join, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "strokeJoin()", :method-params ([join-mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3922, :end-line 3928, :max-fixed-arity 1, :fn-var true, :arglists (quote ([join-mode])), :doc "Sets the style of the joints which connect line\n  segments. These joints are either mitered, beveled, or rounded and\n  specified with the corresponding parameters :miter, :bevel, and\n  :round. The default joint is :miter.\n\n  This function is not available with the :p2d, :p3d, or :opengl\n  renderers."}, cos {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "cos()", :column 3, :requires-bindings false, :line 1106, :end-line 1106, :arglists (quote ([angle])), :doc "Calculates the cosine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  Math/PI*2). Values are returned in the range -1 to 1."}, :added "1.0", :name quil.core/cos, :variadic false, :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "cos()", :method-params ([angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 1100, :end-line 1106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([angle])), :doc "Calculates the cosine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  Math/PI*2). Values are returned in the range -1 to 1."}, curve-tightness {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 18, :processing-name "curveTightness()", :column 3, :requires-bindings true, :line 1353, :end-line 1353, :arglists (quote ([ti])), :doc "Modifies the quality of forms created with curve and\n  curve-vertex. The parameter squishy determines how the curve fits\n  to the vertex points. The value 0.0 is the default value for\n  squishy (this value defines the curves to be Catmull-Rom splines)\n  and the value 1.0 connects all the points with straight\n  lines. Values within the range -5.0 and 5.0 will deform the curves\n  but will leave them recognizable and as values increase in\n  magnitude, they will continue to deform."}, :added "1.0", :name quil.core/curve-tightness, :variadic false, :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 18, :processing-name "curveTightness()", :method-params ([ti]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1347, :end-line 1353, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ti])), :doc "Modifies the quality of forms created with curve and\n  curve-vertex. The parameter squishy determines how the curve fits\n  to the vertex points. The value 0.0 is the default value for\n  squishy (this value defines the curves to be Catmull-Rom splines)\n  and the value 1.0 connects all the points with straight\n  lines. Values within the range -5.0 and 5.0 will deform the curves\n  but will leave them recognizable and as values increase in\n  magnitude, they will continue to deform."}, tan {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "tan()", :column 3, :requires-bindings false, :line 3958, :end-line 3958, :arglists (quote ([angle])), :doc "Calculates the ratio of the sine and cosine of an angle. This\n  function expects the values of the angle parameter to be provided in\n  radians (values from 0 to PI*2). Values are returned in the range\n  infinity to -infinity."}, :added "1.0", :name quil.core/tan, :variadic false, :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "tan()", :method-params ([angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 3952, :end-line 3958, :max-fixed-arity 1, :fn-var true, :arglists (quote ([angle])), :doc "Calculates the ratio of the sine and cosine of an angle. This\n  function expects the values of the angle parameter to be provided in\n  radians (values from 0 to PI*2). Values are returned in the range\n  infinity to -infinity."}, triangle {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "triangle()", :column 3, :requires-bindings true, :line 4355, :end-line 4355, :arglists (quote ([x1 y1 x2 y2 x3 y3])), :doc "A triangle is a plane created by connecting three points. The first\n  two arguments specify the first point, the middle two arguments\n  specify the second point, and the last two arguments specify the\n  third point."}, :added "1.0", :name quil.core/triangle, :variadic false, :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "triangle()", :method-params ([x1 y1 x2 y2 x3 y3]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4349, :end-line 4355, :max-fixed-arity 6, :fn-var true, :arglists (quote ([x1 y1 x2 y2 x3 y3])), :doc "A triangle is a plane created by connecting three points. The first\n  two arguments specify the first point, the middle two arguments\n  specify the second point, and the last two arguments specify the\n  third point."}, emissive {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c] [r g b]), :arglists ([c] [r g b]), :arglists-meta (nil nil)}, :processing-name "emissive()", :column 3, :requires-bindings true, :line 1537, :end-line 1537, :arglists (quote ([c] [r g b])), :doc "Sets the emissive color of the material used for drawing shapes\n  drawn to the screen. Used in combination with ambient, specular, and\n  shininess in setting the material properties of shapes.\n\n  If passed one arg - it is assumed to be an int (i.e. a color),\n  multiple args are converted to floats."}, :added "1.0", :name quil.core/emissive, :variadic false, :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c] [r g b]), :arglists ([c] [r g b]), :arglists-meta (nil nil)}, :processing-name "emissive()", :method-params ([c] [r g b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1531, :end-line 1537, :max-fixed-arity 3, :fn-var true, :arglists ([c] [r g b]), :doc "Sets the emissive color of the material used for drawing shapes\n  drawn to the screen. Used in combination with ambient, specular, and\n  shininess in setting the material properties of shapes.\n\n  If passed one arg - it is assumed to be an int (i.e. a color),\n  multiple args are converted to floats."}, clear-no-fill-cljs {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 1635, :column 8, :end-line 1635, :end-column 26, :private true, :arglists (quote ([graphics])), :doc "Sets custom property on graphcis object indicating that it has\n  fill color."}, :private true, :name quil.core/clear-no-fill-cljs, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 26, :method-params ([graphics]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1635, :end-line 1635, :max-fixed-arity 1, :fn-var true, :arglists (quote ([graphics])), :doc "Sets custom property on graphcis object indicating that it has\n  fill color."}, sketch {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(opts)], :arglists ([& opts]), :arglists-meta (nil)}, :column 3, :requires-bindings false, :line 4572, :end-line 4572, :arglists (quote ([& opts])), :doc "Create and start a new visualisation applet. Can be used to create\n  new sketches programmatically. See documentation for 'defsketch' for\n  list of available options."}, :added "1.0", :name quil.core/sketch, :variadic true, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(opts)], :arglists ([& opts]), :arglists-meta (nil)}, :method-params [(opts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :requires-bindings false, :line 4568, :end-line 4572, :max-fixed-arity 0, :fn-var true, :arglists ([& opts]), :doc "Create and start a new visualisation applet. Can be used to create\n  new sketches programmatically. See documentation for 'defsketch' for\n  list of available options."}, color {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([gray] [gray alpha] [r g b] [r g b a]), :arglists ([gray] [gray alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "color()", :column 3, :requires-bindings true, :line 987, :end-line 987, :arglists (quote ([gray] [gray alpha] [r g b] [r g b a])), :doc "Creates an integer representation of a color The parameters are\n  interpreted as RGB or HSB values depending on the current\n  color-mode. The default mode is RGB values from 0 to 255 and\n  therefore, the function call (color 255 204 0) will return a bright\n  yellow. Args are cast to floats.\n\n  r - red or hue value\n  g - green or saturation value\n  b - blue or brightness value\n  a - alpha value"}, :added "1.0", :name quil.core/color, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([gray] [gray alpha] [r g b] [r g b a]), :arglists ([gray] [gray alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "color()", :method-params ([gray] [gray alpha] [r g b] [r g b a]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :requires-bindings true, :line 981, :end-line 987, :max-fixed-arity 4, :fn-var true, :arglists ([gray] [gray alpha] [r g b] [r g b a]), :doc "Creates an integer representation of a color The parameters are\n  interpreted as RGB or HSB values depending on the current\n  color-mode. The default mode is RGB values from 0 to 255 and\n  therefore, the function call (color 255 204 0) will return a bright\n  yellow. Args are cast to floats.\n\n  r - red or hue value\n  g - green or saturation value\n  b - blue or brightness value\n  a - alpha value"}, arc {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "arc()", :column 3, :requires-bindings true, :line 423, :end-line 423, :arglists (quote ([x y width height start stop])), :doc "Draws an arc in the display window. Arcs are drawn along the outer\n  edge of an ellipse defined by the x, y, width and height\n  parameters. The origin or the arc's ellipse may be changed with the\n  ellipse-mode function. The start and stop parameters specify the\n  angles at which to draw the arc. The mode is either :open, :chord or :pie."}, :added "1.0", :name quil.core/arc, :variadic false, :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "arc()", :method-params ([x y width height start stop]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 417, :end-line 423, :max-fixed-arity 6, :fn-var true, :arglists (quote ([x y width height start stop])), :doc "Draws an arc in the display window. Arcs are drawn along the outer\n  edge of an ellipse defined by the x, y, width and height\n  parameters. The origin or the arc's ellipse may be changed with the\n  ellipse-mode function. The start and stop parameters specify the\n  angles at which to draw the arc. The mode is either :open, :chord or :pie."}, text-align {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([align] [align-x align-y]), :arglists ([align] [align-x align-y]), :arglists-meta (nil nil)}, :processing-name "textAlign()", :column 3, :requires-bindings true, :line 4050, :end-line 4050, :arglists (quote ([align] [align-x align-y])), :doc "Sets the current alignment for drawing text. Available modes are:\n\n  horizontal - :left, :center, and :right\n  vertical   - :top, :bottom, :center, and :baseline\n\n  An optional second parameter specifies the vertical alignment\n  mode. :baseline is the default. The :top and :center parameters are\n  straightforward. The :bottom parameter offsets the line based on the\n  current text-descent. For multiple lines, the final line will be\n  aligned to the bottom, with the previous lines appearing above it.\n\n  When using text with width and height parameters, :baseline is\n  ignored, and treated as :top. (Otherwise, text would by default draw\n  outside the box, since :baseline is the default setting. :baseline is\n  not a useful drawing mode for text drawn in a rectangle.)\n\n  The vertical alignment is based on the value of text-ascent, which\n  many fonts do not specify correctly. It may be necessary to use a\n  hack and offset by a few pixels by hand so that the offset looks\n  correct. To do this as less of a hack, use some percentage of\n  text-ascent or text-descent so that the hack works even if you\n  change the size of the font."}, :added "1.0", :name quil.core/text-align, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([align] [align-x align-y]), :arglists ([align] [align-x align-y]), :arglists-meta (nil nil)}, :processing-name "textAlign()", :method-params ([align] [align-x align-y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4044, :end-line 4050, :max-fixed-arity 2, :fn-var true, :arglists ([align] [align-x align-y]), :doc "Sets the current alignment for drawing text. Available modes are:\n\n  horizontal - :left, :center, and :right\n  vertical   - :top, :bottom, :center, and :baseline\n\n  An optional second parameter specifies the vertical alignment\n  mode. :baseline is the default. The :top and :center parameters are\n  straightforward. The :bottom parameter offsets the line based on the\n  current text-descent. For multiple lines, the final line will be\n  aligned to the bottom, with the previous lines appearing above it.\n\n  When using text with width and height parameters, :baseline is\n  ignored, and treated as :top. (Otherwise, text would by default draw\n  outside the box, since :baseline is the default setting. :baseline is\n  not a useful drawing mode for text drawn in a rectangle.)\n\n  The vertical alignment is based on the value of text-ascent, which\n  many fonts do not specify correctly. It may be necessary to use a\n  hack and offset by a few pixels by hand so that the offset looks\n  correct. To do this as less of a hack, use some percentage of\n  text-ascent or text-descent so that the hack works even if you\n  change the size of the font."}, text-width {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "textWidth()", :column 3, :requires-bindings true, :line 4248, :end-line 4248, :arglists (quote ([data])), :doc "Calculates and returns the width of any text string."}, :added "1.0", :name quil.core/text-width, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "textWidth()", :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4242, :end-line 4248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "Calculates and returns the width of any text string."}, mouse-x {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "mouseX", :column 3, :requires-bindings true, :line 2522, :end-line 2522, :arglists (quote ([])), :doc "Current horizontal coordinate of the mouse."}, :added "1.0", :name quil.core/mouse-x, :variadic false, :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "mouseX", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2516, :end-line 2522, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Current horizontal coordinate of the mouse."}, TWO-PI {:name quil.core/TWO-PI, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 81, :column 1, :end-line 81, :end-column 12, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 81, :column 6, :end-line 81, :end-column 12}}, mag {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b c]), :arglists ([a b] [a b c]), :arglists-meta (nil nil)}, :processing-name "mag()", :column 3, :requires-bindings false, :line 2345, :end-line 2345, :arglists (quote ([a b] [a b c])), :doc "Calculates the magnitude (or length) of a vector. A vector is a\n  direction in space commonly used in computer graphics and linear\n  algebra. Because it has no start position, the magnitude of a vector\n  can be thought of as the distance from coordinate (0,0) to its (x,y)\n  value. Therefore, mag is a shortcut for writing (dist 0 0 x y)."}, :added "1.0", :name quil.core/mag, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b c]), :arglists ([a b] [a b c]), :arglists-meta (nil nil)}, :processing-name "mag()", :method-params ([a b] [a b c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 2339, :end-line 2345, :max-fixed-arity 3, :fn-var true, :arglists ([a b] [a b c]), :doc "Calculates the magnitude (or length) of a vector. A vector is a\n  direction in space commonly used in computer graphics and linear\n  algebra. Because it has no start position, the magnitude of a vector\n  can be thought of as the distance from coordinate (0,0) to its (x,y)\n  value. Therefore, mag is a shortcut for writing (dist 0 0 x y)."}, exit {:category "Structure", :protocol-inline nil, :meta {:category "Structure", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "exit()", :column 3, :requires-bindings true, :line 1614, :end-line 1614, :arglists (quote ([])), :doc "Quits/stops/exits the program.  Rather than terminating\n  immediately, exit will cause the sketch to exit after draw has\n  completed (or after setup completes if called during the setup\n  method). "}, :added "1.0", :name quil.core/exit, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "exit()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1608, :end-line 1614, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Quits/stops/exits the program.  Rather than terminating\n  immediately, exit will cause the sketch to exit after draw has\n  completed (or after setup completes if called during the setup\n  method). "}, map-range {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "map()", :column 3, :requires-bindings false, :line 2364, :end-line 2364, :arglists (quote ([val low1 high1 low2 high2])), :doc "Re-maps a number from one range to another.\n\n  Numbers outside the range are not clamped to 0 and 1, because\n  out-of-range values are often intentional and useful."}, :added "1.0", :name quil.core/map-range, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "map()", :method-params ([val low1 high1 low2 high2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 2358, :end-line 2364, :max-fixed-arity 5, :fn-var true, :arglists (quote ([val low1 high1 low2 high2])), :doc "Re-maps a number from one range to another.\n\n  Numbers outside the range are not clamped to 0 and 1, because\n  out-of-range values are often intentional and useful."}, model-x {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "modelX()", :column 3, :requires-bindings true, :line 2427, :end-line 2427, :arglists (quote ([x y z])), :doc "Returns the three-dimensional x, y, z position in model space. This\n  returns the x value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The x value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."}, :added "1.0", :name quil.core/model-x, :variadic false, :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "modelX()", :method-params ([x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2421, :end-line 2427, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y z])), :doc "Returns the three-dimensional x, y, z position in model space. This\n  returns the x value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The x value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."}, sqrt {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "sqrt()", :column 3, :requires-bindings false, :line 3839, :end-line 3839, :arglists (quote ([a])), :doc "Calculates the square root of a number. The square root of a number\n  is always positive, even though there may be a valid negative\n  root. The square root s of number a is such that (= a (* s s)) . It\n  is the opposite of squaring."}, :added "1.0", :name quil.core/sqrt, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "sqrt()", :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 3833, :end-line 3839, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Calculates the square root of a number. The square root of a number\n  is always positive, even though there may be a valid negative\n  root. The square root s of number a is such that (= a (* s s)) . It\n  is the opposite of squaring."}, saturation {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "saturation()", :column 3, :requires-bindings true, :line 3389, :end-line 3389, :arglists (quote ([c])), :doc "Extracts the saturation value from a color."}, :added "1.0", :name quil.core/saturation, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "saturation()", :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3383, :end-line 3389, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Extracts the saturation value from a color."}, prc-print {:category "Output", :protocol-inline nil, :meta {:category "Output", :added "1.0", :subcategory "Text area", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :column 3, :require-bindings true, :line 171, :end-line 171, :arglists (quote ([msg])), :doc "Writes to the console area of the Processing environment.\n  This is often helpful for looking at the data a program is producing.\n  The companion function println() works like print(), but creates a new line of text for each call to the function.\n   Individual elements can be separated with quotes (\"\") and joined with the addition operator (+). "}, :added "1.0", :name quil.core/prc-print, :variadic false, :subcategory "Text area", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :require-bindings true, :line 166, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :doc "Writes to the console area of the Processing environment.\n  This is often helpful for looking at the data a program is producing.\n  The companion function println() works like print(), but creates a new line of text for each call to the function.\n   Individual elements can be separated with quotes (\"\") and joined with the addition operator (+). "}, text-font {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([font] [font size]), :arglists ([font] [font size]), :arglists-meta (nil nil)}, :processing-name "textFont()", :column 3, :requires-bindings true, :line 4115, :end-line 4115, :arglists (quote ([font] [font size])), :doc "Sets the current font that will be drawn with the text\n  function. Fonts must be loaded with load-font before it can be\n  used. This font will be used in all subsequent calls to the text\n  function. If no size parameter is input, the font will appear at its\n  original size until it is changed with text-size.\n\n  Because fonts are usually bitmaped, you should create fonts at the\n  sizes that will be used most commonly. Using textFont without the\n  size parameter will result in the cleanest-looking text.\n\n  With the default (JAVA2D) and PDF renderers, it's also possible to\n  enable the use of native fonts via the command\n  (hint :enable-native-fonts). This will produce vector text in JAVA2D\n  sketches and PDF output in cases where the vector data is available:\n  when the font is still installed, or the font is created via the\n  create-font fn"}, :added "1.0", :name quil.core/text-font, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([font] [font size]), :arglists ([font] [font size]), :arglists-meta (nil nil)}, :processing-name "textFont()", :method-params ([font] [font size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4109, :end-line 4115, :max-fixed-arity 2, :fn-var true, :arglists ([font] [font size]), :doc "Sets the current font that will be drawn with the text\n  function. Fonts must be loaded with load-font before it can be\n  used. This font will be used in all subsequent calls to the text\n  function. If no size parameter is input, the font will appear at its\n  original size until it is changed with text-size.\n\n  Because fonts are usually bitmaped, you should create fonts at the\n  sizes that will be used most commonly. Using textFont without the\n  size parameter will result in the cleanest-looking text.\n\n  With the default (JAVA2D) and PDF renderers, it's also possible to\n  enable the use of native fonts via the command\n  (hint :enable-native-fonts). This will produce vector text in JAVA2D\n  sketches and PDF output in cases where the vector data is available:\n  when the font is still installed, or the font is created via the\n  create-font fn"}, scale {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [sx sy] [sx sy sz]), :arglists ([s] [sx sy] [sx sy sz]), :arglists-meta (nil nil nil)}, :processing-name "scale()", :column 3, :requires-bindings true, :line 3438, :end-line 3438, :arglists (quote ([s] [sx sy] [sx sy sz])), :doc "Increases or decreases the size of a shape by expanding and\n  contracting vertices. Objects always scale from their relative\n  origin to the coordinate system. Scale values are specified as\n  decimal percentages. For example, the function call (scale 2)\n  increases the dimension of a shape by 200%. Transformations apply to\n  everything that happens after and subsequent calls to the function\n  multiply the effect. For example, calling (scale 2) and then\n  (scale 1.5) is the same as (scale 3). If scale is called within\n  draw, the transformation is reset when the loop begins again. Using\n  this fuction with the z parameter requires specfying :p3d or :opengl\n  as the renderer. This function can be further controlled by\n  push-matrix and pop-matrix."}, :added "1.0", :name quil.core/scale, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [sx sy] [sx sy sz]), :arglists ([s] [sx sy] [sx sy sz]), :arglists-meta (nil nil nil)}, :processing-name "scale()", :method-params ([s] [sx sy] [sx sy sz]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 3432, :end-line 3438, :max-fixed-arity 3, :fn-var true, :arglists ([s] [sx sy] [sx sy sz]), :doc "Increases or decreases the size of a shape by expanding and\n  contracting vertices. Objects always scale from their relative\n  origin to the coordinate system. Scale values are specified as\n  decimal percentages. For example, the function call (scale 2)\n  increases the dimension of a shape by 200%. Transformations apply to\n  everything that happens after and subsequent calls to the function\n  multiply the effect. For example, calling (scale 2) and then\n  (scale 1.5) is the same as (scale 3). If scale is called within\n  draw, the transformation is reset when the loop begins again. Using\n  this fuction with the z parameter requires specfying :p3d or :opengl\n  as the renderer. This function can be further controlled by\n  push-matrix and pop-matrix."}, no-stroke {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "noStroke()", :column 3, :requires-bindings true, :line 2729, :end-line 2729, :arglists (quote ([])), :doc "Disables drawing the stroke (outline). If both no-stroke and\n  no-fill are called, nothing will be drawn to the screen."}, :added "1.0", :name quil.core/no-stroke, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "noStroke()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2723, :end-line 2729, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Disables drawing the stroke (outline). If both no-stroke and\n  no-fill are called, nothing will be drawn to the screen."}, end-camera {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "endCamera()", :column 3, :requires-bindings true, :line 1555, :end-line 1555, :arglists (quote ([])), :doc "Unsets the matrix mode from the camera matrix. See begin-camera."}, :added "1.0", :name quil.core/end-camera, :variadic false, :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "endCamera()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1549, :end-line 1555, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Unsets the matrix mode from the camera matrix. See begin-camera."}, random-seed {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "randomSeed()", :column 3, :requires-bindings true, :line 3092, :end-line 3092, :arglists (quote ([w])), :doc "Sets the seed value for random. By default, random produces\n  different results each time the program is run. Set the value\n  parameter to a constant to return the same pseudo-random numbers\n  each time the software is run."}, :added "1.0", :name quil.core/random-seed, :variadic false, :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "randomSeed()", :method-params ([w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3086, :end-line 3092, :max-fixed-arity 1, :fn-var true, :arglists (quote ([w])), :doc "Sets the seed value for random. By default, random produces\n  different results each time the program is run. Set the value\n  parameter to a constant to return the same pseudo-random numbers\n  each time the software is run."}, model-z {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "modelZ()", :column 3, :requires-bindings true, :line 2457, :end-line 2457, :arglists (quote ([x y z])), :doc "Returns the three-dimensional x, y, z position in model space. This\n  returns the z value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The z value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."}, :added "1.0", :name quil.core/model-z, :variadic false, :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "modelZ()", :method-params ([x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2451, :end-line 2457, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y z])), :doc "Returns the three-dimensional x, y, z position in model space. This\n  returns the z value for a given coordinate based on the current set\n  of transformations (scale, rotate, translate, etc.) The z value can\n  be used to place an object in space relative to the location of the\n  original point once the transformations are no longer in use."}, light-specular {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :processing-name "lightSpecular()", :column 3, :requires-bindings true, :line 2210, :end-line 2210, :arglists (quote ([r g b])), :doc "Sets the specular color for lights. Like fill, it affects only the\n  elements which are created after it in the code. Specular refers to\n  light which bounces off a surface in a perferred direction (rather\n  than bouncing in all directions like a diffuse light) and is used\n  for creating highlights. The specular quality of a light interacts\n  with the specular material qualities set through the specular and\n  shininess functions."}, :added "1.0", :name quil.core/light-specular, :variadic false, :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :processing-name "lightSpecular()", :method-params ([r g b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2204, :end-line 2210, :max-fixed-arity 3, :fn-var true, :arglists (quote ([r g b])), :doc "Sets the specular color for lights. Like fill, it affects only the\n  elements which are created after it in the code. Specular refers to\n  light which bounces off a surface in a perferred direction (rather\n  than bouncing in all directions like a diffuse light) and is used\n  for creating highlights. The specular quality of a light interacts\n  with the specular material qualities set through the specular and\n  shininess functions."}, key-as-keyword {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.6", :subcategory "Keyboard", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :processing-name nil, :column 3, :requires-bindings true, :line 4747, :end-line 4747, :arglists (quote ([])), :doc "Returns a keyword representing the currently pressed key. Modifier\n  keys are represented as: :up, :down, :left, :right, :alt, :control,\n  :shift, :command, :f1-24"}, :added "1.6", :name quil.core/key-as-keyword, :variadic false, :subcategory "Keyboard", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :processing-name nil, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4742, :end-line 4747, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a keyword representing the currently pressed key. Modifier\n  keys are represented as: :up, :down, :left, :right, :alt, :control,\n  :shift, :command, :f1-24"}, dist {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :arglists ([x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :arglists-meta (nil nil)}, :processing-name "dist()", :column 3, :requires-bindings false, :line 1459, :end-line 1459, :arglists (quote ([x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2])), :doc "Calculates the distance between two points"}, :added "1.0", :name quil.core/dist, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :arglists ([x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :arglists-meta (nil nil)}, :processing-name "dist()", :method-params ([x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 1453, :end-line 1459, :max-fixed-arity 6, :fn-var true, :arglists ([x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :doc "Calculates the distance between two points"}, PI {:name quil.core/PI, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 77, :column 8, :end-line 77, :end-column 15, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 77, :column 13, :end-line 77, :end-column 15}}, norm {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "norm()", :column 3, :requires-bindings true, :line 2689, :end-line 2689, :arglists (quote ([val start stop])), :doc "Normalize a value to exist between 0 and 1 (inclusive)."}, :added "1.0", :name quil.core/norm, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "norm()", :method-params ([val start stop]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2683, :end-line 2689, :max-fixed-arity 3, :fn-var true, :arglists (quote ([val start stop])), :doc "Normalize a value to exist between 0 and 1 (inclusive)."}, end-shape {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [mode]), :arglists ([] [mode]), :arglists-meta (nil nil)}, :processing-name "endShape()", :column 3, :requires-bindings true, :line 1594, :end-line 1594, :arglists (quote ([] [mode])), :doc "May only be called after begin-shape. When end-shape is called,\n  all of image data defined since the previous call to begin-shape is\n  written into the image buffer. The keyword :close may be passed to\n  close the shape (to connect the beginning and the end)."}, :added "1.0", :name quil.core/end-shape, :variadic false, :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [mode]), :arglists ([] [mode]), :arglists-meta (nil nil)}, :processing-name "endShape()", :method-params ([] [mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1588, :end-line 1594, :max-fixed-arity 1, :fn-var true, :arglists ([] [mode]), :doc "May only be called after begin-shape. When end-shape is called,\n  all of image data defined since the previous call to begin-shape is\n  written into the image buffer. The keyword :close may be passed to\n  close the shape (to connect the beginning and the end)."}, fill {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "fill()", :column 3, :requires-bindings true, :line 1684, :end-line 1684, :arglists (quote ([rgb] [rgb alpha] [r g b] [r g b a])), :doc "Sets the color used to fill shapes."}, :added "1.0", :name quil.core/fill, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "fill()", :method-params ([rgb] [rgb alpha] [r g b] [r g b a]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :requires-bindings true, :line 1678, :end-line 1684, :max-fixed-arity 4, :fn-var true, :arglists ([rgb] [rgb alpha] [r g b] [r g b a]), :doc "Sets the color used to fill shapes."}, reset-matrix {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "resetMatrix()", :column 3, :requires-bindings true, :line 3232, :end-line 3232, :arglists (quote ([])), :doc "Replaces the current matrix with the identity matrix. The\n  equivalent function in OpenGL is glLoadIdentity()"}, :added "1.0", :name quil.core/reset-matrix, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "resetMatrix()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3226, :end-line 3232, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Replaces the current matrix with the identity matrix. The\n  equivalent function in OpenGL is glLoadIdentity()"}, emissive-float {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([float-val] [r g b]), :arglists ([float-val] [r g b]), :arglists-meta (nil nil)}, :processing-name "emissive()", :column 3, :requires-bindings true, :line 1509, :end-line 1509, :arglists (quote ([float-val] [r g b])), :doc "Sets the emissive color of the material used for drawing shapes\n drawn to the screen. Used in combination with ambient, specular, and\n shininess in setting the material properties of shapes. Converts all\n args to floats"}, :added "1.0", :name quil.core/emissive-float, :variadic false, :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([float-val] [r g b]), :arglists ([float-val] [r g b]), :arglists-meta (nil nil)}, :processing-name "emissive()", :method-params ([float-val] [r g b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1503, :end-line 1509, :max-fixed-arity 3, :fn-var true, :arglists ([float-val] [r g b]), :doc "Sets the emissive color of the material used for drawing shapes\n drawn to the screen. Used in combination with ambient, specular, and\n shininess in setting the material properties of shapes. Converts all\n args to floats"}, shape-modes {:name quil.core/shape-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 48, :end-column 13, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 48, :column 2, :end-line 48, :end-column 13}}, green {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "green()", :column 3, :requires-bindings true, :line 1865, :end-line 1865, :arglists (quote ([col])), :doc "Extracts the green value from a color, scaled to match current\n  color-mode. This value is always returned as a float so be careful\n  not to assign it to an int value."}, :added "1.0", :name quil.core/green, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "green()", :method-params ([col]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1859, :end-line 1865, :max-fixed-arity 1, :fn-var true, :arglists (quote ([col])), :doc "Extracts the green value from a color, scaled to match current\n  color-mode. This value is always returned as a float so be careful\n  not to assign it to an int value."}, HALF-PI {:name quil.core/HALF-PI, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 78, :column 1, :end-line 78, :end-column 13, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 78, :column 6, :end-line 78, :end-column 13}}, begin-contour {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "2.0", :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "beginContour()", :column 3, :requires-bindings true, :line 603, :end-line 603, :arglists (quote ([])), :doc "Use the begin-contour and end-contour function to create negative\n  shapes within shapes. These functions can only be within a\n  begin-shape/end-shape pair and they only work with the :p2d and :p3d\n  renderers."}, :added "2.0", :name quil.core/begin-contour, :variadic false, :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "beginContour()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 597, :end-line 603, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Use the begin-contour and end-contour function to create negative\n  shapes within shapes. These functions can only be within a\n  begin-shape/end-shape pair and they only work with the :p2d and :p3d\n  renderers."}, DEG-TO-RAD {:name quil.core/DEG-TO-RAD, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 83, :column 1, :end-line 83, :end-column 16, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 83, :column 6, :end-line 83, :end-column 16}}, pow {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "pow()", :column 3, :requires-bindings false, :line 2909, :end-line 2909, :arglists (quote ([num exponent])), :doc "Facilitates exponential expressions. The pow() function is an\n  efficient way of multiplying numbers by themselves (or their\n  reciprocal) in large quantities. For example, (pow 3 5) is\n  equivalent to the expression (* 3 3 3 3 3) and (pow 3 -5) is\n  equivalent to (/ 1 (* 3 3 3 3 3))."}, :added "1.0", :name quil.core/pow, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "pow()", :method-params ([num exponent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 2903, :end-line 2909, :max-fixed-arity 2, :fn-var true, :arglists (quote ([num exponent])), :doc "Facilitates exponential expressions. The pow() function is an\n  efficient way of multiplying numbers by themselves (or their\n  reciprocal) in large quantities. For example, (pow 3 5) is\n  equivalent to the expression (* 3 3 3 3 3) and (pow 3 -5) is\n  equivalent to (/ 1 (* 3 3 3 3 3))."}, box {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "3D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([size] [width height depth]), :arglists ([size] [width height depth]), :arglists-meta (nil nil)}, :processing-name "box()", :column 3, :requires-bindings true, :line 918, :end-line 918, :arglists (quote ([size] [width height depth])), :doc "Creates an extruded rectangle."}, :added "1.0", :name quil.core/box, :variadic false, :subcategory "3D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([size] [width height depth]), :arglists ([size] [width height depth]), :arglists-meta (nil nil)}, :processing-name "box()", :method-params ([size] [width height depth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 912, :end-line 918, :max-fixed-arity 3, :fn-var true, :arglists ([size] [width height depth]), :doc "Creates an extruded rectangle."}, exp {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "exp()", :column 3, :requires-bindings false, :line 1628, :end-line 1628, :arglists (quote ([val])), :doc "Returns Euler's number e (2.71828...) raised to the power of the\n  value parameter."}, :added "1.0", :name quil.core/exp, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "exp()", :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 1622, :end-line 1628, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Returns Euler's number e (2.71828...) raised to the power of the\n  value parameter."}, text-ascent {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Metrics", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "textAscent()", :column 3, :requires-bindings true, :line 4087, :end-line 4087, :arglists (quote ([])), :doc "Returns the ascent of the current font at its current size. This\n  information is useful for determining the height of the font above\n  the baseline. For example, adding the text-ascent and text-descent\n  values will give you the total height of the line."}, :added "1.0", :name quil.core/text-ascent, :variadic false, :subcategory "Metrics", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "textAscent()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4081, :end-line 4087, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the ascent of the current font at its current size. This\n  information is useful for determining the height of the font above\n  the baseline. For example, adding the text-ascent and text-descent\n  values will give you the total height of the line."}, tint-int {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([rgb] [rgb alpha]), :arglists ([rgb] [rgb alpha]), :arglists-meta (nil nil)}, :processing-name "tint()", :column 3, :requires-bindings true, :line 4284, :end-line 4284, :arglists (quote ([rgb] [rgb alpha])), :doc "Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."}, :added "1.0", :name quil.core/tint-int, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([rgb] [rgb alpha]), :arglists ([rgb] [rgb alpha]), :arglists-meta (nil nil)}, :processing-name "tint()", :method-params ([rgb] [rgb alpha]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4278, :end-line 4284, :max-fixed-arity 2, :fn-var true, :arglists ([rgb] [rgb alpha]), :doc "Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."}, shininess {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "shininess()", :column 3, :requires-bindings true, :line 3699, :end-line 3699, :arglists (quote ([shine])), :doc "Sets the amount of gloss in the surface of shapes. Used in\n  combination with ambient, specular, and emissive in setting\n  the material properties of shapes."}, :added "1.0", :name quil.core/shininess, :variadic false, :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "shininess()", :method-params ([shine]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3693, :end-line 3699, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shine])), :doc "Sets the amount of gloss in the surface of shapes. Used in\n  combination with ambient, specular, and emissive in setting\n  the material properties of shapes."}, rect-mode {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "rectMode()", :column 3, :requires-bindings true, :line 3151, :end-line 3151, :arglists (quote ([mode])), :doc "Modifies the location from which rectangles draw. The default mode\n  is :corner. Available modes are:\n\n\n  :corner  - Specifies the location to be the upper left corner of the\n             shape and uses the third and fourth parameters of rect to\n             specify the width and height.\n\n  :corners - Uses the first and second parameters of rect to set the\n             location of one corner and uses the third and fourth\n             parameters to set the opposite corner.\n\n  :center  - Draws the image from its center point and uses the third\n             and forth parameters of rect to specify the image's width\n             and height.\n\n  :radius  - Draws the image from its center point and uses the third\n             and forth parameters of rect() to specify half of the\n             image's width and height."}, :added "1.0", :name quil.core/rect-mode, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "rectMode()", :method-params ([mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3145, :end-line 3151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mode])), :doc "Modifies the location from which rectangles draw. The default mode\n  is :corner. Available modes are:\n\n\n  :corner  - Specifies the location to be the upper left corner of the\n             shape and uses the third and fourth parameters of rect to\n             specify the width and height.\n\n  :corners - Uses the first and second parameters of rect to set the\n             location of one corner and uses the third and fourth\n             parameters to set the opposite corner.\n\n  :center  - Draws the image from its center point and uses the third\n             and forth parameters of rect to specify the image's width\n             and height.\n\n  :radius  - Draws the image from its center point and uses the third\n             and forth parameters of rect() to specify half of the\n             image's width and height."}, ellipse-mode {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "ellipseMode()", :column 3, :requires-bindings true, :line 1487, :end-line 1487, :arglists (quote ([mode])), :doc "Modifies the origin of the ellispse according to the specified mode:\n\n  :center  - specifies the location of the ellipse as\n             the center of the shape. (Default).\n  :radius  - similar to center, but the width and height parameters to\n             ellipse specify the radius of the ellipse, rather than the\n             diameter.\n  :corner  - draws the shape from the upper-left corner of its bounding\n             box.\n  :corners - uses the four parameters to ellipse to set two opposing\n             corners of the ellipse's bounding box."}, :added "1.0", :name quil.core/ellipse-mode, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "ellipseMode()", :method-params ([mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1481, :end-line 1487, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mode])), :doc "Modifies the origin of the ellispse according to the specified mode:\n\n  :center  - specifies the location of the ellipse as\n             the center of the shape. (Default).\n  :radius  - similar to center, but the width and height parameters to\n             ellipse specify the radius of the ellipse, rather than the\n             diameter.\n  :corner  - draws the shape from the upper-left corner of its bounding\n             box.\n  :corners - uses the four parameters to ellipse to set two opposing\n             corners of the ellipse's bounding box."}, month {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "month()", :column 3, :requires-bindings false, :line 2472, :end-line 2472, :arglists (quote ([])), :doc "Returns the current month as a value from 1 - 12."}, :added "1.0", :name quil.core/month, :variadic false, :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "month()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 2466, :end-line 2472, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current month as a value from 1 - 12."}, texture-modes {:name quil.core/texture-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 70, :end-column 15, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 70, :column 2, :end-line 70, :end-column 15}}, tint-float {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([gray] [gray alpha] [r g b] [r g b a]), :arglists ([gray] [gray alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "tint()", :column 3, :requires-bindings true, :line 4259, :end-line 4259, :arglists (quote ([gray] [gray alpha] [r g b] [r g b a])), :doc "Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."}, :added "1.0", :name quil.core/tint-float, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([gray] [gray alpha] [r g b] [r g b a]), :arglists ([gray] [gray alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "tint()", :method-params ([gray] [gray alpha] [r g b] [r g b a]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :requires-bindings true, :line 4253, :end-line 4259, :max-fixed-arity 4, :fn-var true, :arglists ([gray] [gray alpha] [r g b] [r g b a]), :doc "Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."}, width {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "getWidth()", :column 3, :processing-link nil, :requires-bindings true, :line 4465, :end-line 4465, :arglists (quote ([])), :doc "Width of the display window. The value of width is zero until size is\n  called."}, :added "1.0", :name quil.core/width, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "getWidth()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :processing-link nil, :requires-bindings true, :line 4458, :end-line 4465, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Width of the display window. The value of width is zero until size is\n  called."}, background {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "background()", :column 3, :requires-bindings true, :line 551, :end-line 551, :arglists (quote ([rgb] [rgb alpha] [r g b] [r g b a])), :doc "Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts args to floats."}, :added "1.0", :name quil.core/background, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "background()", :method-params ([rgb] [rgb alpha] [r g b] [r g b a]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :requires-bindings true, :line 545, :end-line 551, :max-fixed-arity 4, :fn-var true, :arglists ([rgb] [rgb alpha] [r g b] [r g b a]), :doc "Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts args to floats."}, ortho {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([] [left right bottom top] [left right bottom top near far]), :arglists ([] [left right bottom top] [left right bottom top near far]), :arglists-meta (nil nil nil)}, :processing-name "ortho()", :column 3, :requires-bindings true, :line 2753, :end-line 2753, :arglists (quote ([] [left right bottom top] [left right bottom top near far])), :doc "Sets an orthographic projection and defines a parallel clipping\n  volume. All objects with the same dimension appear the same size,\n  regardless of whether they are near or far from the camera. The\n  parameters to this function specify the clipping volume where left\n  and right are the minimum and maximum x values, top and bottom are\n  the minimum and maximum y values, and near and far are the minimum\n  and maximum z values. If no parameters are given, the default is\n  used: (ortho 0 width 0 height -10 10)"}, :added "1.0", :name quil.core/ortho, :variadic false, :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([] [left right bottom top] [left right bottom top near far]), :arglists ([] [left right bottom top] [left right bottom top near far]), :arglists-meta (nil nil nil)}, :processing-name "ortho()", :method-params ([] [left right bottom top] [left right bottom top near far]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 2747, :end-line 2753, :max-fixed-arity 6, :fn-var true, :arglists ([] [left right bottom top] [left right bottom top near far]), :doc "Sets an orthographic projection and defines a parallel clipping\n  volume. All objects with the same dimension appear the same size,\n  regardless of whether they are near or far from the camera. The\n  parameters to this function specify the clipping volume where left\n  and right are the minimum and maximum x values, top and bottom are\n  the minimum and maximum y values, and near and far are the minimum\n  and maximum z values. If no parameters are given, the default is\n  used: (ortho 0 width 0 height -10 10)"}, hint-options {:name quil.core/hint-options, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 54, :end-column 14, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 54, :column 2, :end-line 54, :end-column 14}}, prc-println {:category "Output", :protocol-inline nil, :meta {:category "Output", :added "1.0", :subcategory "Text area", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :column 3, :require-bindings true, :line 153, :end-line 153, :arglists (quote ([msg])), :doc "Writes to the text area of the Processing environment's console.\n  This is often helpful for looking at the data a program is producing.\n  Each call to this function creates a new line of output.\n  Individual elements can be separated with quotes (\"\") and joined with the string concatenation operator (+).\n  Also writes the content of an array to the text area of the Processing environment.\n  This is often helpful for looking at the data a program is producing.\n  A new line is put between each element of the array. This function can only print 1D arrays,\n  but can test to see if the content are null or not null for 2+ dimensional arrays."}, :added "1.0", :name quil.core/prc-println, :variadic false, :subcategory "Text area", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :require-bindings true, :line 148, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :doc "Writes to the text area of the Processing environment's console.\n  This is often helpful for looking at the data a program is producing.\n  Each call to this function creates a new line of output.\n  Individual elements can be separated with quotes (\"\") and joined with the string concatenation operator (+).\n  Also writes the content of an array to the text area of the Processing environment.\n  This is often helpful for looking at the data a program is producing.\n  A new line is put between each element of the array. This function can only print 1D arrays,\n  but can test to see if the content are null or not null for 2+ dimensional arrays."}, brightness {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "brightness()", :column 3, :requires-bindings true, :line 929, :end-line 929, :arglists (quote ([color])), :doc "Extracts the brightness value from a color. Returns a float."}, :added "1.0", :name quil.core/brightness, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "brightness()", :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 923, :end-line 929, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Extracts the brightness value from a color. Returns a float."}, arc-modes {:name quil.core/arc-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 47, :end-column 11, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 47, :column 2, :end-line 47, :end-column 11}}, specular {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([gray] [x y z]), :arglists ([gray] [x y z]), :arglists-meta (nil nil)}, :processing-name "specular()", :column 3, :requires-bindings true, :line 3757, :end-line 3757, :arglists (quote ([gray] [x y z])), :doc "Sets the specular color of the materials used for shapes drawn to\n  the screen, which sets the color of hightlights. Specular refers to\n  light which bounces off a surface in a perferred direction (rather\n  than bouncing in all directions like a diffuse light). Used in\n  combination with emissive, ambient, and shininess in setting\n  the material properties of shapes."}, :added "1.0", :name quil.core/specular, :variadic false, :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([gray] [x y z]), :arglists ([gray] [x y z]), :arglists-meta (nil nil)}, :processing-name "specular()", :method-params ([gray] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3751, :end-line 3757, :max-fixed-arity 3, :fn-var true, :arglists ([gray] [x y z]), :doc "Sets the specular color of the materials used for shapes drawn to\n  the screen, which sets the color of hightlights. Specular refers to\n  light which bounces off a surface in a perferred direction (rather\n  than bouncing in all directions like a diffuse light). Used in\n  combination with emissive, ambient, and shininess in setting\n  the material properties of shapes."}, save-frame {:category "Output", :protocol-inline nil, :meta {:category "Output", :added "1.0", :subcategory "Image", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [name]), :arglists ([] [name]), :arglists-meta (nil nil)}, :processing-name "saveFrame()", :column 3, :requires-bindings true, :line 3418, :end-line 3418, :arglists (quote ([] [name])), :doc "Saves an image identical to the current display window as a\n  file. May be called multple times - each file saved will have a\n  unique name. Name and image formate may be modified by passing a\n  string parameter of the form \"foo-####.ext\" where foo- can be any\n  arbitrary string, #### will be replaced with the current frame id\n  and .ext is one of .tiff, .targa, .png, .jpeg or .jpg\n\n  Examples:\n  (save-frame)\n  (save-frame \"pretty-pic-####.jpg\")"}, :added "1.0", :name quil.core/save-frame, :variadic false, :subcategory "Image", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [name]), :arglists ([] [name]), :arglists-meta (nil nil)}, :processing-name "saveFrame()", :method-params ([] [name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3412, :end-line 3418, :max-fixed-arity 1, :fn-var true, :arglists ([] [name]), :doc "Saves an image identical to the current display window as a\n  file. May be called multple times - each file saved will have a\n  unique name. Name and image formate may be modified by passing a\n  string parameter of the form \"foo-####.ext\" where foo- can be any\n  arbitrary string, #### will be replaced with the current frame id\n  and .ext is one of .tiff, .targa, .png, .jpeg or .jpg\n\n  Examples:\n  (save-frame)\n  (save-frame \"pretty-pic-####.jpg\")"}, cursor {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [cursor-mode]), :arglists ([] [cursor-mode]), :arglists-meta (nil nil)}, :processing-name "cursor()", :column 3, :requires-bindings true, :line 1254, :end-line 1254, :arglists (quote ([] [cursor-mode])), :doc "Sets the cursor to a predefined symbol or makes it\n  visible if already hidden (after no-cursor was called).\n\n  Available modes: :arrow, :cross, :hand, :move, :text, :wait\n\n  See cursor-image for specifying a generic image as the cursor\n  symbol."}, :added "1.0", :name quil.core/cursor, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [cursor-mode]), :arglists ([] [cursor-mode]), :arglists-meta (nil nil)}, :processing-name "cursor()", :method-params ([] [cursor-mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1248, :end-line 1254, :max-fixed-arity 1, :fn-var true, :arglists ([] [cursor-mode]), :doc "Sets the cursor to a predefined symbol or makes it\n  visible if already hidden (after no-cursor was called).\n\n  Available modes: :arrow, :cross, :hand, :move, :text, :wait\n\n  See cursor-image for specifying a generic image as the cursor\n  symbol."}, noise {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x] [x y] [x y z]), :arglists ([x] [x y] [x y z]), :arglists-meta (nil nil nil)}, :processing-name "noise()", :column 3, :requires-bindings true, :line 2568, :end-line 2568, :arglists (quote ([x] [x y] [x y z])), :doc "Returns the Perlin noise value at specified coordinates. Perlin\n  noise is a random sequence generator producing a more natural\n  ordered, harmonic succession of numbers compared to the standard\n  random function. It was invented by Ken Perlin in the 1980s and\n  been used since in graphical applications to produce procedural\n  textures, natural motion, shapes, terrains etc.\n\n  The main difference to the random function is that Perlin noise is\n  defined in an infinite n-dimensional space where each pair of\n  coordinates corresponds to a fixed semi-random value (fixed only for\n  the lifespan of the program). The resulting value will always be\n  between 0.0 and 1.0. Processing can compute 1D, 2D and 3D noise,\n  depending on the number of coordinates given. The noise value can be\n  animated by moving through the noise space and the 2nd and 3rd\n  dimensions can also be interpreted as time.\n\n  The actual noise is structured similar to an audio signal, in\n  respect to the function's use of frequencies. Similar to the concept\n  of harmonics in physics, perlin noise is computed over several\n  octaves which are added together for the final result.\n\n  Another way to adjust the character of the resulting sequence is the\n  scale of the input coordinates. As the function works within an\n  infinite space the value of the coordinates doesn't matter as such,\n  only the distance between successive coordinates does (eg. when\n  using noise within a loop). As a general rule the smaller the\n  difference between coordinates, the smoother the resulting noise\n  sequence will be. Steps of 0.005-0.03 work best for most\n  applications, but this will differ depending on use."}, :added "1.0", :name quil.core/noise, :variadic false, :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x] [x y] [x y z]), :arglists ([x] [x y] [x y z]), :arglists-meta (nil nil nil)}, :processing-name "noise()", :method-params ([x] [x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 2562, :end-line 2568, :max-fixed-arity 3, :fn-var true, :arglists ([x] [x y] [x y z]), :doc "Returns the Perlin noise value at specified coordinates. Perlin\n  noise is a random sequence generator producing a more natural\n  ordered, harmonic succession of numbers compared to the standard\n  random function. It was invented by Ken Perlin in the 1980s and\n  been used since in graphical applications to produce procedural\n  textures, natural motion, shapes, terrains etc.\n\n  The main difference to the random function is that Perlin noise is\n  defined in an infinite n-dimensional space where each pair of\n  coordinates corresponds to a fixed semi-random value (fixed only for\n  the lifespan of the program). The resulting value will always be\n  between 0.0 and 1.0. Processing can compute 1D, 2D and 3D noise,\n  depending on the number of coordinates given. The noise value can be\n  animated by moving through the noise space and the 2nd and 3rd\n  dimensions can also be interpreted as time.\n\n  The actual noise is structured similar to an audio signal, in\n  respect to the function's use of frequencies. Similar to the concept\n  of harmonics in physics, perlin noise is computed over several\n  octaves which are added together for the final result.\n\n  Another way to adjust the character of the resulting sequence is the\n  scale of the input coordinates. As the function works within an\n  infinite space the value of the coordinates doesn't matter as such,\n  only the distance between successive coordinates does (eg. when\n  using noise within a loop). As a general rule the smaller the\n  difference between coordinates, the smoother the resulting noise\n  sequence will be. Steps of 0.005-0.03 work best for most\n  applications, but this will differ depending on use."}, push-style {:category "Structure", :protocol-inline nil, :meta {:category "Structure", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "pushStyle()", :column 3, :requires-bindings true, :line 2977, :end-line 2977, :arglists (quote ([])), :doc "Saves the current style settings onto a 'style stack'. Use with\n  pop-style which restores the prior settings. Note that these\n  functions are always used together. They allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with push-style, it builds on the current style\n  information. The push-style and pop-style fns can be embedded to\n  provide more control.\n\n  The style information controlled by the following functions are\n  included in the style: fill, stroke, tint, stroke-weight,\n  stroke-cap, stroke-join, image-mode, rect-mode, ellipse-mode,\n  shape-mode, color-mode, text-align, text-font, text-mode, text-size,\n  text-leading, emissive, specular, shininess, and ambient"}, :added "1.0", :name quil.core/push-style, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "pushStyle()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2971, :end-line 2977, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Saves the current style settings onto a 'style stack'. Use with\n  pop-style which restores the prior settings. Note that these\n  functions are always used together. They allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with push-style, it builds on the current style\n  information. The push-style and pop-style fns can be embedded to\n  provide more control.\n\n  The style information controlled by the following functions are\n  included in the style: fill, stroke, tint, stroke-weight,\n  stroke-cap, stroke-join, image-mode, rect-mode, ellipse-mode,\n  shape-mode, color-mode, text-align, text-font, text-mode, text-size,\n  text-leading, emissive, specular, shininess, and ambient"}, bezier-vertex {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 9, :method-params ([cx1 cy1 cx2 cy2 x y] [cx1 cy1 cz1 cx2 cy2 cz2 x y z]), :arglists ([cx1 cy1 cx2 cy2 x y] [cx1 cy1 cz1 cx2 cy2 cz2 x y z]), :arglists-meta (nil nil)}, :processing-name "bezierVertex()", :column 3, :requires-bindings true, :line 736, :end-line 736, :arglists (quote ([cx1 cy1 cx2 cy2 x y] [cx1 cy1 cz1 cx2 cy2 cz2 x y z])), :doc "Specifies vertex coordinates for Bezier curves. Each call to\n  bezier-vertex defines the position of two control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or\n  shape. The first time bezier-vertex is used within a begin-shape\n  call, it must be prefaced with a call to vertex to set the first\n  anchor point. This function must be used between begin-shape and\n  end-shape and only when there is no parameter specified to\n  begin-shape."}, :added "1.0", :name quil.core/bezier-vertex, :variadic false, :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 9, :method-params ([cx1 cy1 cx2 cy2 x y] [cx1 cy1 cz1 cx2 cy2 cz2 x y z]), :arglists ([cx1 cy1 cx2 cy2 x y] [cx1 cy1 cz1 cx2 cy2 cz2 x y z]), :arglists-meta (nil nil)}, :processing-name "bezierVertex()", :method-params ([cx1 cy1 cx2 cy2 x y] [cx1 cy1 cz1 cx2 cy2 cz2 x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 730, :end-line 736, :max-fixed-arity 9, :fn-var true, :arglists ([cx1 cy1 cx2 cy2 x y] [cx1 cy1 cz1 cx2 cy2 cz2 x y z]), :doc "Specifies vertex coordinates for Bezier curves. Each call to\n  bezier-vertex defines the position of two control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or\n  shape. The first time bezier-vertex is used within a begin-shape\n  call, it must be prefaced with a call to vertex to set the first\n  anchor point. This function must be used between begin-shape and\n  end-shape and only when there is no parameter specified to\n  begin-shape."}, light-falloff {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "lightFalloff()", :column 3, :requires-bindings true, :line 2132, :end-line 2132, :arglists (quote ([constant linear quadratic])), :doc "Sets the falloff rates for point lights, spot lights, and ambient\n  lights. The parameters are used to determine the falloff with the\n  following equation:\n\n  d = distance from light position to vertex position\n  falloff = 1 / (CONSTANT + d * LINEAR + (d*d) * QUADRATIC)\n\n  Like fill, it affects only the elements which are created after it\n  in the code. The default value is (light-falloff 1.0 0.0 0.0).\n  Thinking about an ambient light with a falloff can be tricky. It is\n  used, for example, if you wanted a region of your scene to be lit\n  ambiently one color and another region to be lit ambiently by\n  another color, you would use an ambient light with location and\n  falloff. You can think of it as a point light that doesn't care\n  which direction a surface is facing."}, :added "1.0", :name quil.core/light-falloff, :variadic false, :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "lightFalloff()", :method-params ([constant linear quadratic]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2126, :end-line 2132, :max-fixed-arity 3, :fn-var true, :arglists (quote ([constant linear quadratic])), :doc "Sets the falloff rates for point lights, spot lights, and ambient\n  lights. The parameters are used to determine the falloff with the\n  following equation:\n\n  d = distance from light position to vertex position\n  falloff = 1 / (CONSTANT + d * LINEAR + (d*d) * QUADRATIC)\n\n  Like fill, it affects only the elements which are created after it\n  in the code. The default value is (light-falloff 1.0 0.0 0.0).\n  Thinking about an ambient light with a falloff can be tricky. It is\n  used, for example, if you wanted a region of your scene to be lit\n  ambiently one color and another region to be lit ambiently by\n  another color, you would use an ambient light with location and\n  falloff. You can think of it as a point light that doesn't care\n  which direction a surface is facing."}, noise-detail {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([octaves] [octaves falloff]), :arglists ([octaves] [octaves falloff]), :arglists-meta (nil nil)}, :processing-name "noiseDetail()", :column 3, :requires-bindings true, :line 2608, :end-line 2608, :arglists (quote ([octaves] [octaves falloff])), :doc "Adjusts the character and level of detail produced by the Perlin\n  noise function. Similar to harmonics in physics, noise is computed\n  over several octaves. Lower octaves contribute more to the output\n  signal and as such define the overal intensity of the noise, whereas\n  higher octaves create finer grained details in the noise\n  sequence. By default, noise is computed over 4 octaves with each\n  octave contributing exactly half than its predecessor, starting at\n  50% strength for the 1st octave. This falloff amount can be changed\n  by adding an additional function parameter. Eg. a falloff factor of\n  0.75 means each octave will now have 75% impact (25% less) of the\n  previous lower octave. Any value between 0.0 and 1.0 is valid,\n  however note that values greater than 0.5 might result in greater\n  than 1.0 values returned by noise.\n\n  By changing these parameters, the signal created by the noise\n  function can be adapted to fit very specific needs and\n  characteristics."}, :added "1.0", :name quil.core/noise-detail, :variadic false, :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([octaves] [octaves falloff]), :arglists ([octaves] [octaves falloff]), :arglists-meta (nil nil)}, :processing-name "noiseDetail()", :method-params ([octaves] [octaves falloff]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2602, :end-line 2608, :max-fixed-arity 2, :fn-var true, :arglists ([octaves] [octaves falloff]), :doc "Adjusts the character and level of detail produced by the Perlin\n  noise function. Similar to harmonics in physics, noise is computed\n  over several octaves. Lower octaves contribute more to the output\n  signal and as such define the overal intensity of the noise, whereas\n  higher octaves create finer grained details in the noise\n  sequence. By default, noise is computed over 4 octaves with each\n  octave contributing exactly half than its predecessor, starting at\n  50% strength for the 1st octave. This falloff amount can be changed\n  by adding an additional function parameter. Eg. a falloff factor of\n  0.75 means each octave will now have 75% impact (25% less) of the\n  previous lower octave. Any value between 0.0 and 1.0 is valid,\n  however note that values greater than 0.5 might result in greater\n  than 1.0 values returned by noise.\n\n  By changing these parameters, the signal created by the noise\n  function can be adapted to fit very specific needs and\n  characteristics."}, save {:category "Output", :protocol-inline nil, :meta {:category "Output", :added "1.0", :subcategory "Image", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "save()", :column 3, :requires-bindings true, :line 3400, :end-line 3400, :arglists (quote ([filename])), :doc "Saves an image from the display window. Images are saved in TIFF,\n  TARGA, JPEG, and PNG format depending on the extension within the\n  filename parameter. For example, image.tif will have a TIFF image\n  and image.png will save a PNG image. If no extension is included in\n  the filename, the image will save in TIFF format and .tif will be\n  added to the name. All images saved from the main drawing window\n  will be opaque. To save images without a background, use\n  create-graphics."}, :added "1.0", :name quil.core/save, :variadic false, :subcategory "Image", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "save()", :method-params ([filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3394, :end-line 3400, :max-fixed-arity 1, :fn-var true, :arglists (quote ([filename])), :doc "Saves an image from the display window. Images are saved in TIFF,\n  TARGA, JPEG, and PNG format depending on the extension within the\n  filename parameter. For example, image.tif will have a TIFF image\n  and image.png will save a PNG image. If no extension is included in\n  the filename, the image will save in TIFF format and .tif will be\n  added to the name. All images saved from the main drawing window\n  will be opaque. To save images without a background, use\n  create-graphics."}, curve-point {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "curvePoint()", :column 3, :requires-bindings true, :line 1326, :end-line 1326, :arglists (quote ([a b c d t])), :doc "Evalutes the curve at point t for points a, b, c, d. The parameter\n  t varies between 0 and 1, a and d are points on the curve, and b c\n  and are the control points. This can be done once with the x\n  coordinates and a second time with the y coordinates to get the\n  location of a curve at t."}, :added "1.0", :name quil.core/curve-point, :variadic false, :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "curvePoint()", :method-params ([a b c d t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1320, :end-line 1326, :max-fixed-arity 5, :fn-var true, :arglists (quote ([a b c d t])), :doc "Evalutes the curve at point t for points a, b, c, d. The parameter\n  t varies between 0 and 1, a and d are points on the curve, and b c\n  and are the control points. This can be done once with the x\n  coordinates and a second time with the y coordinates to get the\n  location of a curve at t."}, state {:category "State", :protocol-inline nil, :meta {:category "State", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [key]), :arglists ([] [key]), :arglists-meta (nil nil)}, :column 3, :requires-bindings true, :line 216, :end-line 216, :arglists (quote ([] [key])), :doc "Retrieve sketch-specific state by key. Must initially call\n  set-state! to store state. If no parameter passed whole\n  state map is returned.\n\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (state) ;=> {:foo 1}"}, :added "1.0", :name quil.core/state, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [key]), :arglists ([] [key]), :arglists-meta (nil nil)}, :method-params ([] [key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 211, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists ([] [key]), :doc "Retrieve sketch-specific state by key. Must initially call\n  set-state! to store state. If no parameter passed whole\n  state map is returned.\n\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (state) ;=> {:foo 1}"}, load-shader {:category "Rendering", :protocol-inline nil, :meta {:category "Rendering", :added "2.0", :subcategory "Shaders", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([fragment-filename] [fragment-filename vertex-filename]), :arglists ([fragment-filename] [fragment-filename vertex-filename]), :arglists-meta (nil nil)}, :processing-name "loadShader()", :column 3, :requires-bindings true, :line 2307, :end-line 2307, :arglists (quote ([fragment-filename] [fragment-filename vertex-filename])), :doc "Loads a shader into the PShader object. Shaders are compatible with the\n  P2D and P3D renderers, but not with the default renderer."}, :added "2.0", :name quil.core/load-shader, :variadic false, :subcategory "Shaders", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([fragment-filename] [fragment-filename vertex-filename]), :arglists ([fragment-filename] [fragment-filename vertex-filename]), :arglists-meta (nil nil)}, :processing-name "loadShader()", :method-params ([fragment-filename] [fragment-filename vertex-filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2301, :end-line 2307, :max-fixed-arity 2, :fn-var true, :arglists ([fragment-filename] [fragment-filename vertex-filename]), :doc "Loads a shader into the PShader object. Shaders are compatible with the\n  P2D and P3D renderers, but not with the default renderer."}, resize {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "2.1.0", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "resize()", :column 3, :processing-link "http://processing.org/reference/PImage_resize_.html", :requires-bindings true, :line 3266, :end-line 3266, :arglists (quote ([img w h])), :doc "Resize the image to a new width and height.\n  To make the image scale proportionally, use 0 as the value for the wide or\n  high parameter. For instance, to make the width of an image 150 pixels,\n  and change the height using the same proportion, use resize(150, 0).\n\n  Even though a PGraphics is technically a PImage, it is not possible\n  to rescale the image data found in a PGraphics.\n  (It's simply not possible to do this consistently across renderers:\n  technically infeasible with P3D, or what would it even do with PDF?)\n  If you want to resize PGraphics content, first get a copy of its image data\n  using the get() method, and call resize() on the PImage that is returned."}, :added "2.1.0", :name quil.core/resize, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "resize()", :method-params ([img w h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :processing-link "http://processing.org/reference/PImage_resize_.html", :requires-bindings true, :line 3260, :end-line 3266, :max-fixed-arity 3, :fn-var true, :arglists (quote ([img w h])), :doc "Resize the image to a new width and height.\n  To make the image scale proportionally, use 0 as the value for the wide or\n  high parameter. For instance, to make the width of an image 150 pixels,\n  and change the height using the same proportion, use resize(150, 0).\n\n  Even though a PGraphics is technically a PImage, it is not possible\n  to rescale the image data found in a PGraphics.\n  (It's simply not possible to do this consistently across renderers:\n  technically infeasible with P3D, or what would it even do with PDF?)\n  If you want to resize PGraphics content, first get a copy of its image data\n  using the get() method, and call resize() on the PImage that is returned."}, normal {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "normal()", :column 3, :requires-bindings true, :line 2701, :end-line 2701, :arglists (quote ([nx ny nz])), :doc "Sets the current normal vector. This is for drawing three\n  dimensional shapes and surfaces and specifies a vector perpendicular\n  to the surface of the shape which determines how lighting affects\n  it. Processing attempts to automatically assign normals to shapes,\n  but since that's imperfect, this is a better option when you want\n  more control. This function is identical to glNormal3f() in OpenGL."}, :added "1.0", :name quil.core/normal, :variadic false, :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "normal()", :method-params ([nx ny nz]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2695, :end-line 2701, :max-fixed-arity 3, :fn-var true, :arglists (quote ([nx ny nz])), :doc "Sets the current normal vector. This is for drawing three\n  dimensional shapes and surfaces and specifies a vector perpendicular\n  to the surface of the shape which determines how lighting affects\n  it. Processing attempts to automatically assign normals to shapes,\n  but since that's imperfect, this is a better option when you want\n  more control. This function is identical to glNormal3f() in OpenGL."}, perspective {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([] [fovy aspect z-near z-far]), :arglists ([] [fovy aspect z-near z-far]), :arglists-meta (nil nil)}, :processing-name "perspective()", :column 3, :requires-bindings true, :line 2774, :end-line 2774, :arglists (quote ([] [fovy aspect z-near z-far])), :doc "Sets a perspective projection applying foreshortening, making\n  distant objects appear smaller than closer ones. The parameters\n  define a viewing volume with the shape of truncated pyramid. Objects\n  near to the front of the volume appear their actual size, while\n  farther objects appear smaller. This projection simulates the\n  perspective of the world more accurately than orthographic\n  projection. The version of perspective without parameters sets the\n  default perspective and the version with four parameters allows the\n  programmer to set the area precisely. The default values are:\n  perspective(PI/3.0, width/height, cameraZ/10.0, cameraZ*10.0) where\n  cameraZ is ((height/2.0) / tan(PI*60.0/360.0));"}, :added "1.0", :name quil.core/perspective, :variadic false, :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([] [fovy aspect z-near z-far]), :arglists ([] [fovy aspect z-near z-far]), :arglists-meta (nil nil)}, :processing-name "perspective()", :method-params ([] [fovy aspect z-near z-far]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2768, :end-line 2774, :max-fixed-arity 4, :fn-var true, :arglists ([] [fovy aspect z-near z-far]), :doc "Sets a perspective projection applying foreshortening, making\n  distant objects appear smaller than closer ones. The parameters\n  define a viewing volume with the shape of truncated pyramid. Objects\n  near to the front of the volume appear their actual size, while\n  farther objects appear smaller. This projection simulates the\n  perspective of the world more accurately than orthographic\n  projection. The version of perspective without parameters sets the\n  default perspective and the version with four parameters allows the\n  programmer to set the area precisely. The default values are:\n  perspective(PI/3.0, width/height, cameraZ/10.0, cameraZ*10.0) where\n  cameraZ is ((height/2.0) / tan(PI*60.0/360.0));"}, seconds {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "second()", :column 3, :requires-bindings false, :line 3533, :end-line 3533, :arglists (quote ([])), :doc "Returns the current second as a value from 0 - 59."}, :added "1.0", :name quil.core/seconds, :variadic false, :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "second()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 3527, :end-line 3533, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current second as a value from 0 - 59."}, hint {:category "Rendering", :protocol-inline nil, :meta {:category "Rendering", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "hint()", :column 3, :processing-link nil, :requires-bindings true, :line 1909, :end-line 1909, :arglists (quote ([hint-type])), :doc "Set various hints and hacks for the renderer. This is used to\n  handle obscure rendering features that cannot be implemented in a\n  consistent manner across renderers. Many options will often graduate\n  to standard features instead of hints over time.\n\n  Options:\n\n  :enable-native-fonts - Use the native version fonts when they are\n    installed, rather than the bitmapped version from a .vlw\n    file. This is useful with the default (or JAVA2D) renderer\n    setting, as it will improve font rendering speed. This is not\n    enabled by default, because it can be misleading while testing\n    because the type will look great on your machine (because you have\n    the font installed) but lousy on others' machines if the identical\n    font is unavailable. This option can only be set per-sketch, and\n    must be called before any use of text-font.\n\n  :disable-native-fonts - Disables native font support.\n\n  :disable-depth-test - Disable the zbuffer, allowing you to draw on\n    top of everything at will. When depth testing is disabled, items\n    will be drawn to the screen sequentially, like a painting. This\n    hint is most often used to draw in 3D, then draw in 2D on top of\n    it (for instance, to draw GUI controls in 2D on top of a 3D\n    interface). Starting in release 0149, this will also clear the\n    depth buffer. Restore the default with :enable-depth-test\n    but note that with the depth buffer cleared, any 3D drawing that\n    happens later in draw will ignore existing shapes on the screen.\n\n  :enable-depth-test - Enables the zbuffer.\n\n  :enable-depth-sort - Enable primitive z-sorting of triangles and\n    lines in :p3d and :opengl rendering modes. This can slow\n    performance considerably, and the algorithm is not yet perfect.\n\n  :disable-depth-sort - Disables hint :enable-depth-sort\n\n  :disable-opengl-errors - Speeds up the OPENGL renderer setting\n     by not checking for errors while running.\n\n  :enable-opengl-errors - Turns on OpenGL error checking\n\n  :enable-depth-mask\n  :disable-depth-mask\n\n  :enable-optimized-stroke\n  :disable-optimized-stroke\n  :enable-retina-pixels\n  :disable-retina-pixels\n  :enable-stroke-perspective\n  :disable-stroke-perspective\n  :enable-stroke-pure\n  :disable-stroke-pure\n  :enable-texture-mipmaps\n  :disable-texture-mipmaps\n"}, :added "1.0", :name quil.core/hint, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "hint()", :method-params ([hint-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :processing-link nil, :requires-bindings true, :line 1902, :end-line 1909, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hint-type])), :doc "Set various hints and hacks for the renderer. This is used to\n  handle obscure rendering features that cannot be implemented in a\n  consistent manner across renderers. Many options will often graduate\n  to standard features instead of hints over time.\n\n  Options:\n\n  :enable-native-fonts - Use the native version fonts when they are\n    installed, rather than the bitmapped version from a .vlw\n    file. This is useful with the default (or JAVA2D) renderer\n    setting, as it will improve font rendering speed. This is not\n    enabled by default, because it can be misleading while testing\n    because the type will look great on your machine (because you have\n    the font installed) but lousy on others' machines if the identical\n    font is unavailable. This option can only be set per-sketch, and\n    must be called before any use of text-font.\n\n  :disable-native-fonts - Disables native font support.\n\n  :disable-depth-test - Disable the zbuffer, allowing you to draw on\n    top of everything at will. When depth testing is disabled, items\n    will be drawn to the screen sequentially, like a painting. This\n    hint is most often used to draw in 3D, then draw in 2D on top of\n    it (for instance, to draw GUI controls in 2D on top of a 3D\n    interface). Starting in release 0149, this will also clear the\n    depth buffer. Restore the default with :enable-depth-test\n    but note that with the depth buffer cleared, any 3D drawing that\n    happens later in draw will ignore existing shapes on the screen.\n\n  :enable-depth-test - Enables the zbuffer.\n\n  :enable-depth-sort - Enable primitive z-sorting of triangles and\n    lines in :p3d and :opengl rendering modes. This can slow\n    performance considerably, and the algorithm is not yet perfect.\n\n  :disable-depth-sort - Disables hint :enable-depth-sort\n\n  :disable-opengl-errors - Speeds up the OPENGL renderer setting\n     by not checking for errors while running.\n\n  :enable-opengl-errors - Turns on OpenGL error checking\n\n  :enable-depth-mask\n  :disable-depth-mask\n\n  :enable-optimized-stroke\n  :disable-optimized-stroke\n  :enable-retina-pixels\n  :disable-retina-pixels\n  :enable-stroke-perspective\n  :disable-stroke-perspective\n  :enable-stroke-pure\n  :disable-stroke-pure\n  :enable-texture-mipmaps\n  :disable-texture-mipmaps\n"}, sphere-detail {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "3D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([res] [ures vres]), :arglists ([res] [ures vres]), :arglists-meta (nil nil)}, :processing-name "sphereDetail()", :column 3, :requires-bindings true, :line 3783, :end-line 3783, :arglists (quote ([res] [ures vres])), :doc "Controls the detail used to render a sphere by adjusting the number\n  of vertices of the sphere mesh. The default resolution is 30, which\n  creates a fairly detailed sphere definition with vertices every\n  360/30 = 12 degrees. If you're going to render a great number of\n  spheres per frame, it is advised to reduce the level of detail using\n  this function. The setting stays active until sphere-detail is\n  called again with a new parameter and so should not be called prior\n  to every sphere statement, unless you wish to render spheres with\n  different settings, e.g. using less detail for smaller spheres or\n  ones further away from the camera. To controla the detail of the\n  horizontal and vertical resolution independently, use the version of\n  the functions with two parameters."}, :added "1.0", :name quil.core/sphere-detail, :variadic false, :subcategory "3D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([res] [ures vres]), :arglists ([res] [ures vres]), :arglists-meta (nil nil)}, :processing-name "sphereDetail()", :method-params ([res] [ures vres]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3777, :end-line 3783, :max-fixed-arity 2, :fn-var true, :arglists ([res] [ures vres]), :doc "Controls the detail used to render a sphere by adjusting the number\n  of vertices of the sphere mesh. The default resolution is 30, which\n  creates a fairly detailed sphere definition with vertices every\n  360/30 = 12 degrees. If you're going to render a great number of\n  spheres per frame, it is advised to reduce the level of detail using\n  this function. The setting stays active until sphere-detail is\n  called again with a new parameter and so should not be called prior\n  to every sphere statement, unless you wish to render spheres with\n  different settings, e.g. using less detail for smaller spheres or\n  ones further away from the camera. To controla the detail of the\n  horizontal and vertical resolution independently, use the version of\n  the functions with two parameters."}, vertex {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([x y] [x y z] [x y u v] [x y z u v]), :arglists ([x y] [x y z] [x y u v] [x y z u v]), :arglists-meta (nil nil nil nil)}, :processing-name "vertex()", :column 3, :requires-bindings true, :line 4425, :end-line 4425, :arglists (quote ([x y] [x y z] [x y u v] [x y z u v])), :doc "All shapes are constructed by connecting a series of\n  vertices. vertex is used to specify the vertex coordinates for\n  points, lines, triangles, quads, and polygons and is used\n  exclusively within the begin-shape and end-shape fns.\n\n  Drawing a vertex in 3D using the z parameter requires the :p3d or\n  :opengl renderers to be used.\n\n  This function is also used to map a texture onto the geometry. The\n  texture fn declares the texture to apply to the geometry and the u\n  and v coordinates set define the mapping of this texture to the\n  form. By default, the coordinates used for u and v are specified in\n  relation to the image's size in pixels, but this relation can be\n  changed with texture-mode."}, :added "1.0", :name quil.core/vertex, :variadic false, :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([x y] [x y z] [x y u v] [x y z u v]), :arglists ([x y] [x y z] [x y u v] [x y z u v]), :arglists-meta (nil nil nil nil)}, :processing-name "vertex()", :method-params ([x y] [x y z] [x y u v] [x y z u v]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :requires-bindings true, :line 4419, :end-line 4425, :max-fixed-arity 5, :fn-var true, :arglists ([x y] [x y z] [x y u v] [x y z u v]), :doc "All shapes are constructed by connecting a series of\n  vertices. vertex is used to specify the vertex coordinates for\n  points, lines, triangles, quads, and polygons and is used\n  exclusively within the begin-shape and end-shape fns.\n\n  Drawing a vertex in 3D using the z parameter requires the :p3d or\n  :opengl renderers to be used.\n\n  This function is also used to map a texture onto the geometry. The\n  texture fn declares the texture to apply to the geometry and the u\n  and v coordinates set define the mapping of this texture to the\n  form. By default, the coordinates used for u and v are specified in\n  relation to the image's size in pixels, but this relation can be\n  changed with texture-mode."}, delay-frame {:category "Structure", :protocol-inline nil, :meta {:category "Structure", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "delay()", :column 3, :processing-link nil, :requires-bindings true, :line 1420, :end-line 1420, :arglists (quote ([freeze-ms])), :doc "Forces the program to stop running for a specified time. Delay\n  times are specified in thousandths of a second, therefore the\n  function call (delay 3000) will stop the program for three\n  seconds. Because the screen is updated only at the end of draw,\n  the program may appear to 'freeze', because the screen will not\n  update when the delay fn is used. This function has no affect\n  inside setup."}, :added "1.0", :name quil.core/delay-frame, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "delay()", :method-params ([freeze-ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :processing-link nil, :requires-bindings true, :line 1413, :end-line 1420, :max-fixed-arity 1, :fn-var true, :arglists (quote ([freeze-ms])), :doc "Forces the program to stop running for a specified time. Delay\n  times are specified in thousandths of a second, therefore the\n  function call (delay 3000) will stop the program for three\n  seconds. Because the screen is updated only at the end of draw,\n  the program may appear to 'freeze', because the screen will not\n  update when the delay fn is used. This function has no affect\n  inside setup."}, horizontal-alignment-modes {:name quil.core/horizontal-alignment-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 67, :end-column 28, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 67, :column 2, :end-line 67, :end-column 28}}, spot-light {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 11, :method-params ([r g b x y z nx ny nz angle concentration] [[r g b] [x y z] [nx ny nz] angle concentration]), :arglists ([r g b x y z nx ny nz angle concentration] [[r g b] [x y z] [nx ny nz] angle concentration]), :arglists-meta (nil nil)}, :processing-name "spotLight()", :column 3, :requires-bindings true, :line 3805, :end-line 3805, :arglists (quote ([r g b x y z nx ny nz angle concentration] [[r g b] [x y z] [nx ny nz] angle concentration])), :doc "Adds a spot light. Lights need to be included in the draw to\n  remain persistent in a looping program. Placing them in the setup\n  of a looping program will cause them to only have an effect the\n  first time through the loop. The affect of the r, g, and b\n  parameters is determined by the current color mode. The x, y, and z\n  parameters specify the position of the light and nx, ny, nz specify\n  the direction or light. The angle parameter affects angle of the\n  spotlight cone."}, :added "1.0", :name quil.core/spot-light, :variadic false, :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 11, :method-params ([r g b x y z nx ny nz angle concentration] [[r g b] [x y z] [nx ny nz] angle concentration]), :arglists ([r g b x y z nx ny nz angle concentration] [[r g b] [x y z] [nx ny nz] angle concentration]), :arglists-meta (nil nil)}, :processing-name "spotLight()", :method-params ([r g b x y z nx ny nz angle concentration] [[r g b] [x y z] [nx ny nz] angle concentration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3799, :end-line 3805, :max-fixed-arity 11, :fn-var true, :arglists ([r g b x y z nx ny nz angle concentration] [[r g b] [x y z] [nx ny nz] angle concentration]), :doc "Adds a spot light. Lights need to be included in the draw to\n  remain persistent in a looping program. Placing them in the setup\n  of a looping program will cause them to only have an effect the\n  first time through the loop. The affect of the r, g, and b\n  parameters is determined by the current color mode. The x, y, and z\n  parameters specify the position of the light and nx, ny, nz specify\n  the direction or light. The angle parameter affects angle of the\n  spotlight cone."}, target-frame-rate {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "1.5.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 20, :column 3, :requires-bindings true, :line 3972, :end-line 3972, :arglists (quote ([])), :doc "Returns the target framerate specified with the fn frame-rate"}, :added "1.5.0", :name quil.core/target-frame-rate, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3967, :end-line 3972, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the target framerate specified with the fn frame-rate"}, tint {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "tint()", :column 3, :requires-bindings true, :line 4307, :end-line 4307, :arglists (quote ([rgb] [rgb alpha] [r g b] [r g b a])), :doc "Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."}, :added "1.0", :name quil.core/tint, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists ([rgb] [rgb alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "tint()", :method-params ([rgb] [rgb alpha] [r g b] [r g b a]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :requires-bindings true, :line 4301, :end-line 4307, :max-fixed-arity 4, :fn-var true, :arglists ([rgb] [rgb alpha] [r g b] [r g b a]), :doc "Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the alpha.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an alpha value. For instance,\n  tint(255, 128) will make an image 50% transparent (unless\n  colorMode() has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by colorMode(). The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."}, bezier-tangent {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :processing-name "bezierTangent()", :column 3, :requires-bindings true, :line 723, :end-line 723, :arglists (quote ([a b c d t])), :doc "Calculates the tangent of a point on a Bezier curve.\n  (See http://en.wikipedia.org/wiki/Tangent)"}, :added "1.0", :name quil.core/bezier-tangent, :variadic false, :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :processing-name "bezierTangent()", :method-params ([a b c d t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 717, :end-line 723, :max-fixed-arity 5, :fn-var true, :arglists (quote ([a b c d t])), :doc "Calculates the tangent of a point on a Bezier curve.\n  (See http://en.wikipedia.org/wiki/Tangent)"}, asin {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "asin()", :column 3, :requires-bindings false, :line 445, :end-line 445, :arglists (quote ([n])), :doc "The inverse of sin, returns the arc sine of a value. This function\n  expects the values in the range of -1 to 1 and values are returned\n  in the range -PI/2 to PI/2."}, :added "1.0", :name quil.core/asin, :variadic false, :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "asin()", :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 439, :end-line 445, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "The inverse of sin, returns the arc sine of a value. This function\n  expects the values in the range of -1 to 1 and values are returned\n  in the range -PI/2 to PI/2."}, lerp {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "lerp()", :column 3, :requires-bindings false, :line 2171, :end-line 2171, :arglists (quote ([start stop amt])), :doc "Calculates a number between two numbers at a specific\n  increment. The amt parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc. The lerp function\n  is convenient for creating motion along a straight path and for\n  drawing dotted lines."}, :added "1.0", :name quil.core/lerp, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "lerp()", :method-params ([start stop amt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 2165, :end-line 2171, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start stop amt])), :doc "Calculates a number between two numbers at a specific\n  increment. The amt parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc. The lerp function\n  is convenient for creating motion along a straight path and for\n  drawing dotted lines."}, unhex {:category "Data", :protocol-inline nil, :meta {:category "Data", :require-binding false, :subcategory "Conversion", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "hex()", :column 3, :line 4384, :end-line 4384, :arglists (quote ([hex-str])), :doc "Converts a String representation of a hexadecimal number to its\n  equivalent integer value."}, :require-binding false, :name quil.core/unhex, :variadic false, :subcategory "Conversion", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "hex()", :method-params ([hex-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4379, :end-line 4384, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hex-str])), :doc "Converts a String representation of a hexadecimal number to its\n  equivalent integer value."}, begin-camera {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "beginCamera()", :column 3, :requires-bindings true, :line 586, :end-line 586, :arglists (quote ([])), :doc "Sets the matrix mode to the camera matrix so calls such as\n  translate, rotate, apply-matrix and reset-matrix affect the\n  camera. begin-camera should always be used with a following\n  end-camera and pairs of begin-camera and end-camera cannot be\n  nested.\n\n  For most situations the camera function will be sufficient."}, :added "1.0", :name quil.core/begin-camera, :variadic false, :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "beginCamera()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 580, :end-line 586, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Sets the matrix mode to the camera matrix so calls such as\n  translate, rotate, apply-matrix and reset-matrix affect the\n  camera. begin-camera should always be used with a following\n  end-camera and pairs of begin-camera and end-camera cannot be\n  nested.\n\n  For most situations the camera function will be sufficient."}, text-num {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([num x y] [num x y z]), :arglists ([num x y] [num x y z]), :arglists-meta (nil nil)}, :processing-name "text()", :column 3, :requires-bindings true, :line 4006, :end-line 4006, :arglists (quote ([num x y] [num x y z])), :doc "Draws a number to the screen in the specified position. See text fn\n  for more details."}, :added "1.0", :name quil.core/text-num, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([num x y] [num x y z]), :arglists ([num x y] [num x y z]), :arglists-meta (nil nil)}, :processing-name "text()", :method-params ([num x y] [num x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4000, :end-line 4006, :max-fixed-arity 4, :fn-var true, :arglists ([num x y] [num x y z]), :doc "Draws a number to the screen in the specified position. See text fn\n  for more details."}, round {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "round()", :column 3, :requires-bindings false, :line 3376, :end-line 3376, :arglists (quote ([val])), :doc "Calculates the integer closest to the value parameter. For example,\n  (round 9.2) returns the value 9."}, :added "1.0", :name quil.core/round, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "round()", :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 3370, :end-line 3376, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Calculates the integer closest to the value parameter. For example,\n  (round 9.2) returns the value 9."}, background-image {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :processing-name "background()", :column 3, :requires-bindings true, :line 573, :end-line 573, :arglists (quote ([img])), :doc "Specify an image to be used as the background for a sketch. Its\n  width and height must be the same size as the sketch window. Images\n  used as background will ignore the current tint setting."}, :added "1.0", :name quil.core/background-image, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :processing-name "background()", :method-params ([img]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 567, :end-line 573, :max-fixed-arity 1, :fn-var true, :arglists (quote ([img])), :doc "Specify an image to be used as the background for a sketch. Its\n  width and height must be the same size as the sketch window. Images\n  used as background will ignore the current tint setting."}, load-shape {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "loadShape()", :column 3, :requires-bindings true, :line 2321, :end-line 2321, :arglists (quote ([filename])), :doc "Load a geometry from a file as a PShape."}, :added "1.0", :name quil.core/load-shape, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "loadShape()", :method-params ([filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2315, :end-line 2321, :max-fixed-arity 1, :fn-var true, :arglists (quote ([filename])), :doc "Load a geometry from a file as a PShape."}, vertical-alignment-modes {:name quil.core/vertical-alignment-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 68, :end-column 26, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 68, :column 2, :end-line 68, :end-column 26}}, blend-color {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "blendColor()", :column 3, :processing-link nil, :requires-bindings false, :line 829, :end-line 829, :arglists (quote ([c1 c2 mode])), :doc "Blends two color values together based on the blending mode given specified\n  with the mode keyword.\n\n  Available blend modes are:\n\n  :blend      - linear interpolation of colours: C = A*factor + B\n  :add        - additive blending with white clip:\n                                            C = min(A*factor + B, 255)\n  :subtract   - subtractive blending with black clip:\n                                            C = max(B - A*factor, 0)\n  :darkest    - only the darkest colour succeeds:\n                                            C = min(A*factor, B)\n  :lightest   - only the lightest colour succeeds:\n                                            C = max(A*factor, B)\n  :difference - subtract colors from underlying image.\n  :exclusion  - similar to :difference, but less extreme.\n  :multiply   - Multiply the colors, result will always be darker.\n  :screen     - Opposite multiply, uses inverse values of the colors.\n  :overlay    - A mix of :multiply and :screen. Multiplies dark values\n                and screens light values.\n  :hard-light - :screen when greater than 50% gray, :multiply when\n                lower.\n  :soft-light - Mix of :darkest and :lightest. Works like :overlay,\n                but not as harsh.\n  :dodge      - Lightens light tones and increases contrast, ignores\n                darks.\n                Called \"Color Dodge\" in Illustrator and Photoshop.\n  :burn       - Darker areas are applied, increasing contrast, ignores\n                lights. Called \"Color Burn\" in Illustrator and\n                Photoshop."}, :added "1.0", :name quil.core/blend-color, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "blendColor()", :method-params ([c1 c2 mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :processing-link nil, :requires-bindings false, :line 822, :end-line 829, :max-fixed-arity 3, :fn-var true, :arglists (quote ([c1 c2 mode])), :doc "Blends two color values together based on the blending mode given specified\n  with the mode keyword.\n\n  Available blend modes are:\n\n  :blend      - linear interpolation of colours: C = A*factor + B\n  :add        - additive blending with white clip:\n                                            C = min(A*factor + B, 255)\n  :subtract   - subtractive blending with black clip:\n                                            C = max(B - A*factor, 0)\n  :darkest    - only the darkest colour succeeds:\n                                            C = min(A*factor, B)\n  :lightest   - only the lightest colour succeeds:\n                                            C = max(A*factor, B)\n  :difference - subtract colors from underlying image.\n  :exclusion  - similar to :difference, but less extreme.\n  :multiply   - Multiply the colors, result will always be darker.\n  :screen     - Opposite multiply, uses inverse values of the colors.\n  :overlay    - A mix of :multiply and :screen. Multiplies dark values\n                and screens light values.\n  :hard-light - :screen when greater than 50% gray, :multiply when\n                lower.\n  :soft-light - Mix of :darkest and :lightest. Works like :overlay,\n                but not as harsh.\n  :dodge      - Lightens light tones and increases contrast, ignores\n                darks.\n                Called \"Color Dodge\" in Illustrator and Photoshop.\n  :burn       - Darker areas are applied, increasing contrast, ignores\n                lights. Called \"Color Burn\" in Illustrator and\n                Photoshop."}, QUARTER-PI {:name quil.core/QUARTER-PI, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 80, :column 1, :end-line 80, :end-column 16, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 80, :column 6, :end-line 80, :end-column 16}}, stroke-cap {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "strokeCap()", :column 3, :requires-bindings true, :line 3914, :end-line 3914, :arglists (quote ([cap-mode])), :doc "Sets the style for rendering line endings. These ends are either\n  squared, extended, or rounded and specified with the corresponding\n  parameters :square, :project, and :round. The default cap is :round."}, :added "1.0", :name quil.core/stroke-cap, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "strokeCap()", :method-params ([cap-mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3908, :end-line 3914, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cap-mode])), :doc "Sets the style for rendering line endings. These ends are either\n  squared, extended, or rounded and specified with the corresponding\n  parameters :square, :project, and :round. The default cap is :round."}, blend-modes {:name quil.core/blend-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 49, :end-column 13, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 49, :column 2, :end-line 49, :end-column 13}}, no-fill {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "noFill()", :column 3, :requires-bindings true, :line 2556, :end-line 2556, :arglists (quote ([])), :doc "Disables filling geometry. If both no-stroke and no-fill are called,\n  nothing will be drawn to the screen."}, :added "1.0", :name quil.core/no-fill, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "noFill()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2550, :end-line 2556, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Disables filling geometry. If both no-stroke and no-fill are called,\n  nothing will be drawn to the screen."}, year {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "year()", :column 3, :requires-bindings false, :line 4452, :end-line 4452, :arglists (quote ([])), :doc "Returns the current year as an integer (2003, 2004, 2005, etc)."}, :added "1.0", :name quil.core/year, :variadic false, :subcategory "Time & Date", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "year()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 4446, :end-line 4452, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current year as an integer (2003, 2004, 2005, etc)."}, key-coded? {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.6", :subcategory "Keyboard", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name nil, :column 3, :requires-bindings false, :line 4734, :end-line 4734, :arglists (quote ([c])), :doc "Returns true if char c is a 'coded' char i.e. it is necessary to\n  fetch the key-code as an integer and use that to determine the\n  specific key pressed. See key-keyword."}, :added "1.6", :name quil.core/key-coded?, :variadic false, :subcategory "Keyboard", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name nil, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 4729, :end-line 4734, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Returns true if char c is a 'coded' char i.e. it is necessary to\n  fetch the key-code as an integer and use that to determine the\n  specific key pressed. See key-keyword."}, curve-tangent {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "curveTangent()", :column 3, :requires-bindings true, :line 1341, :end-line 1341, :arglists (quote ([a b c d t])), :doc "Calculates the tangent of a point on a curve.\n  See: http://en.wikipedia.org/wiki/Tangent"}, :added "1.0", :name quil.core/curve-tangent, :variadic false, :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :processing-name "curveTangent()", :method-params ([a b c d t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1335, :end-line 1341, :max-fixed-arity 5, :fn-var true, :arglists (quote ([a b c d t])), :doc "Calculates the tangent of a point on a curve.\n  See: http://en.wikipedia.org/wiki/Tangent"}, ellipse-modes {:name quil.core/ellipse-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 53, :end-column 15, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 53, :column 2, :end-line 53, :end-column 15}}, pmouse-y {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "pmouseY", :column 3, :requires-bindings true, :line 2833, :end-line 2833, :arglists (quote ([])), :doc "Vertical coordinate of the mouse in the previous frame"}, :added "1.0", :name quil.core/pmouse-y, :variadic false, :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "pmouseY", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2827, :end-line 2833, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Vertical coordinate of the mouse in the previous frame"}, hex {:category "Data", :protocol-inline nil, :meta {:category "Data", :require-binding false, :subcategory "Conversion", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([val] [val num-digits]), :arglists ([val] [val num-digits]), :arglists-meta (nil nil)}, :processing-name "hex()", :column 3, :line 1877, :end-line 1877, :arglists (quote ([val] [val num-digits])), :doc "Converts a byte, char, int, or color to a String containing the\n  equivalent hexadecimal notation. For example color(0, 102, 153) will\n  convert to the String \"FF006699\". This function can help make your\n  geeky debugging sessions much happier. "}, :require-binding false, :name quil.core/hex, :variadic false, :subcategory "Conversion", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([val] [val num-digits]), :arglists ([val] [val num-digits]), :arglists-meta (nil nil)}, :processing-name "hex()", :method-params ([val] [val num-digits]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1872, :end-line 1877, :max-fixed-arity 2, :fn-var true, :arglists ([val] [val num-digits]), :doc "Converts a byte, char, int, or color to a String containing the\n  equivalent hexadecimal notation. For example color(0, 102, 153) will\n  convert to the String \"FF006699\". This function can help make your\n  geeky debugging sessions much happier. "}, no-cursor {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "noCursor()", :column 3, :requires-bindings true, :line 2544, :end-line 2544, :arglists (quote ([])), :doc "Hides the cursor from view. Will not work when running the in full\n  screen (Present) mode."}, :added "1.0", :name quil.core/no-cursor, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "noCursor()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2538, :end-line 2544, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Hides the cursor from view. Will not work when running the in full\n  screen (Present) mode."}, create-font {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([name size] [name size smooth] [name size smooth charset]), :arglists ([name size] [name size smooth] [name size smooth charset]), :arglists-meta (nil nil nil)}, :processing-name "createFont()", :column 3, :requires-bindings true, :line 1135, :end-line 1135, :arglists (quote ([name size] [name size smooth] [name size smooth charset])), :doc "Dynamically converts a font to the format used by Processing (a\n  PFont) from either a font name that's installed on the computer, or\n  from a .ttf or .otf file inside the sketches 'data' folder. This\n  function is an advanced feature for precise control.\n\n  Use available-fonts to obtain the names for the fonts recognized by\n  the computer and are compatible with this function.\n\n  The size parameter states the font size you want to generate. The\n  smooth parameter specifies if the font should be antialiased or not,\n  and the charset parameter is an array of chars that specifies the\n  characters to generate.\n\n  This function creates a bitmapped version of a font It loads a font\n  by name, and converts it to a series of images based on the size of\n  the font. When possible, the text function will use a native font\n  rather than the bitmapped version created behind the scenes with\n  create-font. For instance, when using the default renderer\n  setting (JAVA2D), the actual native version of the font will be\n  employed by the sketch, improving drawing quality and\n  performance. With the :p2d, :p3d, and :opengl renderer settings, the\n  bitmapped version will be used. While this can drastically improve\n  speed and appearance, results are poor when exporting if the sketch\n  does not include the .otf or .ttf file, and the requested font is\n  not available on the machine running the sketch."}, :added "1.0", :name quil.core/create-font, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([name size] [name size smooth] [name size smooth charset]), :arglists ([name size] [name size smooth] [name size smooth charset]), :arglists-meta (nil nil nil)}, :processing-name "createFont()", :method-params ([name size] [name size smooth] [name size smooth charset]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 1129, :end-line 1135, :max-fixed-arity 4, :fn-var true, :arglists ([name size] [name size smooth] [name size smooth charset]), :doc "Dynamically converts a font to the format used by Processing (a\n  PFont) from either a font name that's installed on the computer, or\n  from a .ttf or .otf file inside the sketches 'data' folder. This\n  function is an advanced feature for precise control.\n\n  Use available-fonts to obtain the names for the fonts recognized by\n  the computer and are compatible with this function.\n\n  The size parameter states the font size you want to generate. The\n  smooth parameter specifies if the font should be antialiased or not,\n  and the charset parameter is an array of chars that specifies the\n  characters to generate.\n\n  This function creates a bitmapped version of a font It loads a font\n  by name, and converts it to a series of images based on the size of\n  the font. When possible, the text function will use a native font\n  rather than the bitmapped version created behind the scenes with\n  create-font. For instance, when using the default renderer\n  setting (JAVA2D), the actual native version of the font will be\n  employed by the sketch, improving drawing quality and\n  performance. With the :p2d, :p3d, and :opengl renderer settings, the\n  bitmapped version will be used. While this can drastically improve\n  speed and appearance, results are poor when exporting if the sketch\n  does not include the .otf or .ttf file, and the requested font is\n  not available on the machine running the sketch."}, current-graphics {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "2.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :column 3, :requires-bindings true, :line 33, :end-line 33, :tag PGraphics, :arglists (quote ([])), :doc "Graphics currently used for drawing. By default it is sketch graphics,\n  but if called inside with-graphics macro - graphics passed to the macro\n  is returned. This method should be used if you need to call some methods\n  that are not implemented by quil. Example:\n  (.beginDraw (current-graphics))."}, :added "2.0", :name quil.core/current-graphics, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 27, :ret-tag PGraphics, :end-line 33, :max-fixed-arity 0, :tag PGraphics, :fn-var true, :arglists (quote ([])), :doc "Graphics currently used for drawing. By default it is sketch graphics,\n  but if called inside with-graphics macro - graphics passed to the macro\n  is returned. This method should be used if you need to call some methods\n  that are not implemented by quil. Example:\n  (.beginDraw (current-graphics))."}, abs {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "abs()", :column 3, :requires-bindings false, :line 282, :end-line 282, :arglists (quote ([n])), :doc "Calculates the absolute value (magnitude) of a number. The\n  absolute value of a number is always positive. Dynamically casts to\n  an int or float appropriately"}, :added "1.0", :name quil.core/abs, :variadic false, :subcategory "Calculation", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "abs()", :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 276, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Calculates the absolute value (magnitude) of a number. The\n  absolute value of a number is always positive. Dynamically casts to\n  an int or float appropriately"}, pop-style {:category "Structure", :protocol-inline nil, :meta {:category "Structure", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "popStyle()", :column 3, :requires-bindings true, :line 2893, :end-line 2893, :arglists (quote ([])), :doc "Restores the prior settings on the 'style stack'. Used in\n  conjunction with push-style. Together they allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with push-style, it builds on the current style information.\n  The push-style and pop-style functions can be nested to provide more\n  control"}, :added "1.0", :name quil.core/pop-style, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "popStyle()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2887, :end-line 2893, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Restores the prior settings on the 'style stack'. Used in\n  conjunction with push-style. Together they allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with push-style, it builds on the current style information.\n  The push-style and pop-style functions can be nested to provide more\n  control"}, focused {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "focused", :column 3, :requires-bindings true, :line 1769, :end-line 1769, :arglists (quote ([])), :doc "Returns a boolean value representing whether the applet has focus."}, :added "1.0", :name quil.core/focused, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "focused", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1763, :end-line 1769, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a boolean value representing whether the applet has focus."}, background-float {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([gray] [gray alpha] [r g b] [r g b a]), :arglists ([gray] [gray alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "background()", :column 3, :requires-bindings true, :line 513, :end-line 513, :arglists (quote ([gray] [gray alpha] [r g b] [r g b a])), :doc "Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts args to floats."}, :added "1.0", :name quil.core/background-float, :variadic false, :subcategory "Setting", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([gray] [gray alpha] [r g b] [r g b a]), :arglists ([gray] [gray alpha] [r g b] [r g b a]), :arglists-meta (nil nil nil nil)}, :processing-name "background()", :method-params ([gray] [gray alpha] [r g b] [r g b a]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :requires-bindings true, :line 507, :end-line 513, :max-fixed-arity 4, :fn-var true, :arglists ([gray] [gray alpha] [r g b] [r g b a]), :doc "Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  create-graphics. Converts args to floats."}, text-mode {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "textMode()", :column 3, :requires-bindings true, :line 4153, :end-line 4153, :arglists (quote ([mode])), :doc "Sets the way text draws to the screen - available modes\n  are :model and :shape\n\n  In the default configuration (the :model mode), it's possible to\n  rotate, scale, and place letters in two and three dimensional space.\n\n  The :shape mode draws text using the glyph outlines of individual\n  characters rather than as textures. This mode is only supported with\n  the PDF and OPENGL renderer settings. With the PDF renderer, you\n  must specify the :shape text-mode before any other drawing occurs.\n  If the outlines are not available, then :shape will be ignored and\n  :model will be used instead.\n\n  The :shape option in OPENGL mode can be combined with begin-raw to\n  write vector-accurate text to 2D and 3D output files, for instance\n  DXF or PDF. :shape is not currently optimized for OPENGL, so if\n  recording shape data, use :model until you're ready to capture the\n  geometry with begin-raw."}, :added "1.0", :name quil.core/text-mode, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "textMode()", :method-params ([mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4147, :end-line 4153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mode])), :doc "Sets the way text draws to the screen - available modes\n  are :model and :shape\n\n  In the default configuration (the :model mode), it's possible to\n  rotate, scale, and place letters in two and three dimensional space.\n\n  The :shape mode draws text using the glyph outlines of individual\n  characters rather than as textures. This mode is only supported with\n  the PDF and OPENGL renderer settings. With the PDF renderer, you\n  must specify the :shape text-mode before any other drawing occurs.\n  If the outlines are not available, then :shape will be ignored and\n  :model will be used instead.\n\n  The :shape option in OPENGL mode can be combined with begin-raw to\n  write vector-accurate text to 2D and 3D output files, for instance\n  DXF or PDF. :shape is not currently optimized for OPENGL, so if\n  recording shape data, use :model until you're ready to capture the\n  geometry with begin-raw."}, image-mode {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "imageMode()", :column 3, :requires-bindings true, :line 2071, :end-line 2071, :arglists (quote ([mode])), :doc "Modifies the location from which images draw. The default mode is :corner.\n   Available modes are:\n\n  :corner  - specifies the location to be the upper left corner and\n             uses the fourth and fifth parameters of image to set the\n             image's width and height.\n\n  :corners - uses the second and third parameters of image to set the\n             location of one corner of the image and uses the fourth\n             and fifth parameters to set the opposite corner.\n\n  :center  - draw images centered at the given x and y position."}, :added "1.0", :name quil.core/image-mode, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 13, :processing-name "imageMode()", :method-params ([mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2065, :end-line 2071, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mode])), :doc "Modifies the location from which images draw. The default mode is :corner.\n   Available modes are:\n\n  :corner  - specifies the location to be the upper left corner and\n             uses the fourth and fifth parameters of image to set the\n             image's width and height.\n\n  :corners - uses the second and third parameters of image to set the\n             location of one corner of the image and uses the fourth\n             and fifth parameters to set the opposite corner.\n\n  :center  - draw images centered at the given x and y position."}, line {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([p1 p2] [x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :arglists ([p1 p2] [x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :arglists-meta (nil nil nil)}, :processing-name "line()", :column 3, :requires-bindings true, :line 2227, :end-line 2227, :arglists (quote ([p1 p2] [x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2])), :doc "Draws a line (a direct path between two points) to the screen. The\n  version of line with four parameters draws the line in 2D. To color\n  a line, use the stroke function. A line cannot be filled, therefore\n  the fill method will not affect the color of a line. 2D lines are\n  drawn with a width of one pixel by default, but this can be changed\n  with the stroke-weight function. The version with six parameters\n  allows the line to be placed anywhere within XYZ space. "}, :added "1.0", :name quil.core/line, :variadic false, :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([p1 p2] [x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :arglists ([p1 p2] [x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :arglists-meta (nil nil nil)}, :processing-name "line()", :method-params ([p1 p2] [x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 2221, :end-line 2227, :max-fixed-arity 6, :fn-var true, :arglists ([p1 p2] [x1 y1 x2 y2] [x1 y1 z1 x2 y2 z2]), :doc "Draws a line (a direct path between two points) to the screen. The\n  version of line with four parameters draws the line in 2D. To color\n  a line, use the stroke function. A line cannot be filled, therefore\n  the fill method will not affect the color of a line. 2D lines are\n  drawn with a width of one pixel by default, but this can be changed\n  with the stroke-weight function. The version with six parameters\n  allows the line to be placed anywhere within XYZ space. "}, red {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "red()", :column 3, :requires-bindings true, :line 3182, :end-line 3182, :arglists (quote ([c])), :doc "Extracts the red value from a color, scaled to match current color-mode."}, :added "1.0", :name quil.core/red, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "red()", :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3176, :end-line 3182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Extracts the red value from a color, scaled to match current color-mode."}, current-fill {:category "Color", :protocol-inline nil, :meta {:category "Color", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "PGraphics.fillColor", :column 3, :processing-link "http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#fillColor", :requires-bindings true, :line 1232, :end-line 1232, :arglists (quote ([])), :doc "Return the current fill color."}, :name quil.core/current-fill, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "PGraphics.fillColor", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :processing-link "http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#fillColor", :requires-bindings true, :line 1226, :end-line 1232, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return the current fill color."}, color-modes {:name quil.core/color-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 51, :end-column 13, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 51, :column 2, :end-line 51, :end-column 13}}, blue {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "blue()", :column 3, :requires-bindings true, :line 906, :end-line 906, :arglists (quote ([color])), :doc "Extracts the blue value from a color, scaled to match current color-mode.\n  Returns a float."}, :added "1.0", :name quil.core/blue, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "blue()", :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 900, :end-line 906, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Extracts the blue value from a color, scaled to match current color-mode.\n  Returns a float."}, frustum {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "frustum()", :column 3, :requires-bindings true, :line 1823, :end-line 1823, :arglists (quote ([left right bottom top near far])), :doc "Sets a perspective matrix defined through the parameters. Works\n  like glFrustum, except it wipes out the current perspective matrix\n  rather than muliplying itself with it."}, :added "1.0", :name quil.core/frustum, :variadic false, :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "frustum()", :method-params ([left right bottom top near far]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1817, :end-line 1823, :max-fixed-arity 6, :fn-var true, :arglists (quote ([left right bottom top near far])), :doc "Sets a perspective matrix defined through the parameters. Works\n  like glFrustum, except it wipes out the current perspective matrix\n  rather than muliplying itself with it."}, print-matrix {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "printMatrix()", :column 3, :requires-bindings true, :line 2936, :end-line 2936, :arglists (quote ([])), :doc "Prints the current matrix to std out. Useful for debugging."}, :added "1.0", :name quil.core/print-matrix, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "printMatrix()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2930, :end-line 2936, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Prints the current matrix to std out. Useful for debugging."}, ambient-light {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([red green blue] [red green blue x y z]), :arglists ([red green blue] [red green blue x y z]), :arglists-meta (nil nil)}, :processing-name "ambientLight()", :column 3, :requires-bindings true, :line 376, :end-line 376, :arglists (quote ([red green blue] [red green blue x y z])), :doc "Adds an ambient light. Ambient light doesn't come from a specific direction,\n  the rays have light have bounced around so much that objects are\n  evenly lit from all sides. Ambient lights are almost always used in\n  combination with other types of lights. Lights need to be included\n  in the draw to remain persistent in a looping program. Placing them\n  in the setup of a looping program will cause them to only have an\n  effect the first time through the loop. The effect of the\n  parameters is determined by the current color mode."}, :added "1.0", :name quil.core/ambient-light, :variadic false, :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([red green blue] [red green blue x y z]), :arglists ([red green blue] [red green blue x y z]), :arglists-meta (nil nil)}, :processing-name "ambientLight()", :method-params ([red green blue] [red green blue x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 370, :end-line 376, :max-fixed-arity 6, :fn-var true, :arglists ([red green blue] [red green blue x y z]), :doc "Adds an ambient light. Ambient light doesn't come from a specific direction,\n  the rays have light have bounced around so much that objects are\n  evenly lit from all sides. Ambient lights are almost always used in\n  combination with other types of lights. Lights need to be included\n  in the draw to remain persistent in a looping program. Placing them\n  in the setup of a looping program will cause them to only have an\n  effect the first time through the loop. The effect of the\n  parameters is determined by the current color mode."}, bezier-point {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "bezierPoint()", :column 3, :requires-bindings true, :line 707, :end-line 707, :arglists (quote ([a b c d t])), :doc "Evaluates the Bezier at point t for points a, b, c, d. The\n  parameter t varies between 0 and 1, a and d are points on the curve,\n  and b and c are the control points. This can be done once with the x\n  coordinates and a second time with the y coordinates to get the\n  location of a bezier curve at t."}, :added "1.0", :name quil.core/bezier-point, :variadic false, :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "bezierPoint()", :method-params ([a b c d t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 701, :end-line 707, :max-fixed-arity 5, :fn-var true, :arglists (quote ([a b c d t])), :doc "Evaluates the Bezier at point t for points a, b, c, d. The\n  parameter t varies between 0 and 1, a and d are points on the curve,\n  and b and c are the control points. This can be done once with the x\n  coordinates and a second time with the y coordinates to get the\n  location of a bezier curve at t."}, stroke-cap-modes {:name quil.core/stroke-cap-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 65, :end-column 18, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 65, :column 2, :end-line 65, :end-column 18}}, quad {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "quad()", :column 3, :requires-bindings true, :line 3000, :end-line 3000, :arglists (quote ([x1 y1 x2 y2 x3 y3 x4 y4])), :doc "A quad is a quadrilateral, a four sided polygon. It is similar to a\n  rectangle, but the angles between its edges are not constrained to\n  be ninety degrees. The first pair of parameters (x1,y1) sets the\n  first vertex and the subsequent pairs should proceed clockwise or\n  counter-clockwise around the defined shape."}, :added "1.0", :name quil.core/quad, :variadic false, :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 7, :processing-name "quad()", :method-params ([x1 y1 x2 y2 x3 y3 x4 y4]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2994, :end-line 3000, :max-fixed-arity 8, :fn-var true, :arglists (quote ([x1 y1 x2 y2 x3 y3 x4 y4])), :doc "A quad is a quadrilateral, a four sided polygon. It is similar to a\n  rectangle, but the angles between its edges are not constrained to\n  be ninety degrees. The first pair of parameters (x1,y1) sets the\n  first vertex and the subsequent pairs should proceed clockwise or\n  counter-clockwise around the defined shape."}, screen-x {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :processing-name "screenX()", :column 3, :requires-bindings true, :line 3491, :end-line 3491, :arglists (quote ([x y] [x y z])), :doc "Takes a three-dimensional x, y, z position and returns the x value\n  for where it will appear on a (two-dimensional) screen, once\n  affected by translate, scale or any other transformations"}, :added "1.0", :name quil.core/screen-x, :variadic false, :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :processing-name "screenX()", :method-params ([x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3485, :end-line 3491, :max-fixed-arity 3, :fn-var true, :arglists ([x y] [x y z]), :doc "Takes a three-dimensional x, y, z position and returns the x value\n  for where it will appear on a (two-dimensional) screen, once\n  affected by translate, scale or any other transformations"}, lights {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "lights()", :column 3, :requires-bindings true, :line 2188, :end-line 2188, :arglists (quote ([])), :doc "Sets the default ambient light, directional light, falloff, and\n  specular values. The defaults are:\n\n  (ambient-light 128 128 128)\n  (directional-light 128 128 128 0 0 -1)\n  (light-falloff 1 0 0)\n  (light-specular 0 0 0).\n\n  Lights need to be included in the draw to remain persistent in a\n  looping program. Placing them in the setup of a looping program\n  will cause them to only have an effect the first time through the\n  loop."}, :added "1.0", :name quil.core/lights, :variadic false, :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "lights()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2182, :end-line 2188, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Sets the default ambient light, directional light, falloff, and\n  specular values. The defaults are:\n\n  (ambient-light 128 128 128)\n  (directional-light 128 128 128 0 0 -1)\n  (light-falloff 1 0 0)\n  (light-specular 0 0 0).\n\n  Lights need to be included in the draw to remain persistent in a\n  looping program. Placing them in the setup of a looping program\n  will cause them to only have an effect the first time through the\n  loop."}, *graphics* {:name quil.core/*graphics*, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 21, :column 1, :end-line 23, :end-column 13, :dynamic true, :private true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 23, :column 3, :end-line 23, :end-column 13, :dynamic true, :private true}}, KEY-CODES {:name quil.core/KEY-CODES, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 123, :column 1, :end-line 124, :end-column 12, :private true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 124, :column 3, :end-line 124, :end-column 12, :private true}}, curve-detail {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "curveDetail()", :column 3, :requires-bindings true, :line 1312, :end-line 1312, :arglists (quote ([detail])), :doc "Sets the resolution at which curves display. The default value is\n  20. This function is only useful when using the :p3d or :opengl\n  renderer as the default (:java2d) renderer does not use this\n  information."}, :added "1.0", :name quil.core/curve-detail, :variadic false, :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "curveDetail()", :method-params ([detail]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1306, :end-line 1312, :max-fixed-arity 1, :fn-var true, :arglists (quote ([detail])), :doc "Sets the resolution at which curves display. The default value is\n  20. This function is only useful when using the :p3d or :opengl\n  renderer as the default (:java2d) renderer does not use this\n  information."}, current-frame-rate {:category "Environment", :protocol-inline nil, :meta {:category "Environment", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 21, :processing-name "frameRate", :column 3, :requires-bindings true, :line 1793, :end-line 1793, :arglists (quote ([])), :doc "Returns the current framerate"}, :added "1.0", :name quil.core/current-frame-rate, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 21, :processing-name "frameRate", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1787, :end-line 1793, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the current framerate"}, end-contour {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "2.0", :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "endContour()", :column 3, :requires-bindings true, :line 1567, :end-line 1567, :arglists (quote ([])), :doc "Use the begin-contour and end-contour function to create negative\n  shapes within shapes. These functions can only be within a\n  begin-shape/end-shape pair and they only work with the :p2d and :p3d\n  renderers."}, :added "2.0", :name quil.core/end-contour, :variadic false, :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "endContour()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1561, :end-line 1567, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Use the begin-contour and end-contour function to create negative\n  shapes within shapes. These functions can only be within a\n  begin-shape/end-shape pair and they only work with the :p2d and :p3d\n  renderers."}, sin {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "sin()", :column 3, :requires-bindings false, :line 3712, :end-line 3712, :arglists (quote ([angle])), :doc "Calculates the sine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  6.28). A float within the range -1 to 1 is returned."}, :added "1.0", :name quil.core/sin, :variadic false, :subcategory "Trigonometry", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 6, :processing-name "sin()", :method-params ([angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings false, :line 3706, :end-line 3712, :max-fixed-arity 1, :fn-var true, :arglists (quote ([angle])), :doc "Calculates the sine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  6.28). A float within the range -1 to 1 is returned."}, current-stroke {:category "Color", :protocol-inline nil, :meta {:category "Color", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :processing-name "PGraphics.strokeColor", :column 3, :processing-link "http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#strokeColor", :requires-bindings true, :line 1243, :end-line 1243, :arglists (quote ([])), :doc "Return the current stroke color."}, :name quil.core/current-stroke, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 17, :processing-name "PGraphics.strokeColor", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :processing-link "http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#strokeColor", :requires-bindings true, :line 1237, :end-line 1243, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return the current stroke color."}, curve {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 12, :method-params ([x1 y1 x2 y2 x3 y3 x4 y4] [x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4]), :arglists ([x1 y1 x2 y2 x3 y3 x4 y4] [x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4]), :arglists-meta (nil nil)}, :processing-name "curve()", :column 3, :requires-bindings true, :line 1284, :end-line 1284, :arglists (quote ([x1 y1 x2 y2 x3 y3 x4 y4] [x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4])), :doc "Draws a curved line on the screen. The first and second parameters\n  specify the beginning control point and the last two parameters\n  specify the ending control point. The middle parameters specify the\n  start and stop of the curve. Longer curves can be created by putting\n  a series of curve fns together or using curve-vertex. An additional\n  fn called curve-tightness provides control for the visual quality of\n  the curve. The curve fn is an implementation of Catmull-Rom\n  splines."}, :added "1.0", :name quil.core/curve, :variadic false, :subcategory "Curves", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 12, :method-params ([x1 y1 x2 y2 x3 y3 x4 y4] [x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4]), :arglists ([x1 y1 x2 y2 x3 y3 x4 y4] [x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4]), :arglists-meta (nil nil)}, :processing-name "curve()", :method-params ([x1 y1 x2 y2 x3 y3 x4 y4] [x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1278, :end-line 1284, :max-fixed-arity 12, :fn-var true, :arglists ([x1 y1 x2 y2 x3 y3 x4 y4] [x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4]), :doc "Draws a curved line on the screen. The first and second parameters\n  specify the beginning control point and the last two parameters\n  specify the ending control point. The middle parameters specify the\n  start and stop of the curve. Longer curves can be created by putting\n  a series of curve fns together or using curve-vertex. An additional\n  fn called curve-tightness provides control for the visual quality of\n  the curve. The curve fn is an implementation of Catmull-Rom\n  splines."}, shape {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([sh] [sh x y] [sh x y width height]), :arglists ([sh] [sh x y] [sh x y width height]), :arglists-meta (nil nil nil)}, :processing-name "shape()", :column 3, :requires-bindings true, :line 3600, :end-line 3600, :arglists (quote ([sh] [sh x y] [sh x y width height])), :doc "Displays shapes to the screen. The shapes must have been loaded\n  with load-shape. Processing currently works with SVG shapes\n  only. The sh parameter specifies the shape to display and the x and\n  y parameters define the location of the shape from its upper-left\n  corner. The shape is displayed at its original size unless the width\n  and height parameters specify a different size. The shape-mode\n  fn changes the way the parameters work. A call to\n  (shape-mode :corners), for example, will change the width and height\n  parameters to define the x and y values of the opposite corner of\n  the shape.\n\n  Note complex shapes may draw awkwardly with the renderers :p2d, :p3d, and\n  :opengl. Those renderers do not yet support shapes that have holes\n  or complicated breaks."}, :added "1.0", :name quil.core/shape, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([sh] [sh x y] [sh x y width height]), :arglists ([sh] [sh x y] [sh x y width height]), :arglists-meta (nil nil nil)}, :processing-name "shape()", :method-params ([sh] [sh x y] [sh x y width height]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 3594, :end-line 3600, :max-fixed-arity 5, :fn-var true, :arglists ([sh] [sh x y] [sh x y width height]), :doc "Displays shapes to the screen. The shapes must have been loaded\n  with load-shape. Processing currently works with SVG shapes\n  only. The sh parameter specifies the shape to display and the x and\n  y parameters define the location of the shape from its upper-left\n  corner. The shape is displayed at its original size unless the width\n  and height parameters specify a different size. The shape-mode\n  fn changes the way the parameters work. A call to\n  (shape-mode :corners), for example, will change the width and height\n  parameters to define the x and y values of the opposite corner of\n  the shape.\n\n  Note complex shapes may draw awkwardly with the renderers :p2d, :p3d, and\n  :opengl. Those renderers do not yet support shapes that have holes\n  or complicated breaks."}, image-formats {:name quil.core/image-formats, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 52, :end-column 15, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 52, :column 2, :end-line 52, :end-column 15}}, text-descent {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Metrics", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "textDescent()", :column 3, :requires-bindings true, :line 4101, :end-line 4101, :arglists (quote ([])), :doc "Returns descent of the current font at its current size. This\n  information is useful for determining the height of the font below\n  the baseline. For example, adding the text-ascent and text-descent\n  values will give you the total height of the line."}, :added "1.0", :name quil.core/text-descent, :variadic false, :subcategory "Metrics", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "textDescent()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4095, :end-line 4101, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns descent of the current font at its current size. This\n  information is useful for determining the height of the font below\n  the baseline. For example, adding the text-ascent and text-descent\n  values will give you the total height of the line."}, screen-z {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "screenZ()", :column 3, :requires-bindings true, :line 3517, :end-line 3517, :arglists (quote ([x y z])), :doc "Given an x, y, z coordinate, returns its z value.\n   This value can be used to determine if an x, y, z coordinate is in\n   front or in back of another (x, y, z) coordinate. The units are\n   based on how the zbuffer is set up, and don't relate to anything\n   'real'. They're only useful for in comparison to another value\n   obtained from screen-z, or directly out of the zbuffer"}, :added "1.0", :name quil.core/screen-z, :variadic false, :subcategory "Coordinates", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "screenZ()", :method-params ([x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3511, :end-line 3517, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y z])), :doc "Given an x, y, z coordinate, returns its z value.\n   This value can be used to determine if an x, y, z coordinate is in\n   front or in back of another (x, y, z) coordinate. The units are\n   based on how the zbuffer is set up, and don't relate to anything\n   'real'. They're only useful for in comparison to another value\n   obtained from screen-z, or directly out of the zbuffer"}, ambient-int {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "ambient()", :column 3, :requires-bindings true, :line 342, :end-line 342, :arglists (quote ([rgb])), :doc "Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The rgb\n  color components set define the reflectance. Used in combination\n  with emissive, specular, and shininess in setting the material\n  properties of shapes."}, :added "1.0", :name quil.core/ambient-int, :variadic false, :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "ambient()", :method-params ([rgb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 336, :end-line 342, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rgb])), :doc "Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The rgb\n  color components set define the reflectance. Used in combination\n  with emissive, specular, and shininess in setting the material\n  properties of shapes."}, ellipse {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "ellipse()", :column 3, :requires-bindings true, :line 1474, :end-line 1474, :arglists (quote ([x y width height])), :doc "Draws an ellipse (oval) in the display window. An ellipse with an\n  equal width and height is a circle.  The origin may be changed with\n  the ellipse-mode function"}, :added "1.0", :name quil.core/ellipse, :variadic false, :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "ellipse()", :method-params ([x y width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1468, :end-line 1474, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y width height])), :doc "Draws an ellipse (oval) in the display window. An ellipse with an\n  equal width and height is a circle.  The origin may be changed with\n  the ellipse-mode function"}, text-leading {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "textLeading()", :column 3, :requires-bindings true, :line 4141, :end-line 4141, :arglists (quote ([leading])), :doc "Sets the spacing between lines of text in units of pixels. This\n  setting will be used in all subsequent calls to the text function."}, :added "1.0", :name quil.core/text-leading, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "textLeading()", :method-params ([leading]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4135, :end-line 4141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([leading])), :doc "Sets the spacing between lines of text in units of pixels. This\n  setting will be used in all subsequent calls to the text function."}, image-filter {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "2.0", :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([img mode] [img mode level]), :arglists ([img mode] [img mode level]), :arglists-meta (nil nil)}, :processing-name "PImage.filter()", :column 3, :requires-bindings true, :line 2031, :end-line 2031, :arglists (quote ([img mode] [img mode level])), :doc "Originally named filter in Processing Language.\n  Filters given image with the specified mode and level.\n  Level defines the quality of the filter and mode may be one of\n  the following keywords:\n\n  :threshold - converts the image to black and white pixels depending\n               if they are above or below the threshold defined by\n               the level parameter. The level must be between\n               0.0 (black) and 1.0 (white). If no level is specified,\n               0.5 is used.\n  :gray      - converts any colors in the image to grayscale\n               equivalents. Doesn't work with level.\n  :invert    - sets each pixel to its inverse value. Doesn't work with\n               level.\n  :posterize - limits each channel of the image to the number of\n               colors specified as the level parameter. The parameter can\n               be set to values between 2 and 255, but results are most\n               noticeable in the lower ranges.\n  :blur      - executes a Guassian blur with the level parameter\n               specifying the extent of the blurring. If no level\n               parameter is used, the blur is equivalent to Guassian\n               blur of radius 1.\n  :opaque    - sets the alpha channel to entirely opaque. Doesn't work\n               with level.\n  :erode     - reduces the light areas. Doesn't work with level.\n  :dilate    - increases the light areas.  Doesn't work with level."}, :added "2.0", :name quil.core/image-filter, :variadic false, :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([img mode] [img mode level]), :arglists ([img mode] [img mode level]), :arglists-meta (nil nil)}, :processing-name "PImage.filter()", :method-params ([img mode] [img mode level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2025, :end-line 2031, :max-fixed-arity 3, :fn-var true, :arglists ([img mode] [img mode level]), :doc "Originally named filter in Processing Language.\n  Filters given image with the specified mode and level.\n  Level defines the quality of the filter and mode may be one of\n  the following keywords:\n\n  :threshold - converts the image to black and white pixels depending\n               if they are above or below the threshold defined by\n               the level parameter. The level must be between\n               0.0 (black) and 1.0 (white). If no level is specified,\n               0.5 is used.\n  :gray      - converts any colors in the image to grayscale\n               equivalents. Doesn't work with level.\n  :invert    - sets each pixel to its inverse value. Doesn't work with\n               level.\n  :posterize - limits each channel of the image to the number of\n               colors specified as the level parameter. The parameter can\n               be set to values between 2 and 255, but results are most\n               noticeable in the lower ranges.\n  :blur      - executes a Guassian blur with the level parameter\n               specifying the extent of the blurring. If no level\n               parameter is used, the blur is equivalent to Guassian\n               blur of radius 1.\n  :opaque    - sets the alpha channel to entirely opaque. Doesn't work\n               with level.\n  :erode     - reduces the light areas. Doesn't work with level.\n  :dilate    - increases the light areas.  Doesn't work with level."}, random {:category "Math", :protocol-inline nil, :meta {:category "Math", :added "1.0", :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([max] [min max]), :arglists ([max] [min max]), :arglists-meta (nil nil)}, :processing-name "random()", :column 3, :requires-bindings true, :line 3056, :end-line 3056, :arglists (quote ([max] [min max])), :doc "Generates random numbers. Each time the random function is called,\n  it returns an unexpected value within the specified range. If one\n  parameter is passed to the function it will return a float between\n  zero and the value of the high parameter. The function call (random\n  5) returns values between 0 and 5 (starting at zero, up to but not\n  including 5). If two parameters are passed, it will return a float\n  with a value between the parameters. The function call\n  (random -5 10.2) returns values starting at -5 up to (but not\n  including) 10.2."}, :added "1.0", :name quil.core/random, :variadic false, :subcategory "Random", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([max] [min max]), :arglists ([max] [min max]), :arglists-meta (nil nil)}, :processing-name "random()", :method-params ([max] [min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3050, :end-line 3056, :max-fixed-arity 2, :fn-var true, :arglists ([max] [min max]), :doc "Generates random numbers. Each time the random function is called,\n  it returns an unexpected value within the specified range. If one\n  parameter is passed to the function it will return a float between\n  zero and the value of the high parameter. The function call (random\n  5) returns values between 0 and 5 (starting at zero, up to but not\n  including 5). If two parameters are passed, it will return a float\n  with a value between the parameters. The function call\n  (random -5 10.2) returns values starting at -5 up to (but not\n  including) 10.2."}, texture-mode {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "textureMode()", :column 3, :requires-bindings true, :line 4213, :end-line 4213, :arglists (quote ([mode])), :doc "Sets the coordinate space for texture mapping. There are two\n  options, :image and :normal.\n\n  :image refers to the actual coordinates of the image and :normal\n  refers to a normalized space of values ranging from 0 to 1. The\n  default mode is :image. In :image, if an image is 100 x 200 pixels,\n  mapping the image onto the entire size of a quad would require the\n  points (0,0) (0,100) (100,200) (0,200). The same mapping in\n  NORMAL_SPACE is (0,0) (0,1) (1,1) (0,1)."}, :added "1.0", :name quil.core/texture-mode, :variadic false, :subcategory "Vertex", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "textureMode()", :method-params ([mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 4207, :end-line 4213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mode])), :doc "Sets the coordinate space for texture mapping. There are two\n  options, :image and :normal.\n\n  :image refers to the actual coordinates of the image and :normal\n  refers to a normalized space of values ranging from 0 to 1. The\n  default mode is :image. In :image, if an image is 100 x 200 pixels,\n  mapping the image onto the entire size of a quad would require the\n  points (0,0) (0,100) (100,200) (0,200). The same mapping in\n  NORMAL_SPACE is (0,0) (0,1) (1,1) (0,1)."}, redraw {:category "Structure", :protocol-inline nil, :meta {:category "Structure", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "redraw()", :column 3, :requires-bindings true, :line 3193, :end-line 3193, :arglists (quote ([])), :doc "Executes the code within the draw fn one time. This functions\n  allows the program to update the display window only when necessary,\n  for example when an event registered by mouse-pressed or\n  key-pressed occurs.\n\n  In structuring a program, it only makes sense to call redraw\n  within events such as mouse-pressed. This is because redraw does\n  not run draw immediately (it only sets a flag that indicates an\n  update is needed).\n\n  Calling redraw within draw has no effect because draw is\n  continuously called anyway."}, :added "1.0", :name quil.core/redraw, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :processing-name "redraw()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3187, :end-line 3193, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Executes the code within the draw fn one time. This functions\n  allows the program to update the display window only when necessary,\n  for example when an event registered by mouse-pressed or\n  key-pressed occurs.\n\n  In structuring a program, it only makes sense to call redraw\n  within events such as mouse-pressed. This is because redraw does\n  not run draw immediately (it only sets a flag that indicates an\n  update is needed).\n\n  Calling redraw within draw has no effect because draw is\n  continuously called anyway."}, RAD-TO-DEG {:name quil.core/RAD-TO-DEG, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 84, :column 1, :end-line 84, :end-column 16, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 84, :column 6, :end-line 84, :end-column 16}}, get-pixel {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([] [img] [x y] [img x y] [x y w h] [img x y w h]), :arglists ([] [img] [x y] [img x y] [x y w h] [img x y w h]), :arglists-meta (nil nil nil nil nil nil)}, :processing-name "get()", :column 3, :requires-bindings true, :line 1837, :end-line 1837, :arglists (quote ([] [img] [x y] [img x y] [x y w h] [img x y w h])), :doc "Reads the color of any pixel or grabs a section of an image. If no\n  parameters are specified, a copy of entire image is returned. Get the\n  value of one pixel by specifying an x,y coordinate. Get a section of\n  the image by specifying an additional width and height parameter.\n  If the pixel requested is outside of the image window, black is returned.\n  The numbers returned are scaled according to the current color ranges,\n  but only RGB values are returned by this function. For example, even though\n  you may have drawn a shape with (color-mode :hsb), the numbers returned\n  will be in RGB.\n\n  Getting the color of a single pixel with (get x y) is easy, but not\n  as fast as grabbing the data directly using the pixels fn.\n\n  If no img specified - current-graphics is used."}, :added "1.0", :name quil.core/get-pixel, :variadic false, :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([] [img] [x y] [img x y] [x y w h] [img x y w h]), :arglists ([] [img] [x y] [img x y] [x y w h] [img x y w h]), :arglists-meta (nil nil nil nil nil nil)}, :processing-name "get()", :method-params ([] [img] [x y] [img x y] [x y w h] [img x y w h]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :requires-bindings true, :line 1831, :end-line 1837, :max-fixed-arity 5, :fn-var true, :arglists ([] [img] [x y] [img x y] [x y w h] [img x y w h]), :doc "Reads the color of any pixel or grabs a section of an image. If no\n  parameters are specified, a copy of entire image is returned. Get the\n  value of one pixel by specifying an x,y coordinate. Get a section of\n  the image by specifying an additional width and height parameter.\n  If the pixel requested is outside of the image window, black is returned.\n  The numbers returned are scaled according to the current color ranges,\n  but only RGB values are returned by this function. For example, even though\n  you may have drawn a shape with (color-mode :hsb), the numbers returned\n  will be in RGB.\n\n  Getting the color of a single pixel with (get x y) is easy, but not\n  as fast as grabbing the data directly using the pixels fn.\n\n  If no img specified - current-graphics is used."}, rotate {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([angle] [angle vx vy vz]), :arglists ([angle] [angle vx vy vz]), :arglists-meta (nil nil)}, :processing-name "rotate()", :column 3, :requires-bindings true, :line 3287, :end-line 3287, :arglists (quote ([angle] [angle vx vy vz])), :doc "Rotates a shape the amount specified by the angle parameter. Angles\n  should be specified in radians (values from 0 to TWO-PI) or\n  converted to radians with the radians function.\n\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a clockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate HALF-PI) and then (rotate HALF-PI) is the\n  same as (rotate PI). All tranformations are reset when draw begins\n  again.\n\n  Technically, rotate multiplies the current transformation matrix by\n  a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix."}, :added "1.0", :name quil.core/rotate, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([angle] [angle vx vy vz]), :arglists ([angle] [angle vx vy vz]), :arglists-meta (nil nil)}, :processing-name "rotate()", :method-params ([angle] [angle vx vy vz]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3281, :end-line 3287, :max-fixed-arity 4, :fn-var true, :arglists ([angle] [angle vx vy vz]), :doc "Rotates a shape the amount specified by the angle parameter. Angles\n  should be specified in radians (values from 0 to TWO-PI) or\n  converted to radians with the radians function.\n\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a clockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling (rotate HALF-PI) and then (rotate HALF-PI) is the\n  same as (rotate PI). All tranformations are reset when draw begins\n  again.\n\n  Technically, rotate multiplies the current transformation matrix by\n  a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix."}, set-pixel {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([x y c] [img x y c]), :arglists ([x y c] [img x y c]), :arglists-meta (nil nil)}, :processing-name "set()", :column 3, :requires-bindings true, :line 3545, :end-line 3545, :arglists (quote ([x y c] [img x y c])), :doc "Changes the color of any pixel in the display window. The x and y\n  parameters specify the pixel to change and the color parameter\n  specifies the color value. The color parameter is affected by the\n  current color mode (the default is RGB values from 0 to 255).\n\n  Setting the color of a single pixel with (set x, y) is easy, but not\n  as fast as putting the data directly into pixels[].\n\n  This function ignores imageMode().\n\n  Due to what appears to be a bug in Apple's Java implementation, the\n  point() and set() methods are extremely slow in some circumstances\n  when used with the default renderer. Using :p2d or :p3d will fix the\n  problem. Grouping many calls to point or set-pixel together can also\n  help. (Bug 1094)"}, :added "1.0", :name quil.core/set-pixel, :variadic false, :subcategory "Pixels", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([x y c] [img x y c]), :arglists ([x y c] [img x y c]), :arglists-meta (nil nil)}, :processing-name "set()", :method-params ([x y c] [img x y c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3539, :end-line 3545, :max-fixed-arity 4, :fn-var true, :arglists ([x y c] [img x y c]), :doc "Changes the color of any pixel in the display window. The x and y\n  parameters specify the pixel to change and the color parameter\n  specifies the color value. The color parameter is affected by the\n  current color mode (the default is RGB values from 0 to 255).\n\n  Setting the color of a single pixel with (set x, y) is easy, but not\n  as fast as putting the data directly into pixels[].\n\n  This function ignores imageMode().\n\n  Due to what appears to be a bug in Apple's Java implementation, the\n  point() and set() methods are extremely slow in some circumstances\n  when used with the default renderer. Using :p2d or :p3d will fix the\n  problem. Grouping many calls to point or set-pixel together can also\n  help. (Bug 1094)"}, push-matrix {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "pushMatrix()", :column 3, :requires-bindings true, :line 2959, :end-line 2959, :arglists (quote ([])), :doc "Pushes the current transformation matrix onto the matrix\n  stack. Understanding push-matrix and pop-matrix requires\n  understanding the concept of a matrix stack. The push-matrix\n  function saves the current coordinate system to the stack and\n  pop-matrix restores the prior coordinate system. push-matrix and\n  pop-matrix are used in conjuction with the other transformation\n  methods and may be embedded to control the scope of the\n  transformations."}, :added "1.0", :name quil.core/push-matrix, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 14, :processing-name "pushMatrix()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2953, :end-line 2959, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Pushes the current transformation matrix onto the matrix\n  stack. Understanding push-matrix and pop-matrix requires\n  understanding the concept of a matrix stack. The push-matrix\n  function saves the current coordinate system to the stack and\n  pop-matrix restores the prior coordinate system. push-matrix and\n  pop-matrix are used in conjuction with the other transformation\n  methods and may be embedded to control the scope of the\n  transformations."}, no-smooth {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "noSmooth()", :column 3, :requires-bindings true, :line 2717, :end-line 2717, :arglists (quote ([])), :doc "Draws all geometry with jagged (aliased) edges. Clojure: must be\n  called inside :settings function. ClojureScript: can be called\n  anywhere."}, :added "1.0", :name quil.core/no-smooth, :variadic false, :subcategory "Attributes", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "noSmooth()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2711, :end-line 2717, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Draws all geometry with jagged (aliased) edges. Clojure: must be\n  called inside :settings function. ClojureScript: can be called\n  anywhere."}, alpha {:category "Color", :protocol-inline nil, :meta {:category "Color", :added "1.0", :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "alpha()", :column 3, :requires-bindings true, :line 314, :end-line 314, :arglists (quote ([color])), :doc "Extracts the alpha value from a color."}, :added "1.0", :name quil.core/alpha, :variadic false, :subcategory "Creating & Reading", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :processing-name "alpha()", :method-params ([color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 308, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([color])), :doc "Extracts the alpha value from a color."}, camera {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 9, :method-params ([] [eyeX eyeY eyeZ centerX centerY centerZ upX upY upZ]), :arglists ([] [eyeX eyeY eyeZ centerX centerY centerZ upX upY upZ]), :arglists-meta (nil nil)}, :processing-name "camera()", :column 3, :requires-bindings true, :line 940, :end-line 940, :arglists (quote ([] [eyeX eyeY eyeZ centerX centerY centerZ upX upY upZ])), :doc "Sets the position of the camera through setting the eye position,\n  the center of the scene, and which axis is facing upward. Moving the\n  eye position and the direction it is pointing (the center of the\n  scene) allows the images to be seen from different angles. The\n  version without any parameters sets the camera to the default\n  position, pointing to the center of the display window with the Y\n  axis as up. The default values are:\n\n  eyeX:     (/ (width) 2.0)\n  eyeY:     (/ (height) 2.0)\n  eyeZ:     (/ (/ (height) 2.0) (tan (/ (* Math/PI 60.0) 360.0)))\n  centerX:  (/ (width) 2.0)\n  centerY:  (/ (height) 2.0)\n  centerZ:  0\n  upX:      0\n  upY:      1\n  upZ:      0\n\n  Similar imilar to gluLookAt() in OpenGL, but it first clears the\n  current camera settings."}, :added "1.0", :name quil.core/camera, :variadic false, :subcategory "Camera", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 9, :top-fn {:variadic false, :max-fixed-arity 9, :method-params ([] [eyeX eyeY eyeZ centerX centerY centerZ upX upY upZ]), :arglists ([] [eyeX eyeY eyeZ centerX centerY centerZ upX upY upZ]), :arglists-meta (nil nil)}, :processing-name "camera()", :method-params ([] [eyeX eyeY eyeZ centerX centerY centerZ upX upY upZ]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 934, :end-line 940, :max-fixed-arity 9, :fn-var true, :arglists ([] [eyeX eyeY eyeZ centerX centerY centerZ upX upY upZ]), :doc "Sets the position of the camera through setting the eye position,\n  the center of the scene, and which axis is facing upward. Moving the\n  eye position and the direction it is pointing (the center of the\n  scene) allows the images to be seen from different angles. The\n  version without any parameters sets the camera to the default\n  position, pointing to the center of the display window with the Y\n  axis as up. The default values are:\n\n  eyeX:     (/ (width) 2.0)\n  eyeY:     (/ (height) 2.0)\n  eyeZ:     (/ (/ (height) 2.0) (tan (/ (* Math/PI 60.0) 360.0)))\n  centerX:  (/ (width) 2.0)\n  centerY:  (/ (height) 2.0)\n  centerZ:  0\n  upX:      0\n  upY:      1\n  upZ:      0\n\n  Similar imilar to gluLookAt() in OpenGL, but it first clears the\n  current camera settings."}, translate {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [tx ty] [tx ty tz]), :arglists ([v] [tx ty] [tx ty tz]), :arglists-meta (nil nil nil)}, :processing-name "translate()", :column 3, :requires-bindings true, :line 4334, :end-line 4334, :arglists (quote ([v] [tx ty] [tx ty tz])), :doc "Specifies an amount to displace objects within the display\n  window. The x parameter specifies left/right translation, the y\n  parameter specifies up/down translation, and the z parameter\n  specifies translations toward/away from the screen.  Transformations\n  apply to everything that happens after and subsequent calls to the\n  function accumulates the effect. For example, calling (translate 50\n  0) and then (translate 20, 0) is the same as (translate 70, 0). If\n  translate is called within draw, the transformation is reset when\n  the loop begins again. This function can be further controlled by\n  the push-matrix and pop-matrix."}, :added "1.0", :name quil.core/translate, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [tx ty] [tx ty tz]), :arglists ([v] [tx ty] [tx ty tz]), :arglists-meta (nil nil nil)}, :processing-name "translate()", :method-params ([v] [tx ty] [tx ty tz]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :requires-bindings true, :line 4328, :end-line 4334, :max-fixed-arity 3, :fn-var true, :arglists ([v] [tx ty] [tx ty tz]), :doc "Specifies an amount to displace objects within the display\n  window. The x parameter specifies left/right translation, the y\n  parameter specifies up/down translation, and the z parameter\n  specifies translations toward/away from the screen.  Transformations\n  apply to everything that happens after and subsequent calls to the\n  function accumulates the effect. For example, calling (translate 50\n  0) and then (translate 20, 0) is the same as (translate 70, 0). If\n  translate is called within draw, the transformation is reset when\n  the loop begins again. This function can be further controlled by\n  the push-matrix and pop-matrix."}, load-font {:category "Typography", :protocol-inline nil, :meta {:category "Typography", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "loadFont()", :column 3, :requires-bindings true, :line 2247, :end-line 2247, :arglists (quote ([filename])), :doc "Loads a font into a variable of type PFont. To load correctly,\n  fonts must be located in the data directory of the current sketch.\n  To create a font to use with Processing use the create-font fn.\n\n  Like load-image and other methods that load data, the load-font fn\n  should not be used inside draw, because it will slow down the sketch\n  considerably, as the font will be re-loaded from the disk (or\n  network) on each frame.\n\n  For most renderers, Processing displays fonts using the .vlw font\n  format, which uses images for each letter, rather than defining them\n  through vector data. When hint :enable-native-fonts is used with the\n  JAVA2D renderer, the native version of a font will be used if it is\n  installed on the user's machine.\n\n  Using create-font (instead of load-font) enables vector data to be\n  used with the JAVA2D (default) renderer setting. This can be helpful\n  when many font sizes are needed, or when using any renderer based on\n  JAVA2D, such as the PDF library."}, :added "1.0", :name quil.core/load-font, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "loadFont()", :method-params ([filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2241, :end-line 2247, :max-fixed-arity 1, :fn-var true, :arglists (quote ([filename])), :doc "Loads a font into a variable of type PFont. To load correctly,\n  fonts must be located in the data directory of the current sketch.\n  To create a font to use with Processing use the create-font fn.\n\n  Like load-image and other methods that load data, the load-font fn\n  should not be used inside draw, because it will slow down the sketch\n  considerably, as the font will be re-loaded from the disk (or\n  network) on each frame.\n\n  For most renderers, Processing displays fonts using the .vlw font\n  format, which uses images for each letter, rather than defining them\n  through vector data. When hint :enable-native-fonts is used with the\n  JAVA2D renderer, the native version of a font will be used if it is\n  installed on the user's machine.\n\n  Using create-font (instead of load-font) enables vector data to be\n  used with the JAVA2D (default) renderer setting. This can be helpful\n  when many font sizes are needed, or when using any renderer based on\n  JAVA2D, such as the PDF library."}, ambient {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([rgb] [x y z]), :arglists ([rgb] [x y z]), :arglists-meta (nil nil)}, :processing-name "ambient()", :column 3, :requires-bindings true, :line 357, :end-line 357, :arglists (quote ([rgb] [x y z])), :doc "Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The\n  color components set through the parameters define the\n  reflectance. For example in the default color mode, setting x=255,\n  y=126, z=0, would cause all the red light to reflect and half of the\n  green light to reflect. Used in combination with emissive, specular,\n  and shininess in setting the material properties of shapes."}, :added "1.0", :name quil.core/ambient, :variadic false, :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([rgb] [x y z]), :arglists ([rgb] [x y z]), :arglists-meta (nil nil)}, :processing-name "ambient()", :method-params ([rgb] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 351, :end-line 357, :max-fixed-arity 3, :fn-var true, :arglists ([rgb] [x y z]), :doc "Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The\n  color components set through the parameters define the\n  reflectance. For example in the default color mode, setting x=255,\n  y=126, z=0, would cause all the red light to reflect and half of the\n  green light to reflect. Used in combination with emissive, specular,\n  and shininess in setting the material properties of shapes."}, shear-y {:category "Transform", :protocol-inline nil, :meta {:category "Transform", :added "1.0", :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "shearY()", :column 3, :requires-bindings true, :line 3650, :end-line 3650, :arglists (quote ([angle])), :doc "Shears a shape around the y-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the radians() function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling (shear-y (/ PI 2)) and then (shear-y (/ PI 2)) is\n  the same as (shear-y PI). If shear-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, shear-y multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix fns."}, :added "1.0", :name quil.core/shear-y, :variadic false, :subcategory nil, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "shearY()", :method-params ([angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 3644, :end-line 3650, :max-fixed-arity 1, :fn-var true, :arglists (quote ([angle])), :doc "Shears a shape around the y-axis the amount specified by the angle\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the radians() function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling (shear-y (/ PI 2)) and then (shear-y (/ PI 2)) is\n  the same as (shear-y PI). If shear-y is called within the draw fn,\n  the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, shear-y multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  push-matrix and pop-matrix fns."}, cursor-modes {:name quil.core/cursor-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 73, :end-column 14, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 73, :column 2, :end-line 73, :end-column 14}}, mouse-y {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "mouseY", :column 3, :requires-bindings true, :line 2533, :end-line 2533, :arglists (quote ([])), :doc "Current vertical coordinate of the mouse."}, :added "1.0", :name quil.core/mouse-y, :variadic false, :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "mouseY", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2527, :end-line 2533, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Current vertical coordinate of the mouse."}, mouse-button {:category "Input", :protocol-inline nil, :meta {:category "Input", :added "1.0", :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "mouseButton", :column 3, :requires-bindings true, :line 2484, :end-line 2484, :arglists (quote ([])), :doc "The value of the system variable mouseButton is either :left, :right,\n  or :center depending on which button is pressed. nil if no button pressed"}, :added "1.0", :name quil.core/mouse-button, :variadic false, :subcategory "Mouse", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "mouseButton", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2478, :end-line 2484, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "The value of the system variable mouseButton is either :left, :right,\n  or :center depending on which button is pressed. nil if no button pressed"}, p-shape-modes {:name quil.core/p-shape-modes, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 46, :column 1, :end-line 64, :end-column 15, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :line 64, :column 2, :end-line 64, :end-column 15}}, image {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([img x y] [img x y c d]), :arglists ([img x y] [img x y c d]), :arglists-meta (nil nil)}, :processing-name "image()", :column 3, :requires-bindings true, :line 2002, :end-line 2002, :arglists (quote ([img x y] [img x y c d])), :doc "Displays images to the screen. Processing currently works with GIF,\n  JPEG, and Targa images. The color of an image may be modified with\n  the tint function and if a GIF has transparency, it will maintain\n  its transparency. The img parameter specifies the image to display\n  and the x and y parameters define the location of the image from its\n  upper-left corner. The image is displayed at its original size\n  unless the width and height parameters specify a different size. The\n  image-mode fn changes the way the parameters work. A call to\n  (image-mode :corners) will change the width and height parameters to\n  define the x and y values of the opposite corner of the image.\n\n  Starting with release 0124, when using the default (JAVA2D)\n  renderer, smooth will also improve image quality of resized\n  images."}, :added "1.0", :name quil.core/image, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([img x y] [img x y c d]), :arglists ([img x y] [img x y c d]), :arglists-meta (nil nil)}, :processing-name "image()", :method-params ([img x y] [img x y c d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1996, :end-line 2002, :max-fixed-arity 5, :fn-var true, :arglists ([img x y] [img x y c d]), :doc "Displays images to the screen. Processing currently works with GIF,\n  JPEG, and Targa images. The color of an image may be modified with\n  the tint function and if a GIF has transparency, it will maintain\n  its transparency. The img parameter specifies the image to display\n  and the x and y parameters define the location of the image from its\n  upper-left corner. The image is displayed at its original size\n  unless the width and height parameters specify a different size. The\n  image-mode fn changes the way the parameters work. A call to\n  (image-mode :corners) will change the width and height parameters to\n  define the x and y values of the opposite corner of the image.\n\n  Starting with release 0124, when using the default (JAVA2D)\n  renderer, smooth will also improve image quality of resized\n  images."}, unbinary {:category "Data", :protocol-inline nil, :meta {:category "Data", :require-binding false, :added "1.0", :subcategory "Conversion", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "unbinary()", :column 3, :line 4372, :end-line 4372, :arglists (quote ([str-val])), :doc "Unpack a binary string to an integer. See binary for converting\n  integers to strings."}, :require-binding false, :added "1.0", :name quil.core/unbinary, :variadic false, :subcategory "Conversion", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 11, :processing-name "unbinary()", :method-params ([str-val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4366, :end-line 4372, :max-fixed-arity 1, :fn-var true, :arglists (quote ([str-val])), :doc "Unpack a binary string to an integer. See binary for converting\n  integers to strings."}, no-tint {:category "Image", :protocol-inline nil, :meta {:category "Image", :added "1.0", :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "noTint()", :column 3, :requires-bindings true, :line 2741, :end-line 2741, :arglists (quote ([])), :doc "Removes the current fill value for displaying images and reverts to\n  displaying images with their original hues."}, :added "1.0", :name quil.core/no-tint, :variadic false, :subcategory "Loading & Displaying", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 10, :processing-name "noTint()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2735, :end-line 2741, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Removes the current fill value for displaying images and reverts to\n  displaying images with their original hues."}, no-lights {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "noLights()", :column 3, :requires-bindings true, :line 2649, :end-line 2649, :arglists (quote ([])), :doc "Disable all lighting. Lighting is turned off by default and enabled\n  with the lights fn. This function can be used to disable lighting so\n  that 2D geometry (which does not require lighting) can be drawn\n  after a set of lighted 3D geometry."}, :added "1.0", :name quil.core/no-lights, :variadic false, :subcategory "Lights", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 12, :processing-name "noLights()", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2643, :end-line 2649, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Disable all lighting. Lighting is turned off by default and enabled\n  with the lights fn. This function can be used to disable lighting so\n  that 2D geometry (which does not require lighting) can be drawn\n  after a set of lighted 3D geometry."}, emissive-int {:category "Lights, Camera", :protocol-inline nil, :meta {:category "Lights, Camera", :added "1.0", :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "emissive()", :column 3, :requires-bindings true, :line 1523, :end-line 1523, :arglists (quote ([int-val])), :doc "Sets the emissive color of the material used for drawing shapes\n  drawn to the screen. Used in combination with ambient, specular, and\n  shininess in setting the material properties of shapes. Converts all\n  args to ints"}, :added "1.0", :name quil.core/emissive-int, :variadic false, :subcategory "Material Properties", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 15, :processing-name "emissive()", :method-params ([int-val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 1517, :end-line 1523, :max-fixed-arity 1, :fn-var true, :arglists (quote ([int-val])), :doc "Sets the emissive color of the material used for drawing shapes\n  drawn to the screen. Used in combination with ambient, specular, and\n  shininess in setting the material properties of shapes. Converts all\n  args to ints"}, point {:category "Shape", :protocol-inline nil, :meta {:category "Shape", :added "1.0", :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :processing-name "point()", :column 3, :requires-bindings true, :line 2844, :end-line 2844, :arglists (quote ([x y] [x y z])), :doc "Draws a point, a coordinate in space at the dimension of one\n  pixel. The first parameter is the horizontal value for the point,\n  the second value is the vertical value for the point, and the\n  optional third value is the depth value. Drawing this shape in 3D\n  using the z parameter requires the :P3D or :opengl renderer to be\n  used."}, :added "1.0", :name quil.core/point, :variadic false, :subcategory "2D Primitives", :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/quil/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x y] [x y z]), :arglists ([x y] [x y z]), :arglists-meta (nil nil)}, :processing-name "point()", :method-params ([x y] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :requires-bindings true, :line 2838, :end-line 2844, :max-fixed-arity 3, :fn-var true, :arglists ([x y] [x y z]), :doc "Draws a point, a coordinate in space at the dimension of one\n  pixel. The first parameter is the horizontal value for the point,\n  the second value is the vertical value for the point, and the\n  optional third value is the depth value. Drawing this shape in 3D\n  using the z parameter requires the :P3D or :opengl renderer to be\n  used."}}, :require-macros {applet quil.sketch, quil.sketch quil.sketch, u quil.util, quil.util quil.util}, :cljs.analyzer/constants {:seen #{:shift :open :baseline :disable-stroke-perspective :hsb :quads :arrow :dilate :quad-strip :down :disable-depth-mask :burn :posterize :f8 :screen :enable-depth-test :gray :enable-depth-sort :f1 :corner :disable-texture-mipmaps :darkest :f10 :dodge :bottom :bevel :disable-stroke-pure :replace :alt :top :disable-depth-test :pie :enable-stroke-perspective :chord :rgb :lines :argb :move :f5 :command :miter :points :hand :close :radius :normal :threshold :up :center :round :disable-optimized-stroke :corners :f11 :opaque :overlay :enable-opengl-errors :enable-stroke-pure :blur :project :triangle-fan :f3 :enable-depth-mask :f2 :control :difference :square :enable-optimized-stroke :p2d :shape :f12 :exclusion :disable-opengl-errors :unknown-key :alpha :wait :right :repeat :hard-light :image :multiply :lightest :f7 :blend :disable-depth-sort :f9 :erode :add :soft-light :subtract :clamp :f6 :f4 :triangle-strip :cross :triangles :left :invert :text :enable-texture-mipmaps :model}, :order [:open :chord :pie :points :lines :triangles :triangle-fan :triangle-strip :quads :quad-strip :burn :screen :darkest :dodge :replace :overlay :difference :exclusion :hard-light :multiply :lightest :blend :add :soft-light :subtract :rgb :hsb :argb :alpha :center :radius :corner :corners :disable-stroke-perspective :disable-depth-mask :enable-depth-test :enable-depth-sort :disable-texture-mipmaps :disable-stroke-pure :disable-depth-test :enable-stroke-perspective :disable-optimized-stroke :enable-opengl-errors :enable-stroke-pure :enable-depth-mask :enable-optimized-stroke :disable-opengl-errors :disable-depth-sort :enable-texture-mipmaps :square :round :project :model :miter :bevel :left :right :top :bottom :baseline :shape :image :normal :clamp :repeat :threshold :gray :invert :posterize :blur :opaque :erode :dilate :arrow :cross :hand :move :text :wait :f10 :command :f8 :f5 :f2 :down :f6 :f7 :f11 :control :f4 :f1 :f12 :shift :f9 :up :alt :f3 :p2d :close :unknown-key]}, :doc nil}