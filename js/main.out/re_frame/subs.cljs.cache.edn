;; Analyzed by ClojureScript 1.7.228
{:name re-frame.subs, :doc nil, :excludes #{}, :use-macros {reaction reagent.ratom, run! reagent.ratom}, :require-macros {reagent.ratom reagent.ratom}, :uses {app-db re-frame.db, warn re-frame.utils, make-reaction reagent.ratom, first-in-vector re-frame.utils, error re-frame.utils}, :requires {reagent.ratom reagent.ratom, re-frame.db re-frame.db, re-frame.utils re-frame.utils}, :imports nil, :defs {key->fn {:name re-frame.subs/key->fn, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/subs.cljs", :line 9, :column 1, :end-line 9, :end-column 23, :private true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/subs.cljs", :line 9, :column 16, :end-line 9, :end-column 23, :private true}}, clear-handlers! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/subs.cljs", :line 12, :column 7, :end-line 12, :end-column 22, :arglists (quote ([])), :doc "Unregisters all subscription handlers"}, :name re-frame.subs/clear-handlers!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/subs.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Unregisters all subscription handlers"}, register {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/subs.cljs", :line 18, :column 7, :end-line 18, :end-column 15, :arglists (quote ([key-v handler-fn])), :doc "Registers a handler function for an id"}, :name re-frame.subs/register, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/subs.cljs", :end-column 15, :method-params ([key-v handler-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key-v handler-fn])), :doc "Registers a handler function for an id"}, subscribe {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/subs.cljs", :line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([v] [v dynv])), :doc "Returns a reagent/reaction which observes a part of app-db", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [v dynv]), :arglists ([v] [v dynv]), :arglists-meta (nil nil)}}, :name re-frame.subs/subscribe, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/subs.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [v dynv]), :arglists ([v] [v dynv]), :arglists-meta (nil nil)}, :method-params ([v] [v dynv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists ([v] [v dynv]), :doc "Returns a reagent/reaction which observes a part of app-db"}}}