;; Analyzed by ClojureScript 1.7.228
{:use-macros {reaction reagent.ratom}, :excludes #{}, :name re-frame.undo, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, re-frame.utils re-frame.utils, re-frame.db re-frame.db, handlers re-frame.handlers, re-frame.handlers re-frame.handlers, subs re-frame.subs, re-frame.subs re-frame.subs}, :uses {app-db re-frame.db, warn re-frame.utils}, :defs {undo-n {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 124, :column 8, :end-line 124, :end-column 14, :private true, :arglists (quote ([n])), :doc "undo n steps or until we run out of undos"}, :private true, :name re-frame.undo/undo-n, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 14, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "undo n steps or until we run out of undos"}, undo-explanations {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 75, :column 7, :end-line 75, :end-column 24, :arglists (quote ([])), :doc "Returns list of undo descriptions or empty list if no undos"}, :name re-frame.undo/undo-explanations, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns list of undo descriptions or empty list if no undos"}, app-explain {:name re-frame.undo/app-explain, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 29, :column 1, :end-line 29, :end-column 27, :private true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 29, :column 16, :end-line 29, :end-column 27, :private true}, :doc "Mirrors app-db"}, clear-undos! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 33, :column 8, :end-line 33, :end-column 20, :private true, :arglists (quote ([]))}, :private true, :name re-frame.undo/clear-undos!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, redos? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 70, :column 7, :end-line 70, :end-column 13, :arglists (quote ([])), :doc "Returns true if redos exist, false otherwise"}, :name re-frame.undo/redos?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns true if redos exist, false otherwise"}, undo-explain-list {:name re-frame.undo/undo-explain-list, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 30, :column 1, :end-line 30, :end-column 33, :private true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 30, :column 16, :end-line 30, :end-column 33, :private true}, :doc "Mirrors undo-list"}, redo {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 141, :column 8, :end-line 141, :end-column 12, :private true, :arglists (quote ([undos cur redos]))}, :private true, :name re-frame.undo/redo, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 12, :method-params ([undos cur redos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 3, :fn-var true, :arglists (quote ([undos cur redos]))}, store-now! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 52, :column 7, :end-line 52, :end-column 17, :arglists (quote ([explanation])), :doc "Stores the value currently in app-db, so the user can later undo"}, :name re-frame.undo/store-now!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 17, :method-params ([explanation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([explanation])), :doc "Stores the value currently in app-db, so the user can later undo"}, redo-explain-list {:name re-frame.undo/redo-explain-list, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 31, :column 1, :end-line 31, :end-column 33, :private true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 31, :column 16, :end-line 31, :end-column 33, :private true}, :doc "Mirrors redo-list"}, redo-list {:name re-frame.undo/redo-list, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 21, :column 1, :end-line 21, :end-column 25, :private true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 21, :column 16, :end-line 21, :end-column 25, :private true}, :doc "A list of future states, caused by undoing"}, redo-n {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 149, :column 8, :end-line 149, :end-column 14, :private true, :arglists (quote ([n])), :doc "redo n steps or until we run out of redos"}, :private true, :name re-frame.undo/redo-n, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 14, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "redo n steps or until we run out of redos"}, undo {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 116, :column 8, :end-line 116, :end-column 12, :private true, :arglists (quote ([undos cur redos]))}, :private true, :name re-frame.undo/undo, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 12, :method-params ([undos cur redos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 3, :fn-var true, :arglists (quote ([undos cur redos]))}, clear-redos! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 39, :column 8, :end-line 39, :end-column 20, :private true, :arglists (quote ([]))}, :private true, :name re-frame.undo/clear-redos!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, set-max-undos! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 15, :column 7, :end-line 15, :end-column 21, :arglists (quote ([n]))}, :name re-frame.undo/set-max-undos!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 21, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, max-undos {:name re-frame.undo/max-undos, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 14, :column 1, :end-line 14, :end-column 25, :private true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 14, :column 16, :end-line 14, :end-column 25, :private true}, :doc "Maximum number of undo states maintained"}, undo-list {:name re-frame.undo/undo-list, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 20, :column 1, :end-line 20, :end-column 25, :private true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 20, :column 16, :end-line 20, :end-column 25, :private true}, :doc "A list of history states"}, clear-history! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 45, :column 7, :end-line 45, :end-column 21, :arglists (quote ([]))}, :name re-frame.undo/clear-history!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, undos? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :line 65, :column 7, :end-line 65, :end-column 13, :arglists (quote ([])), :doc "Returns true if undos exist, false otherwise"}, :name re-frame.undo/undos?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/undo.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns true if undos exist, false otherwise"}}, :require-macros {reagent.ratom reagent.ratom}, :cljs.analyzer/constants {:seen #{:redo :undo :undos? :purge-redos :undo-explanations :redo-explanations :redos?}, :order [:undos? :redos? :undo-explanations :redo-explanations :undo :redo :purge-redos]}, :doc nil}