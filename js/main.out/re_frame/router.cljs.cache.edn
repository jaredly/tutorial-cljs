;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name re-frame.router, :imports nil, :requires {reagent.impl.batching reagent.impl.batching, re-frame.handlers re-frame.handlers, re-frame.utils re-frame.utils, goog.async.nextTick goog.async.nextTick}, :uses {do-later reagent.impl.batching, handle re-frame.handlers, error re-frame.utils}, :defs {EventQueue {:num-fields 3, :protocols #{re-frame.router/IEventQueue}, :name re-frame.router/EventQueue, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 20, :type true, :column 10, :line 84, :record false, :end-line 84, :skip-protocol-flag nil}, -run-queue {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 77, :column 4, :end-line 77, :end-column 14, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-run-queue, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, dispatch-sync {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 207, :column 7, :end-line 207, :end-column 20, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler\n  immediately. Note: dispatch-sync may not be called while another\n  event is being handled.\n\n  Usage example:\n     (dispatch-sync [:delete-item 42])"}, :name re-frame.router/dispatch-sync, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 20, :method-params ([event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-v])), :doc "Send an event to be processed by the registered handler\n  immediately. Note: dispatch-sync may not be called while another\n  event is being handled.\n\n  Usage example:\n     (dispatch-sync [:delete-item 42])"}, -add-event {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 74, :column 4, :end-line 74, :end-column 14, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this event]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-add-event, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 14, :method-params ([this event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this event])), :doc nil}, -resume {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 80, :column 4, :end-line 80, :end-column 11, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-resume, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, -run-next-tick {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 76, :column 4, :end-line 76, :end-column 18, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-run-next-tick, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, -process-1st-event {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 75, :column 4, :end-line 75, :end-column 22, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-process-1st-event, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, later-fns {:name re-frame.router/later-fns, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 61, :column 1, :end-line 61, :end-column 15, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 61, :column 6, :end-line 61, :end-column 15}}, enqueue {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 66, :column 4, :end-line 66, :end-column 11, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this event]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/enqueue, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 11, :method-params ([this event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this event])), :doc nil}, -fsm-trigger {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 71, :column 4, :end-line 71, :end-column 16, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this trigger arg]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-fsm-trigger, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 16, :method-params ([this trigger arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 71, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this trigger arg])), :doc nil}, -pause {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 79, :column 4, :end-line 79, :end-column 10, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this later-fn]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-pause, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 10, :method-params ([this later-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this later-fn])), :doc nil}, dispatch {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 195, :column 7, :end-line 195, :end-column 15, :arglists (quote ([event-v])), :doc "Queue an event to be processed by the registered handler.\n\n  Usage example:\n     (dispatch [:delete-item 42])"}, :name re-frame.router/dispatch, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 15, :method-params ([event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-v])), :doc "Queue an event to be processed by the registered handler.\n\n  Usage example:\n     (dispatch [:delete-item 42])"}, add-post-event-callback {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 68, :column 4, :end-line 68, :end-column 27, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this f]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/add-post-event-callback, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 27, :method-params ([this f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this f])), :doc nil}, ->EventQueue {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 84, :column 10, :end-line 84, :end-column 20, :protocols #{re-frame.router/IEventQueue}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([fsm-state queue post-event-callback-fns]))}, :protocols #{re-frame.router/IEventQueue}, :name re-frame.router/->EventQueue, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 20, :method-params ([fsm-state queue post-event-callback-fns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 84, :end-line 84, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fsm-state queue post-event-callback-fns])), :skip-protocol-flag nil}, event-queue {:name re-frame.router/event-queue, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 188, :column 1, :end-line 188, :end-column 17, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 188, :column 6, :end-line 188, :end-column 17}}, IEventQueue {:meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 65, :column 14, :end-line 65, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-run-queue [[this]], -add-event [[this event]], -resume [[this]], -run-next-tick [[this]], -process-1st-event [[this]], enqueue [[this event]], -fsm-trigger [[this trigger arg]], -pause [[this later-fn]], add-post-event-callback [[this f]], -exception [[this ex]]}}}, :protocol-symbol true, :name re-frame.router/IEventQueue, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 25, :column 1, :line 65, :protocol-info {:methods {-run-queue [[this]], -add-event [[this event]], -resume [[this]], -run-next-tick [[this]], -process-1st-event [[this]], enqueue [[this event]], -fsm-trigger [[this trigger arg]], -pause [[this later-fn]], add-post-event-callback [[this f]], -exception [[this ex]]}}, :info nil, :end-line 65, :impls #{re-frame.router/EventQueue}, :doc nil, :jsdoc ("@interface")}, -exception {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :line 78, :column 4, :end-line 78, :end-column 14, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this ex]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-exception, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/re_frame/router.cljs", :end-column 14, :method-params ([this ex]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this ex])), :doc nil}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:add-event :yield post-event-callback-fns :paused :idle :else fsm-state queue :running :flush-dom :run-queue :scheduled :pause :exception :mutable :resume :finish-run}, :order [:flush-dom :yield :finish-run :pause :run-queue :exception :add-event :idle :scheduled :running :paused :resume :else fsm-state :mutable queue post-event-callback-fns]}, :doc nil}