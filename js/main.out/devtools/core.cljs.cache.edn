;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name devtools.core, :imports nil, :requires {prefs devtools.prefs, devtools.prefs devtools.prefs, format devtools.format, devtools.format devtools.format, hints devtools.sanity-hints, devtools.sanity-hints devtools.sanity-hints}, :uses nil, :defs {enable! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 109, :column 7, :end-line 109, :end-column 14, :arglists (quote ([]))}, :name devtools.core/enable!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-prefs {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 115, :column 7, :end-line 115, :end-column 16, :arglists (quote ([]))}, :name devtools.core/get-prefs, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->CLJSDevtoolsFormatter {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 13, :column 10, :end-line 13, :end-column 31, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([]))}, :protocols #{}, :name devtools.core/->CLJSDevtoolsFormatter, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, monitor-api-call-if-avail {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 22, :column 8, :end-line 22, :end-column 33, :private true, :arglists (quote ([name api-call args]))}, :private true, :name devtools.core/monitor-api-call-if-avail, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 33, :method-params ([name api-call args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name api-call args]))}, build-cljs-formatter {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 49, :column 8, :end-line 49, :end-column 28, :private true, :arglists (quote ([]))}, :private true, :name devtools.core/build-cljs-formatter, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, set-pref! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 118, :column 7, :end-line 118, :end-column 16, :arglists (quote ([pref val]))}, :name devtools.core/set-pref!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 16, :method-params ([pref val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pref val]))}, is-ours? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 63, :column 8, :end-line 63, :end-column 16, :private true, :arglists (quote ([o]))}, :private true, :name devtools.core/is-ours?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 16, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, find-fn-in-debug-ns {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 16, :column 8, :end-line 16, :end-column 27, :private true, :arglists (quote ([fn-name]))}, :private true, :name devtools.core/find-fn-in-debug-ns, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 27, :method-params ([fn-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fn-name]))}, install! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 90, :column 7, :end-line 90, :end-column 15, :arglists (quote ([]))}, :name devtools.core/install!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, *devtools-enabled* {:name devtools.core/*devtools-enabled*, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 6, :column 1, :end-line 6, :end-column 34, :dynamic true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 6, :column 16, :end-line 6, :end-column 34, :dynamic true}}, set-prefs! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 112, :column 7, :end-line 112, :end-column 17, :arglists (quote ([new-prefs]))}, :name devtools.core/set-prefs!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 17, :method-params ([new-prefs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new-prefs]))}, monitor-api-calls {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 32, :column 8, :end-line 32, :end-column 25, :private true, :arglists (quote ([name api-call]))}, :private true, :name devtools.core/monitor-api-calls, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 25, :method-params ([name api-call]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name api-call]))}, sanitize {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 39, :column 8, :end-line 39, :end-column 16, :private true, :arglists (quote ([name api-call]))}, :private true, :name devtools.core/sanitize, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 16, :method-params ([name api-call]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name api-call]))}, install-our-formatter! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 76, :column 8, :end-line 76, :end-column 30, :private true, :arglists (quote ([formatter]))}, :private true, :name devtools.core/install-our-formatter!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 30, :method-params ([formatter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([formatter]))}, get-formatters-safe {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 66, :column 8, :end-line 66, :end-column 27, :private true, :arglists (quote ([]))}, :private true, :name devtools.core/get-formatters-safe, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, formatter-key {:name devtools.core/formatter-key, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 10, :column 1, :end-line 10, :end-column 19, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 10, :column 6, :end-line 10, :end-column 19}}, *sanitizer-enabled* {:name devtools.core/*sanitizer-enabled*, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 7, :column 1, :end-line 7, :end-column 35, :dynamic true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 7, :column 16, :end-line 7, :end-column 35, :dynamic true}}, disable! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 106, :column 7, :end-line 106, :end-column 15, :arglists (quote ([]))}, :name devtools.core/disable!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, log-exception-if-avail {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 27, :column 8, :end-line 27, :end-column 30, :private true, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :private true, :name devtools.core/log-exception-if-avail, :variadic true, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, installed? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 72, :column 8, :end-line 72, :end-column 18, :private true, :arglists (quote ([]))}, :private true, :name devtools.core/installed?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, obsolete-formatter-key {:name devtools.core/obsolete-formatter-key, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 11, :column 1, :end-line 11, :end-column 28, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 11, :column 6, :end-line 11, :end-column 28}}, uninstall-our-formatters! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 83, :column 8, :end-line 83, :end-column 33, :private true, :arglists (quote ([]))}, :private true, :name devtools.core/uninstall-our-formatters!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, uninstall! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 98, :column 7, :end-line 98, :end-column 17, :arglists (quote ([]))}, :name devtools.core/uninstall!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, CLJSDevtoolsFormatter {:num-fields 0, :protocols #{}, :name devtools.core/CLJSDevtoolsFormatter, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :end-column 31, :type true, :column 10, :line 13, :record false, :end-line 13, :skip-protocol-flag nil}, *monitor-enabled* {:name devtools.core/*monitor-enabled*, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 8, :column 1, :end-line 8, :end-column 33, :dynamic true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/core.cljs", :line 8, :column 16, :end-line 8, :end-column 33, :dynamic true}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:install-sanity-hints :legacy-formatter}, :order [:legacy-formatter :install-sanity-hints]}, :doc nil}