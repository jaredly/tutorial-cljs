;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name devtools.format, :imports nil, :requires {devtools.prefs devtools.prefs}, :uses {pref devtools.prefs}, :defs {->TemplateWriter {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 114, :column 10, :end-line 114, :end-column 24, :protocols #{devtools.format/Object cljs.core/IWriter}, :skip-protocol-flag #{cljs.core/IWriter}, :factory :positional, :arglists (quote ([t]))}, :protocols #{devtools.format/Object cljs.core/IWriter}, :name devtools.format/->TemplateWriter, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 24, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :skip-protocol-flag #{cljs.core/IWriter}}, prevent-recursion? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 20, :column 7, :end-line 20, :end-column 25, :arglists (quote ([config]))}, :name devtools.format/prevent-recursion?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 25, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config]))}, alt-printer-impl {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 137, :column 7, :end-line 137, :end-column 23, :arglists (quote ([obj writer opts]))}, :name devtools.format/alt-printer-impl, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 23, :method-params ([obj writer opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 3, :fn-var true, :arglists (quote ([obj writer opts]))}, body {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 245, :column 7, :end-line 245, :end-column 11, :arglists (quote ([value _config]))}, :name devtools.format/body, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 11, :method-params ([value _config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value _config]))}, number-template {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 54, :column 7, :end-line 54, :end-column 22, :arglists (quote ([value]))}, :name devtools.format/number-template, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 22, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, -header {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 220, :column 4, :end-line 220, :end-column 11, :protocol devtools.format/IDevtoolsFormat, :doc nil, :arglists (quote ([value]))}, :protocol devtools.format/IDevtoolsFormat, :name devtools.format/-header, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 11, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 220, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc nil}, expandable? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 108, :column 7, :end-line 108, :end-column 18, :arglists (quote ([obj]))}, :name devtools.format/expandable?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 18, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, IDevtoolsFormat {:meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 219, :column 14, :end-line 219, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-header [[value]], -has-body [[value]], -body [[value]]}}}, :protocol-symbol true, :name devtools.format/IDevtoolsFormat, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 29, :column 1, :line 219, :protocol-info {:methods {-header [[value]], -has-body [[value]], -body [[value]]}}, :info nil, :end-line 219, :impls #{}, :doc nil, :jsdoc ("@interface")}, body-api-call {:name devtools.format/body-api-call, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 268, :column 1, :end-line 268, :end-column 19, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 268, :column 6, :end-line 268, :end-column 19}}, build-body {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 200, :column 7, :end-line 200, :end-column 17, :arglists (quote ([value starting-index]))}, :name devtools.format/build-body, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 17, :method-params ([value starting-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value starting-index]))}, want-value? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 227, :column 7, :end-line 227, :end-column 18, :arglists (quote ([value config]))}, :name devtools.format/want-value?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 18, :method-params ([value config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value config]))}, bool? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 88, :column 7, :end-line 88, :end-column 12, :arglists (quote ([value]))}, :name devtools.format/bool?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 12, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, string-template {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 73, :column 7, :end-line 73, :end-column 22, :arglists (quote ([source-string]))}, :name devtools.format/string-template, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 22, :method-params ([source-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source-string]))}, managed-pr-str {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 149, :column 7, :end-line 149, :end-column 21, :arglists (quote ([value style print-level]))}, :name devtools.format/managed-pr-str, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 21, :method-params ([value style print-level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 3, :fn-var true, :arglists (quote ([value style print-level]))}, wrap-group-in-reference-if-needed {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 121, :column 7, :end-line 121, :end-column 40, :arglists (quote ([group obj]))}, :name devtools.format/wrap-group-in-reference-if-needed, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 40, :method-params ([group obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([group obj]))}, meta-template {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 61, :column 7, :end-line 61, :end-column 20, :arglists (quote ([value]))}, :name devtools.format/meta-template, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 20, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, build-header-wrapped {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 165, :column 7, :end-line 165, :end-column 27, :arglists (quote ([value]))}, :name devtools.format/build-header-wrapped, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 27, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, surrogate {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 40, :column 7, :end-line 40, :end-column 16, :arglists (quote ([object header] [object header has-body] [object header has-body body-template])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([object header] [object header has-body] [object header has-body body-template]), :arglists ([object header] [object header has-body] [object header has-body body-template]), :arglists-meta (nil nil nil)}}, :name devtools.format/surrogate, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([object header] [object header has-body] [object header has-body body-template]), :arglists ([object header] [object header has-body] [object header has-body body-template]), :arglists-meta (nil nil nil)}, :method-params ([object header] [object header has-body] [object header has-body body-template]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 4, :fn-var true, :arglists ([object header] [object header has-body] [object header has-body body-template])}, body-lines-templates {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 186, :column 7, :end-line 186, :end-column 27, :arglists (quote ([value starting-index]))}, :name devtools.format/body-lines-templates, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 27, :method-params ([value starting-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value starting-index]))}, TemplateWriter {:num-fields 1, :protocols #{devtools.format/Object cljs.core/IWriter}, :name devtools.format/TemplateWriter, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 24, :type true, :column 10, :line 114, :record false, :end-line 114, :skip-protocol-flag #{cljs.core/IWriter}}, -has-body {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 221, :column 4, :end-line 221, :end-column 13, :protocol devtools.format/IDevtoolsFormat, :doc nil, :arglists (quote ([value]))}, :protocol devtools.format/IDevtoolsFormat, :name devtools.format/-has-body, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 13, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 221, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc nil}, build-surrogate-body {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 207, :column 7, :end-line 207, :end-column 27, :arglists (quote ([value]))}, :name devtools.format/build-surrogate-body, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 27, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, detect-else-case-and-patch-it {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 133, :column 7, :end-line 133, :end-column 36, :arglists (quote ([group obj]))}, :name devtools.format/detect-else-case-and-patch-it, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 36, :method-params ([group obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([group obj]))}, body-line-template {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 175, :column 7, :end-line 175, :end-column 25, :arglists (quote ([index value]))}, :name devtools.format/body-line-template, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 25, :method-params ([index value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([index value]))}, standard-body-template {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 169, :column 7, :end-line 169, :end-column 29, :arglists (quote ([lines] [lines margin?])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([lines] [lines margin?]), :arglists ([lines] [lines margin?]), :arglists-meta (nil nil)}}, :name devtools.format/standard-body-template, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([lines] [lines margin?]), :arglists ([lines] [lines margin?]), :arglists-meta (nil nil)}, :method-params ([lines] [lines margin?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 2, :fn-var true, :arglists ([lines] [lines margin?])}, template {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 25, :column 7, :end-line 25, :end-column 15, :arglists (quote ([tag style & children])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(tag style children)], :arglists ([tag style & children]), :arglists-meta (nil)}}, :name devtools.format/template, :variadic true, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(tag style children)], :arglists ([tag style & children]), :arglists-meta (nil)}, :method-params [(tag style children)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists ([tag style & children])}, build-header {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 158, :column 7, :end-line 158, :end-column 19, :arglists (quote ([value]))}, :name devtools.format/build-header, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 19, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, header {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 232, :column 7, :end-line 232, :end-column 13, :arglists (quote ([value _config]))}, :name devtools.format/header, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 13, :method-params ([value _config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value _config]))}, abbreviated? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 101, :column 7, :end-line 101, :end-column 19, :arglists (quote ([template]))}, :name devtools.format/abbreviated?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 19, :method-params ([template]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([template]))}, has-body-api-call {:name devtools.format/has-body-api-call, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 267, :column 1, :end-line 267, :end-column 23, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 267, :column 6, :end-line 267, :end-column 23}}, surrogate? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 15, :column 7, :end-line 15, :end-column 17, :arglists (quote ([value]))}, :name devtools.format/surrogate?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 17, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, -body {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 222, :column 4, :end-line 222, :end-column 9, :protocol devtools.format/IDevtoolsFormat, :doc nil, :arglists (quote ([value]))}, :protocol devtools.format/IDevtoolsFormat, :name devtools.format/-body, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 9, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 222, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc nil}, reference {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([object] [object config])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([object] [object config]), :arglists ([object] [object config]), :arglists-meta (nil nil)}}, :name devtools.format/reference, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([object] [object config]), :arglists ([object] [object config]), :arglists-meta (nil nil)}, :method-params ([object] [object config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists ([object] [object config])}, atomic-template {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 91, :column 7, :end-line 91, :end-column 22, :arglists (quote ([value]))}, :name devtools.format/atomic-template, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 22, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, build-api-call {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 253, :column 7, :end-line 253, :end-column 21, :arglists (quote ([raw-fn pre-handler-key post-handler-key]))}, :name devtools.format/build-api-call, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 21, :method-params ([raw-fn pre-handler-key post-handler-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 3, :fn-var true, :arglists (quote ([raw-fn pre-handler-key post-handler-key]))}, seq-count-is-greater-or-equal? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 104, :column 7, :end-line 104, :end-column 37, :arglists (quote ([seq limit]))}, :name devtools.format/seq-count-is-greater-or-equal?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 37, :method-params ([seq limit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 2, :fn-var true, :arglists (quote ([seq limit]))}, header-api-call {:name devtools.format/header-api-call, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 266, :column 1, :end-line 266, :end-column 21, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 266, :column 6, :end-line 266, :end-column 21}}, has-body {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 238, :column 7, :end-line 238, :end-column 15, :arglists (quote ([value _config]))}, :name devtools.format/has-body, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 15, :method-params ([value _config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value _config]))}, abbreviate-long-string {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 67, :column 7, :end-line 67, :end-column 29, :arglists (quote ([string]))}, :name devtools.format/abbreviate-long-string, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 29, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string]))}, cljs-value? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 9, :column 7, :end-line 9, :end-column 18, :arglists (quote ([value]))}, :name devtools.format/cljs-value?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 18, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, index-template {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 51, :column 7, :end-line 51, :end-column 21, :arglists (quote ([value]))}, :name devtools.format/index-template, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 21, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, prepare-body-lines {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :line 178, :column 7, :end-line 178, :end-column 25, :arglists (quote ([data starting-index]))}, :name devtools.format/prepare-body-lines, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/format.cljs", :end-column 25, :method-params ([data starting-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data starting-index]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:max-number-body-items :symbol-style :nil-style t :body-pre-handler :line-index-separator :new-line-string-replacer :header-style :body-items-more-label :else :has-body-pre-handler :surrogate-key :string-abbreviation-marker :max-header-elements :li :header-post-handler :header-pre-handler :standard-li-style :body-style :dq :nil-label :fallback-impl :standard-ol-no-margin-style :standard-ol-style :float-style :body-post-handler :more-marker :bool-style :seqables-always-expandable :string-style :min-sequable-count-for-expansion :integer-style :ol :spacer :print-length :standard-li-no-margin-style :string-postfix-limit :fn-style :item-style :index-style :has-body-post-handler :body-items-more-label-style :max-print-level :meta-wrapper-style :alt-impl :meta-body-style :string-prefix-limit :cljs-style :print-meta-data :keyword-style :span :meta-style}, :order [:surrogate-key :span :index-style :line-index-separator :integer-style :float-style :meta-style :meta-body-style :string-prefix-limit :string-abbreviation-marker :string-postfix-limit :dq :new-line-string-replacer :string-style :ol :standard-ol-style :li :standard-li-style :nil-style :nil-label :bool-style :keyword-style :symbol-style :fn-style :more-marker :seqables-always-expandable :min-sequable-count-for-expansion t :fallback-impl :print-length :alt-impl :max-header-elements :print-meta-data :header-style :max-print-level :meta-wrapper-style :cljs-style :standard-ol-no-margin-style :standard-li-no-margin-style :spacer :item-style :max-number-body-items :body-items-more-label-style :body-items-more-label :body-style :else :header-pre-handler :header-post-handler :has-body-pre-handler :has-body-post-handler :body-pre-handler :body-post-handler]}, :doc nil}