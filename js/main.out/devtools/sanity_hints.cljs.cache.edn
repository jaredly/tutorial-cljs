;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name devtools.sanity-hints, :imports nil, :requires {devtools.prefs devtools.prefs, stacktrace cljs.stacktrace, cljs.stacktrace cljs.stacktrace, str clojure.string, clojure.string clojure.string}, :uses {pref devtools.prefs}, :defs {mark-null-call-site-location {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 65, :column 7, :end-line 65, :end-column 35, :arglists (quote ([file line-number column]))}, :name devtools.sanity-hints/mark-null-call-site-location, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 35, :method-params ([file line-number column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 3, :fn-var true, :arglists (quote ([file line-number column]))}, mark-call-closed-at-column {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 59, :column 7, :end-line 59, :end-column 33, :arglists (quote ([line column]))}, :name devtools.sanity-hints/mark-call-closed-at-column, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 33, :method-params ([line column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line column]))}, error-object-sense {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 78, :column 7, :end-line 78, :end-column 25, :arglists (quote ([error]))}, :name devtools.sanity-hints/error-object-sense, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 25, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error]))}, *original-global-error-handler* {:name devtools.sanity-hints/*original-global-error-handler*, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 29, :column 1, :end-line 29, :end-column 51, :dynamic true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 29, :column 20, :end-line 29, :end-column 51, :dynamic true}}, *original-type-error-prototype-to-string* {:name devtools.sanity-hints/*original-type-error-prototype-to-string*, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 30, :column 1, :end-line 30, :end-column 61, :dynamic true, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 30, :column 20, :end-line 30, :end-column 61, :dynamic true}}, global-error-handler {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 94, :column 7, :end-line 94, :end-column 27, :arglists (quote ([message url line column error]))}, :name devtools.sanity-hints/global-error-handler, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 27, :method-params ([message url line column error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 5, :fn-var true, :arglists (quote ([message url line column error]))}, install! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 110, :column 7, :end-line 110, :end-column 15, :arglists (quote ([]))}, :name devtools.sanity-hints/install!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ajax-reader {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 37, :column 7, :end-line 37, :end-column 18, :arglists (quote ([url]))}, :name devtools.sanity-hints/ajax-reader, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 18, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url]))}, get-line {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 47, :column 7, :end-line 47, :end-column 15, :arglists (quote ([lines line-number]))}, :name devtools.sanity-hints/get-line, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 15, :method-params ([lines line-number]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lines line-number]))}, extend-content {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 50, :column 7, :end-line 50, :end-column 21, :arglists (quote ([content lines line-number min-length]))}, :name devtools.sanity-hints/extend-content, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 21, :method-params ([content lines line-number min-length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 4, :fn-var true, :arglists (quote ([content lines line-number min-length]))}, retrieve-javascript-source {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 43, :column 7, :end-line 43, :end-column 33, :arglists (quote ([where]))}, :name devtools.sanity-hints/retrieve-javascript-source, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 33, :method-params ([where]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([where]))}, empty-as-nil {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 34, :column 7, :end-line 34, :end-column 19, :arglists (quote ([str]))}, :name devtools.sanity-hints/empty-as-nil, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 19, :method-params ([str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([str]))}, make-sense-of-the-error {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 73, :column 7, :end-line 73, :end-column 30, :arglists (quote ([message file line-number column]))}, :name devtools.sanity-hints/make-sense-of-the-error, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 30, :method-params ([message file line-number column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 4, :fn-var true, :arglists (quote ([message file line-number column]))}, type-error-to-string {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 85, :column 7, :end-line 85, :end-column 27, :arglists (quote ([]))}, :name devtools.sanity-hints/type-error-to-string, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, *processed-errors* {:name devtools.sanity-hints/*processed-errors*, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 32, :column 1, :end-line 32, :end-column 28, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 32, :column 10, :end-line 32, :end-column 28}}, uninstall! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 113, :column 7, :end-line 113, :end-column 17, :arglists (quote ([]))}, :name devtools.sanity-hints/uninstall!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, install-type-error-enhancer {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :line 103, :column 7, :end-line 103, :end-column 34, :arglists (quote ([]))}, :name devtools.sanity-hints/install-type-error-enhancer, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/tutorial-cljs/1y1r/mzbcdv/js/main.out/devtools/sanity_hints.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:asset-root :ua-product :else *original-type-error-prototype-to-string* :sanity-hint-min-length :file :column :file-reader :line :chrome}, :order [:file-reader :sanity-hint-min-length :else :ua-product :chrome :asset-root :file :line :column *original-type-error-prototype-to-string*]}, :doc nil}