// Compiled by ClojureScript 1.7.228 {}
goog.provide('tutorial_cljs.text.webgl');
goog.require('cljs.core');
tutorial_cljs.text.webgl.text = ";; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n;; +++++++++++++++                                              +++++++++++++++\n;;                 An Interactive Introduction to Gamma (WebGL)\n;; +++++++++++++++                                              +++++++++++++++\n;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n;; ============================================================================\n;; Using this Tutorial\n;; ============================================================================\n\n;; # Evaluating forms\n;;\n;; You can evaluate forms in this tutorial by putting your cursor at the end of\n;; the form and pressing \"Cmd-Enter\". The output will be displayed to the\n;; right of your cursor. You can dismiss the output view (if it's in your way)\n;; with \"Cmd-Shift-Enter\".\n;;\n;; Try evaluating this:\n\n(+ 1 2) ; <- put your cursor right after the closing ) and press Cmd-Enter\n\n;; ^ You can also put your cursor on the following line and press Cmd-Enter\n\n;; Ok, that was cool, but how about some data that's more complicated?\n{:some 10\n :other 20\n :list (range 10)} ; evaluate this, and you'll be able to interact with the result\n\n;; # Documentation + auto-complete\n;;\n;; If you click `range` in that code above, the documentation for the range\n;; function will appear in the bottom-right corner of this page. You can type\n;; into this document, and documentation + auto-complete suggestions will\n;; appear. Press Tab (and Shift-Tab) to cycle through the suggestions.\n;;\n;; Go ahead, put your cursor at the end of `map`, and see what other functions\n;; have `map` in the name.\n\nmap\n\n;; # The REPL\n;;\n;; The right hand pane is a REPL where you can type in clojurescript code and\n;; see the results. It will show you documentation + auto-complete suggestions\n;; as well.\n\n\n;; ============================================================================\n;; Basic forms\n;; ============================================================================\n\n";

//# sourceMappingURL=webgl.js.map