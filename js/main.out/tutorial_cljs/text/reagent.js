// Compiled by ClojureScript 1.7.228 {}
goog.provide('tutorial_cljs.text.reagent');
goog.require('cljs.core');
tutorial_cljs.text.reagent.text = ";; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n;; +++++++++++++++                                             ++++++++++++++++\n;;                    An Interactive Introduction to Reagent\n;; +++++++++++++++                                             ++++++++++++++++\n;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n;; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n;; ============================================================================\n;; Using this Tutorial\n;; ============================================================================\n\n;; # Evaluating forms\n;;\n;; You can evaluate forms in this tutorial by putting your cursor at the end of\n;; the form and pressing \"Cmd-Enter\". The output will be displayed to the\n;; right of your cursor. You can dismiss the output view (if it's in your way)\n;; with \"Cmd-Shift-Enter\".\n;;\n;; Try evaluating this:\n\n(+ 1 2) ; <- put your cursor right after the closing ) and press Cmd-Enter\n\n;; ^ You can also put your cursor on the following line and press Cmd-Enter\n\n;; Ok, that was cool, but how about some data that's more complicated?\n{:some 10\n :other 20\n :list (range 10)} ; evaluate this, and you'll be able to interact with the result\n\n;; # Documentation + auto-complete\n;;\n;; If you click `range` in that code above, the documentation for the range\n;; function will appear in the bottom-right corner of this page. You can type\n;; into this document, and documentation + auto-complete suggestions will\n;; appear. Press Tab (and Shift-Tab) to cycle through the suggestions.\n;;\n;; Go ahead, put your cursor at the end of `map`, and see what other functions\n;; have `map` in the name.\n\nmap\n\n;; # The REPL\n;;\n;; The right hand pane is a REPL where you can type in clojurescript code and\n;; see the results. It will show you documentation + auto-complete suggestions\n;; as well.\n\n\n;; ============================================================================\n;; Basic forms\n;; ============================================================================\n\n;; We've already evaluated this for you, so you're already in the tutorial.reagent ns\n(ns tutorial.reagent\n  (:require [reagent.core :as r]))\n\n[:span \"Hello\"]\n\n[:div \"one\" \"two\"]\n\n[:span {:style {:color :red}} \"Red text\"]\n\n[:button {:on-click #(js/alert \"clicked!\")} \"Click for a message\"]\n\n;; ============================================================================\n;; Components\n;; ============================================================================\n\n(defn my-component [name]\n  [:span (str \"Hello \" name)])\n\n[my-component \"Julie\"]\n\n\n\n\n\n;; ============================================================================\n;; Components\n;; ============================================================================\n\n\n(defn my-stateful-component [initial-count]\n  (let [count (r/atom initial-count)]\n    (fn []\n      [:button {:on-click #(swap! count inc)}\n       (str \"Clicked \" @count \" times\")])))\n\n[my-stateful-component 10]\n\n\n;; TODO more to come :)\n  ";
tutorial_cljs.text.reagent.unready = "\n\n  ;; ============================================================================\n  ;; Render Windows\n  ;; ============================================================================\n\n  ;; TODO do we even need this???\n  ;; Basically: how do I make this be devcards?\n\n\n  ;; In normal reagent, this would be `r/render`, but we're doing some magic so that\n  ;; it will work in this tutorial enviornment.\n  (makerender\n  :example\n  \"My Awesome Button\"\n  [:button nil \"Click and despair\" ])\n\n  ;; When you evaluate this (Cmd-Enter on the line below it), a new reagent render\n  ;; will open. If you evaluate it again, the render will reload.\n  ;; If you change `:example` to some other name, or create a new\n  ;; `(makerender)` form with a different name, another render will open.\n\n  ";

//# sourceMappingURL=reagent.js.map